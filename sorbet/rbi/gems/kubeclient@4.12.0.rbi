# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `kubeclient` gem.
# Please instead update this file by running `bin/tapioca gem kubeclient`.


# TODO: remove this on next major version bump
# Deprected http exception
#
# source://kubeclient//lib/kubeclient/http_error.rb#3
class KubeException < ::StandardError
  # @return [KubeException] a new instance of KubeException
  #
  # source://kubeclient//lib/kubeclient/http_error.rb#6
  def initialize(error_code, message, response); end

  # Returns the value of attribute error_code.
  #
  # source://kubeclient//lib/kubeclient/http_error.rb#4
  def error_code; end

  # Returns the value of attribute message.
  #
  # source://kubeclient//lib/kubeclient/http_error.rb#4
  def message; end

  # Returns the value of attribute response.
  #
  # source://kubeclient//lib/kubeclient/http_error.rb#4
  def response; end

  # source://kubeclient//lib/kubeclient/http_error.rb#12
  def to_s; end
end

# Kubernetes REST-API Client
#
# source://kubeclient//lib/kubeclient/aws_eks_credentials.rb#3
module Kubeclient; end

# Get a bearer token to authenticate against aws eks.
#
# source://kubeclient//lib/kubeclient/aws_eks_credentials.rb#5
class Kubeclient::AmazonEksCredentials
  class << self
    # source://kubeclient//lib/kubeclient/aws_eks_credentials.rb#10
    def token(credentials, eks_cluster, region: T.unsafe(nil)); end
  end
end

# source://kubeclient//lib/kubeclient/aws_eks_credentials.rb#6
class Kubeclient::AmazonEksCredentials::AmazonEksDependencyError < ::LoadError; end

# Kubernetes Client
#
# source://kubeclient//lib/kubeclient.rb#20
class Kubeclient::Client
  include ::Kubeclient::ClientMixin

  # @return [Client] a new instance of Client
  #
  # source://kubeclient//lib/kubeclient.rb#22
  def initialize(uri, version = T.unsafe(nil), **options); end
end

# Common methods
# this is mixed in by other gems
#
# source://kubeclient//lib/kubeclient/common.rb#7
module Kubeclient::ClientMixin
  # source://kubeclient//lib/kubeclient/common.rb#448
  def all_entities(options = T.unsafe(nil)); end

  # source://kubeclient//lib/kubeclient/common.rb#526
  def api; end

  # Returns the value of attribute api_endpoint.
  #
  # source://kubeclient//lib/kubeclient/common.rb#53
  def api_endpoint; end

  # @return [Boolean]
  #
  # source://kubeclient//lib/kubeclient/common.rb#519
  def api_valid?; end

  # source://kubeclient//lib/kubeclient/common.rb#435
  def apply_entity(resource_name, resource, field_manager:, force: T.unsafe(nil)); end

  # Returns the value of attribute auth_options.
  #
  # source://kubeclient//lib/kubeclient/common.rb#55
  def auth_options; end

  # source://kubeclient//lib/kubeclient/common.rb#220
  def build_namespace_prefix(namespace); end

  # source://kubeclient//lib/kubeclient/common.rb#394
  def create_entity(entity_type, resource_name, entity_config); end

  # source://kubeclient//lib/kubeclient/common.rb#286
  def create_rest_client(path = T.unsafe(nil)); end

  # source://kubeclient//lib/kubeclient/common.rb#225
  def define_entity_methods; end

  # delete_options are passed as a JSON payload in the delete request
  #
  # source://kubeclient//lib/kubeclient/common.rb#376
  def delete_entity(resource_name, name, namespace = T.unsafe(nil), delete_options: T.unsafe(nil)); end

  # source://kubeclient//lib/kubeclient/common.rb#133
  def discover; end

  # Returns the value of attribute discovered.
  #
  # source://kubeclient//lib/kubeclient/common.rb#59
  def discovered; end

  # @return [Boolean]
  #
  # source://kubeclient//lib/kubeclient/common.rb#116
  def discovery_needed?(method_sym); end

  # Accepts the following options:
  #   :namespace (string) - the namespace of the entity.
  #   :label_selector (string) - a selector to restrict the list of returned objects by labels.
  #   :field_selector (string) - a selector to restrict the list of returned objects by fields.
  #   :limit (integer) - a maximum number of items to return in each response
  #   :continue (string) - a token used to retrieve the next chunk of entities
  #   :as (:raw|:ros) - defaults to :ros
  #     :raw - return the raw response body as a string
  #     :ros - return a collection of RecursiveOpenStruct objects
  #
  # source://kubeclient//lib/kubeclient/common.rb#350
  def get_entities(entity_type, resource_name, options = T.unsafe(nil)); end

  # Accepts the following options:
  #   :as (:raw|:ros) - defaults to :ros
  #     :raw - return the raw response body as a string
  #     :ros - return a collection of RecursiveOpenStruct objects
  #
  # source://kubeclient//lib/kubeclient/common.rb#366
  def get_entity(resource_name, name, namespace = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://kubeclient//lib/kubeclient/common.rb#139
  def get_headers; end

  # source://kubeclient//lib/kubeclient/common.rb#462
  def get_pod_log(pod_name, namespace, container: T.unsafe(nil), previous: T.unsafe(nil), timestamps: T.unsafe(nil), since_time: T.unsafe(nil), tail_lines: T.unsafe(nil), limit_bytes: T.unsafe(nil)); end

  # source://kubeclient//lib/kubeclient/common.rb#120
  def handle_exception; end

  # @raise [ArgumentError]
  #
  # source://kubeclient//lib/kubeclient/common.rb#199
  def handle_uri(uri, path); end

  # Returns the value of attribute headers.
  #
  # source://kubeclient//lib/kubeclient/common.rb#58
  def headers; end

  # Returns the value of attribute http_max_redirects.
  #
  # source://kubeclient//lib/kubeclient/common.rb#57
  def http_max_redirects; end

  # Returns the value of attribute http_proxy_uri.
  #
  # source://kubeclient//lib/kubeclient/common.rb#56
  def http_proxy_uri; end

  # source://kubeclient//lib/kubeclient/common.rb#61
  def initialize_client(uri, path, version, ssl_options: T.unsafe(nil), auth_options: T.unsafe(nil), socket_options: T.unsafe(nil), timeouts: T.unsafe(nil), http_proxy_uri: T.unsafe(nil), http_max_redirects: T.unsafe(nil), as: T.unsafe(nil)); end

  # source://kubeclient//lib/kubeclient/common.rb#98
  def method_missing(method_sym, *args, &block); end

  # source://kubeclient//lib/kubeclient/common.rb#423
  def patch_entity(resource_name, name, patch, strategy, namespace); end

  # source://kubeclient//lib/kubeclient/common.rb#510
  def process_template(template); end

  # source://kubeclient//lib/kubeclient/common.rb#498
  def proxy_url(kind, name, port, namespace = T.unsafe(nil)); end

  # source://kubeclient//lib/kubeclient/common.rb#304
  def rest_client; end

  # Returns the value of attribute ssl_options.
  #
  # source://kubeclient//lib/kubeclient/common.rb#54
  def ssl_options; end

  # source://kubeclient//lib/kubeclient/common.rb#413
  def update_entity(resource_name, entity_config); end

  # Accepts the following options:
  #   :namespace (string) - the namespace of the entity.
  #   :name (string) - the name of the entity to watch.
  #   :label_selector (string) - a selector to restrict the list of returned objects by labels.
  #   :field_selector (string) - a selector to restrict the list of returned objects by fields.
  #   :resource_version (string) - shows changes that occur after passed version of a resource.
  #   :as (:raw|:ros) - defaults to :ros
  #     :raw - return the raw response body as a string
  #     :ros - return a collection of RecursiveOpenStruct objects
  # Accepts an optional block, that will be called with each entity,
  # otherwise returns a WatchStream
  #
  # source://kubeclient//lib/kubeclient/common.rb#321
  def watch_entities(resource_name, options = T.unsafe(nil), &block); end

  # source://kubeclient//lib/kubeclient/common.rb#480
  def watch_pod_log(pod_name, namespace, container: T.unsafe(nil), &block); end

  private

  # source://kubeclient//lib/kubeclient/common.rb#604
  def bearer_token(bearer_token); end

  # source://kubeclient//lib/kubeclient/common.rb#600
  def fetch_entities; end

  # Format datetime according to RFC3339
  #
  # source://kubeclient//lib/kubeclient/common.rb#542
  def format_datetime(value); end

  # source://kubeclient//lib/kubeclient/common.rb#553
  def format_response(as, body, list_type = T.unsafe(nil)); end

  # source://kubeclient//lib/kubeclient/common.rb#642
  def http_options(uri); end

  # source://kubeclient//lib/kubeclient/common.rb#586
  def load_entities; end

  # @return [Boolean]
  #
  # source://kubeclient//lib/kubeclient/common.rb#107
  def respond_to_missing?(method_sym, include_private = T.unsafe(nil)); end

  # source://kubeclient//lib/kubeclient/common.rb#632
  def return_or_yield_to_watcher(watcher, &block); end

  # source://kubeclient//lib/kubeclient/common.rb#609
  def validate_auth_options(opts); end

  # @raise [ArgumentError]
  #
  # source://kubeclient//lib/kubeclient/common.rb#624
  def validate_bearer_token_file; end

  class << self
    # source://kubeclient//lib/kubeclient/common.rb#144
    def parse_definition(kind, name); end

    # source://kubeclient//lib/kubeclient/common.rb#188
    def resolve_unconventional_method_names(name, kind, singular_name); end

    # source://kubeclient//lib/kubeclient/common.rb#282
    def underscore_entity(entity_name); end
  end
end

# source://kubeclient//lib/kubeclient/common.rb#18
Kubeclient::ClientMixin::DEFAULT_AUTH_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://kubeclient//lib/kubeclient/common.rb#37
Kubeclient::ClientMixin::DEFAULT_HTTP_MAX_REDIRECTS = T.let(T.unsafe(nil), Integer)

# source://kubeclient//lib/kubeclient/common.rb#36
Kubeclient::ClientMixin::DEFAULT_HTTP_PROXY_URI = T.let(T.unsafe(nil), T.untyped)

# source://kubeclient//lib/kubeclient/common.rb#25
Kubeclient::ClientMixin::DEFAULT_SOCKET_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://kubeclient//lib/kubeclient/common.rb#10
Kubeclient::ClientMixin::DEFAULT_SSL_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://kubeclient//lib/kubeclient/common.rb#30
Kubeclient::ClientMixin::DEFAULT_TIMEOUTS = T.let(T.unsafe(nil), Hash)

# source://kubeclient//lib/kubeclient/common.rb#8
Kubeclient::ClientMixin::ENTITY_METHODS = T.let(T.unsafe(nil), Array)

# source://kubeclient//lib/kubeclient/common.rb#533
Kubeclient::ClientMixin::IRREGULAR_NAMES = T.let(T.unsafe(nil), Hash)

# source://kubeclient//lib/kubeclient/common.rb#39
Kubeclient::ClientMixin::SEARCH_ARGUMENTS = T.let(T.unsafe(nil), Hash)

# source://kubeclient//lib/kubeclient/common.rb#47
Kubeclient::ClientMixin::WATCH_ARGUMENTS = T.let(T.unsafe(nil), Hash)

# source://kubeclient//lib/kubeclient/entity_list.rb#3
module Kubeclient::Common; end

# Kubernetes Entity List
#
# source://kubeclient//lib/kubeclient/entity_list.rb#5
class Kubeclient::Common::EntityList
  # @return [EntityList] a new instance of EntityList
  #
  # source://kubeclient//lib/kubeclient/entity_list.rb#8
  def initialize(kind, resource_version, list, continue = T.unsafe(nil)); end

  # Returns the value of attribute continue.
  #
  # source://kubeclient//lib/kubeclient/entity_list.rb#6
  def continue; end

  # Returns the value of attribute kind.
  #
  # source://kubeclient//lib/kubeclient/entity_list.rb#6
  def kind; end

  # @return [Boolean]
  #
  # source://kubeclient//lib/kubeclient/entity_list.rb#16
  def last?; end

  # Returns the value of attribute resourceVersion.
  #
  # source://kubeclient//lib/kubeclient/entity_list.rb#6
  def resourceVersion; end
end

# Backward compatibility for old versions where kind is missing (e.g. OpenShift Enterprise 3.1)
#
# source://kubeclient//lib/kubeclient/missing_kind_compatibility.rb#4
class Kubeclient::Common::MissingKindCompatibility
  class << self
    # source://kubeclient//lib/kubeclient/missing_kind_compatibility.rb#63
    def resource_kind(name); end
  end
end

# source://kubeclient//lib/kubeclient/missing_kind_compatibility.rb#5
Kubeclient::Common::MissingKindCompatibility::MAPPING = T.let(T.unsafe(nil), Hash)

# HTTP Stream used to watch changes on entities
#
# source://kubeclient//lib/kubeclient/watch_stream.rb#6
class Kubeclient::Common::WatchStream
  # @return [WatchStream] a new instance of WatchStream
  #
  # source://kubeclient//lib/kubeclient/watch_stream.rb#7
  def initialize(uri, http_options, formatter:); end

  # source://kubeclient//lib/kubeclient/watch_stream.rb#15
  def each; end

  # source://kubeclient//lib/kubeclient/watch_stream.rb#35
  def finish; end

  private

  # source://kubeclient//lib/kubeclient/watch_stream.rb#56
  def build_client; end

  # source://kubeclient//lib/kubeclient/watch_stream.rb#81
  def build_client_options; end

  # source://kubeclient//lib/kubeclient/watch_stream.rb#46
  def follow_option; end

  # source://kubeclient//lib/kubeclient/watch_stream.rb#42
  def max_hops; end

  # source://kubeclient//lib/kubeclient/watch_stream.rb#69
  def using_proxy; end
end

# Kubernetes client configuration class
#
# source://kubeclient//lib/kubeclient/config.rb#7
class Kubeclient::Config
  # data (Hash) - Parsed kubeconfig data.
  # kcfg_path (string) - Base directory for resolving relative references to external files.
  #   If set to nil, all external lookups & commands are disabled (even for absolute paths).
  # See also the more convenient Config.read
  #
  # @return [Config] a new instance of Config
  #
  # source://kubeclient//lib/kubeclient/config.rb#25
  def initialize(data, kcfg_path); end

  # source://kubeclient//lib/kubeclient/config.rb#46
  def context(context_name = T.unsafe(nil)); end

  # source://kubeclient//lib/kubeclient/config.rb#42
  def contexts; end

  private

  # @return [Boolean]
  #
  # source://kubeclient//lib/kubeclient/config.rb#85
  def allow_external_lookups?; end

  # @return [Boolean]
  #
  # source://kubeclient//lib/kubeclient/config.rb#136
  def cluster_ca_data?(cluster); end

  # source://kubeclient//lib/kubeclient/config.rb#195
  def expand_command_option(config, key); end

  # source://kubeclient//lib/kubeclient/config.rb#96
  def ext_command_path(path); end

  # source://kubeclient//lib/kubeclient/config.rb#89
  def ext_file_path(path); end

  # @raise [KeyError]
  #
  # source://kubeclient//lib/kubeclient/config.rb#114
  def fetch_context(context_name); end

  # source://kubeclient//lib/kubeclient/config.rb#185
  def fetch_token_from_provider(auth_provider); end

  # source://kubeclient//lib/kubeclient/config.rb#169
  def fetch_user_auth_options(user); end

  # source://kubeclient//lib/kubeclient/config.rb#149
  def fetch_user_cert_data(user); end

  # source://kubeclient//lib/kubeclient/config.rb#159
  def fetch_user_key_data(user); end

  # source://kubeclient//lib/kubeclient/config.rb#140
  def populate_cert_store_from_cluster_ca_data(cluster, cert_store); end

  class << self
    # Builds Config instance by parsing given file, with lookups relative to file's directory.
    #
    # source://kubeclient//lib/kubeclient/config.rb#32
    def read(filename); end
  end
end

# Kubernetes client configuration context class
#
# source://kubeclient//lib/kubeclient/config.rb#9
class Kubeclient::Config::Context
  # @return [Context] a new instance of Context
  #
  # source://kubeclient//lib/kubeclient/config.rb#12
  def initialize(api_endpoint, api_version, ssl_options, auth_options, namespace); end

  # Returns the value of attribute api_endpoint.
  #
  # source://kubeclient//lib/kubeclient/config.rb#10
  def api_endpoint; end

  # Returns the value of attribute api_version.
  #
  # source://kubeclient//lib/kubeclient/config.rb#10
  def api_version; end

  # Returns the value of attribute auth_options.
  #
  # source://kubeclient//lib/kubeclient/config.rb#10
  def auth_options; end

  # Returns the value of attribute namespace.
  #
  # source://kubeclient//lib/kubeclient/config.rb#10
  def namespace; end

  # Returns the value of attribute ssl_options.
  #
  # source://kubeclient//lib/kubeclient/config.rb#10
  def ssl_options; end
end

# An exec-based client auth provide
# https://kubernetes.io/docs/reference/access-authn-authz/authentication/#configuration
# Inspired by https://github.com/kubernetes/client-go/blob/master/plugin/pkg/client/auth/exec/exec.go
#
# source://kubeclient//lib/kubeclient/exec_credentials.rb#7
class Kubeclient::ExecCredentials
  class << self
    # @raise [ArgumentError]
    #
    # source://kubeclient//lib/kubeclient/exec_credentials.rb#9
    def run(opts); end

    private

    # Transform name/value pairs to hash
    #
    # source://kubeclient//lib/kubeclient/exec_credentials.rb#82
    def map_env(env); end

    # source://kubeclient//lib/kubeclient/exec_credentials.rb#37
    def validate_client_credentials_status(status); end

    # source://kubeclient//lib/kubeclient/exec_credentials.rb#67
    def validate_credentials(opts, creds); end

    # source://kubeclient//lib/kubeclient/exec_credentials.rb#52
    def validate_credentials_status(status); end

    # @raise [KeyError]
    #
    # source://kubeclient//lib/kubeclient/exec_credentials.rb#33
    def validate_opts(opts); end
  end
end

# Handle different ways to get a bearer token for Google Cloud Platform.
#
# source://kubeclient//lib/kubeclient/gcp_auth_provider.rb#8
class Kubeclient::GCPAuthProvider
  class << self
    # source://kubeclient//lib/kubeclient/gcp_auth_provider.rb#10
    def token(config); end
  end
end

# Generates a bearer token for Google Cloud Platform.
#
# source://kubeclient//lib/kubeclient/gcp_command_credentials.rb#5
class Kubeclient::GCPCommandCredentials
  class << self
    # source://kubeclient//lib/kubeclient/gcp_command_credentials.rb#7
    def token(config); end

    private

    # source://kubeclient//lib/kubeclient/gcp_command_credentials.rb#26
    def extract_token(output, token_key); end
  end
end

# Get a bearer token from the Google's application default credentials.
#
# source://kubeclient//lib/kubeclient/google_application_default_credentials.rb#5
class Kubeclient::GoogleApplicationDefaultCredentials
  class << self
    # source://kubeclient//lib/kubeclient/google_application_default_credentials.rb#10
    def token; end
  end
end

# source://kubeclient//lib/kubeclient/google_application_default_credentials.rb#6
class Kubeclient::GoogleApplicationDefaultCredentials::GoogleDependencyError < ::LoadError; end

# Exception that is raised when a http request fails
#
# source://kubeclient//lib/kubeclient/http_error.rb#23
class Kubeclient::HttpError < ::KubeException; end

# Uses OIDC id-tokens and refreshes them if they are stale.
#
# source://kubeclient//lib/kubeclient/oidc_auth_provider.rb#5
class Kubeclient::OIDCAuthProvider
  class << self
    # @return [Boolean]
    #
    # source://kubeclient//lib/kubeclient/oidc_auth_provider.rb#38
    def expired?(id_token, discovery); end

    # source://kubeclient//lib/kubeclient/oidc_auth_provider.rb#10
    def token(provider_config); end
  end
end

# source://kubeclient//lib/kubeclient/oidc_auth_provider.rb#6
class Kubeclient::OIDCAuthProvider::OpenIDConnectDependencyError < ::LoadError; end

# Represents all the objects returned by Kubeclient
#
# source://kubeclient//lib/kubeclient/resource.rb#5
class Kubeclient::Resource < ::RecursiveOpenStruct
  # @return [Resource] a new instance of Resource
  #
  # source://kubeclient//lib/kubeclient/resource.rb#6
  def initialize(hash = T.unsafe(nil), args = T.unsafe(nil)); end
end

# source://kubeclient//lib/kubeclient/resource_not_found_error.rb#2
class Kubeclient::ResourceNotFoundError < ::Kubeclient::HttpError; end

# source://kubeclient//lib/kubeclient/version.rb#3
Kubeclient::VERSION = T.let(T.unsafe(nil), String)
