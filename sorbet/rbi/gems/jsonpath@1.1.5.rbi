# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `jsonpath` gem.
# Please instead update this file by running `bin/tapioca gem jsonpath`.


# JsonPath: initializes the class with a given JsonPath and parses that path
# into a token array.
#
# source://jsonpath//lib/jsonpath/proxy.rb#3
class JsonPath
  # @return [JsonPath] a new instance of JsonPath
  #
  # source://jsonpath//lib/jsonpath.rb#27
  def initialize(path, opts = T.unsafe(nil)); end

  # source://jsonpath//lib/jsonpath.rb#128
  def [](obj_or_str, mode = T.unsafe(nil)); end

  # source://jsonpath//lib/jsonpath.rb#128
  def enum_on(obj_or_str, mode = T.unsafe(nil)); end

  # source://jsonpath//lib/jsonpath.rb#57
  def find_matching_brackets(token, scanner); end

  # source://jsonpath//lib/jsonpath.rb#124
  def first(obj_or_str, *args); end

  # source://jsonpath//lib/jsonpath.rb#75
  def join(join_path); end

  # source://jsonpath//lib/jsonpath.rb#81
  def on(obj_or_str, opts = T.unsafe(nil)); end

  # Returns the value of attribute path.
  #
  # source://jsonpath//lib/jsonpath.rb#25
  def path; end

  # Sets the attribute path
  #
  # @param value the value to set the attribute path to.
  #
  # source://jsonpath//lib/jsonpath.rb#25
  def path=(_arg0); end

  private

  # source://jsonpath//lib/jsonpath.rb#148
  def deep_clone; end

  # source://jsonpath//lib/jsonpath.rb#152
  def set_max_nesting; end

  # @return [Boolean]
  #
  # source://jsonpath//lib/jsonpath.rb#157
  def symbolize_keys?(opts); end

  class << self
    # source://jsonpath//lib/jsonpath.rb#116
    def construct_path(table_row); end

    # source://jsonpath//lib/jsonpath.rb#91
    def fetch_all_path(obj); end

    # source://jsonpath//lib/jsonpath.rb#97
    def find_path(obj, root_key, all_paths, is_array = T.unsafe(nil)); end

    # source://jsonpath//lib/jsonpath.rb#138
    def for(obj_or_str); end

    # source://jsonpath//lib/jsonpath.rb#134
    def on(obj_or_str, path, opts = T.unsafe(nil)); end

    # source://jsonpath//lib/jsonpath.rb#144
    def process_object(obj_or_str, opts = T.unsafe(nil)); end
  end
end

# source://jsonpath//lib/jsonpath.rb#17
JsonPath::DEFAULT_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://jsonpath//lib/jsonpath/dig.rb#4
module JsonPath::Dig
  # Similar to what Hash#dig or Array#dig
  #
  # source://jsonpath//lib/jsonpath/dig.rb#7
  def dig(context, *keys); end

  # Returns a hash mapping each key from keys
  # to its dig value on context.
  #
  # source://jsonpath//lib/jsonpath/dig.rb#15
  def dig_as_hash(context, keys); end

  # Dig the value of k on context.
  #
  # source://jsonpath//lib/jsonpath/dig.rb#22
  def dig_one(context, k); end

  # Yields the block if context has a diggable
  # value for k
  #
  # source://jsonpath//lib/jsonpath/dig.rb#39
  def yield_if_diggable(context, k, &blk); end
end

# source://jsonpath//lib/jsonpath/enumerable.rb#4
class JsonPath::Enumerable
  include ::Enumerable
  include ::JsonPath::Dig

  # @return [Enumerable] a new instance of Enumerable
  #
  # source://jsonpath//lib/jsonpath/enumerable.rb#8
  def initialize(path, object, mode, options = T.unsafe(nil)); end

  # source://jsonpath//lib/jsonpath/enumerable.rb#15
  def each(context = T.unsafe(nil), key = T.unsafe(nil), pos = T.unsafe(nil), &blk); end

  private

  # source://jsonpath//lib/jsonpath/enumerable.rb#105
  def ensure_exclusive_end_index(value); end

  # source://jsonpath//lib/jsonpath/enumerable.rb#47
  def filter_context(context, keys); end

  # source://jsonpath//lib/jsonpath/enumerable.rb#111
  def handle_question_mark(sub_path, node, pos, &blk); end

  # source://jsonpath//lib/jsonpath/enumerable.rb#58
  def handle_wildcard(node, expr, _context, _key, pos, &blk); end

  # source://jsonpath//lib/jsonpath/enumerable.rb#152
  def process_function_or_literal(exp, default = T.unsafe(nil)); end

  # source://jsonpath//lib/jsonpath/enumerable.rb#129
  def yield_value(blk, context, key); end
end

# source://jsonpath//lib/jsonpath.rb#15
JsonPath::MAX_NESTING_ALLOWED = T.let(T.unsafe(nil), Integer)

# source://jsonpath//lib/jsonpath.rb#14
JsonPath::PATH_ALL = T.let(T.unsafe(nil), String)

# Parser parses and evaluates an expression passed to @_current_node.
#
# source://jsonpath//lib/jsonpath/parser.rb#7
class JsonPath::Parser
  include ::JsonPath::Dig

  # @return [Parser] a new instance of Parser
  #
  # source://jsonpath//lib/jsonpath/parser.rb#12
  def initialize(node, options); end

  # Construct a map for which the keys are the expressions
  #  and the values are the corresponding parsed results.
  # Exp.:
  # {"(@['author'] =~ /herman|lukyanenko/i)"=>0}
  # {"@['isTrue']"=>true}
  #
  # source://jsonpath//lib/jsonpath/parser.rb#44
  def construct_expression_map(exps); end

  # parse will parse an expression in the following way.
  # Split the expression up into an array of legs for && and || operators.
  # Parse this array into a map for which the keys are the parsed legs
  #  of the split. This map is then used to replace the expression with their
  # corresponding boolean or numeric value. This might look something like this:
  # ((false || false) && (false || true))
  #  Once this string is assembled... we proceed to evaluate from left to right.
  #  The above string is broken down like this:
  # (false && (false || true))
  # (false && true)
  #  false
  #
  # @raise [ArgumentError]
  #
  # source://jsonpath//lib/jsonpath/parser.rb#29
  def parse(exp); end

  # Using a scanner break down the individual expressions and determine if
  # there is a match in the JSON for it or not.
  #
  # source://jsonpath//lib/jsonpath/parser.rb#55
  def parse_exp(exp); end

  private

  #  This is convoluted and I should probably refactor it somehow.
  #  The map that is created will contain strings since essentially I'm
  # constructing a string like `true || true && false`.
  # With eval the need for this would disappear but never the less, here
  #  it is. The fact is that the results can be either boolean, or a number
  # in case there is only indexing happening like give me the 3rd item... or
  # it also can be nil in case of regexes or things that aren't found.
  # Hence, I have to be clever here to see what kind of variable I need to
  # provide back.
  #
  # source://jsonpath//lib/jsonpath/parser.rb#189
  def bool_or_exp(b); end

  # this simply makes sure that we aren't getting into the whole
  #  parenthesis parsing business without knowing that every parenthesis
  # has its pair.
  #
  # source://jsonpath//lib/jsonpath/parser.rb#205
  def check_parenthesis_count(exp); end

  #  This will break down a parenthesis from the left to the right
  #  and replace the given expression with it's returned value.
  # It does this in order to make it easy to eliminate groups
  # one-by-one.
  #
  # source://jsonpath//lib/jsonpath/parser.rb#141
  def parse_parentheses(str); end

  # /foo/i -> Regex.new("foo", Regexp::IGNORECASE) without using eval
  # also supports %r{foo}i
  # following https://github.com/seamusabshere/to_regexp/blob/master/lib/to_regexp.rb
  #
  # @raise [ArgumentError]
  #
  # source://jsonpath//lib/jsonpath/parser.rb#115
  def parse_regex(t); end
end

# source://jsonpath//lib/jsonpath/parser.rb#10
JsonPath::Parser::REGEX = T.let(T.unsafe(nil), Regexp)

# source://jsonpath//lib/jsonpath/proxy.rb#4
class JsonPath::Proxy
  # @return [Proxy] a new instance of Proxy
  #
  # source://jsonpath//lib/jsonpath/proxy.rb#8
  def initialize(obj); end

  # source://jsonpath//lib/jsonpath/proxy.rb#28
  def compact(path = T.unsafe(nil)); end

  # source://jsonpath//lib/jsonpath/proxy.rb#32
  def compact!(path = T.unsafe(nil)); end

  # source://jsonpath//lib/jsonpath/proxy.rb#20
  def delete(path = T.unsafe(nil)); end

  # source://jsonpath//lib/jsonpath/proxy.rb#24
  def delete!(path = T.unsafe(nil)); end

  # source://jsonpath//lib/jsonpath/proxy.rb#12
  def gsub(path, replacement = T.unsafe(nil), &replacement_block); end

  # source://jsonpath//lib/jsonpath/proxy.rb#16
  def gsub!(path, replacement = T.unsafe(nil), &replacement_block); end

  # Returns the value of attribute obj.
  #
  # source://jsonpath//lib/jsonpath/proxy.rb#5
  def obj; end

  # Returns the value of attribute obj.
  #
  # source://jsonpath//lib/jsonpath/proxy.rb#5
  def to_hash; end

  private

  # source://jsonpath//lib/jsonpath/proxy.rb#62
  def _compact(obj, path); end

  # source://jsonpath//lib/jsonpath/proxy.rb#38
  def _deep_copy; end

  # source://jsonpath//lib/jsonpath/proxy.rb#47
  def _delete(obj, path); end

  # source://jsonpath//lib/jsonpath/proxy.rb#42
  def _gsub(obj, path, replacement); end

  # source://jsonpath//lib/jsonpath/proxy.rb#53
  def _remove(obj); end
end

# source://jsonpath//lib/jsonpath/version.rb#4
JsonPath::VERSION = T.let(T.unsafe(nil), String)
