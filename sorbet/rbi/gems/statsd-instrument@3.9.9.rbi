# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `statsd-instrument` gem.
# Please instead update this file by running `bin/tapioca gem statsd-instrument`.


# The `StatsD` module contains low-level metrics for collecting metrics and
# sending them to the backend.
#
# @see .singleton_client Metric method calls on the `StatsD` singleton will
#   be handled by the client assigned to `StatsD.singleton_client`.
# @see StatsD::Instrument `StatsD::Instrument` contains module to instrument
#   existing methods with StatsD metrics
#
# source://statsd-instrument//lib/statsd/instrument.rb#14
module StatsD
  class << self
    # Emits a distribution metric, which builds a histogram of the reported
    # values.
    #
    # @note The distribution metric type is not available on all implementations.
    #   A `NotImplementedError` will be raised if you call this method, but
    #   the active implementation does not support it.
    # @param value [Numeric] The value to include in the distribution histogram.
    # @return [void]
    #
    # source://forwardable/1.3.3/forwardable.rb#231
    def distribution(*args, **_arg1, &block); end

    # Emits an event. An event represents any record of activity noteworthy for engineers.
    #
    # @note Supported by the Datadog implementation only.
    # @param title [String] Event title.
    # @param text [String] Event description. Newlines are allowed.
    # @param timestamp [Time] The of the event. If not provided,
    #   Datadog will interpret it as the current timestamp.
    # @param hostname [String] A hostname to associate with the event.
    # @param priority [String] Priority of the event. Either "normal" (default) or "low".
    # @param source_type_name [String] The source type of the event.
    # @param alert_type [String] Either "error", "warning", "info" (default) or "success".
    # @param tags [Array, Hash] Tags to associate with the event.
    # @param aggregation_key [String] An aggregation key to group events with the same key.
    # @return [void]
    #
    # source://forwardable/1.3.3/forwardable.rb#231
    def event(*args, **_arg1, &block); end

    # Emits a gauge metric.
    #
    # You should use a gauge if you are reporting the current value of
    # something that can only have one value at the time. E.g., the
    # speed of your car. A newly reported value will replace the previously
    # reported value.
    #
    # @param value [Numeric] The gauged value.
    # @return [void]
    #
    # source://forwardable/1.3.3/forwardable.rb#231
    def gauge(*args, **_arg1, &block); end

    # Emits a histogram metric, which builds a histogram of the reported values.
    #
    # @note The histogram metric type is not available on all implementations.
    #   A `NotImplementedError` will be raised if you call this method, but
    #   the active implementation does not support it.
    # @param value [Numeric] The value to include in the histogram.
    # @return [void]
    #
    # source://forwardable/1.3.3/forwardable.rb#231
    def histogram(*args, **_arg1, &block); end

    # Emits a counter metric.
    #
    # You should use a counter metric to count the frequency of something happening. As a
    # result, the value should generally be set to 1 (the default), unless you reporting
    # about a batch of activity. E.g. `increment('messages.processed', messages.size)`
    # For values that are not frequencies, you should use another metric type, e.g.
    # {#histogram} or {#distribution}.
    #
    # @param name [String] The name of the metric.
    #
    #   - We recommend using `snake_case.metric_names` as naming scheme.
    #   - A `.` should be used for namespacing, e.g. `foo.bar.baz`
    #   - A metric name should not include the following characters: `|`, `@`, and `:`.
    #   The library will convert these characters to `_`.
    # @param value [Integer] (default: 1) The value to increment the counter by.
    #
    #   You should not compensate for the sample rate using the counter increment. E.g., if
    #   your sample rate is set to `0.01`, you should not use 100 as increment to compensate
    #   for it. The sample rate is part of the packet that is being sent to the server, and
    #   the server should know how to compensate for it.
    # @param sample_rate [Float] (default: `#default_sample_rate`) The rate at which to sample
    #   this metric call. This value should be between 0 and 1. This value can be used to reduce
    #   the amount of network I/O (and CPU cycles) is being used for very frequent metrics.
    #
    #   - A value of `0.1` means that only 1 out of 10 calls will be emitted; the other 9 will
    #   be short-circuited.
    #   - When set to `1`, every metric will be emitted.
    #   - If this parameter is not set, the default sample rate for this client will be used.
    # @param tags [Hash<Symbol, String>, Array<String>] (default: nil)
    # @return [void]
    #
    # source://forwardable/1.3.3/forwardable.rb#231
    def increment(*args, **_arg1, &block); end

    # The logger to use in case of any errors.
    #
    # @return [Logger]
    # @see StatsD::Instrument::LogSink
    #
    # source://statsd-instrument//lib/statsd/instrument.rb#332
    def logger; end

    # The logger to use in case of any errors.
    #
    # @return [Logger]
    # @see StatsD::Instrument::LogSink
    #
    # source://statsd-instrument//lib/statsd/instrument.rb#332
    def logger=(_arg0); end

    # Emits a timing metric.
    #
    # @param value [Numeric] The duration to record, in milliseconds.
    # @return [void]
    #
    # source://forwardable/1.3.3/forwardable.rb#231
    def measure(*args, **_arg1, &block); end

    # Emits a service check. Services Checks allow you to characterize the status
    # of a service in order to monitor it within Datadog.
    #
    # @note Supported by the Datadog implementation only.
    # @param name [String] Name of the service
    # @param status [Symbol] Either `:ok`, `:warning`, `:critical` or `:unknown`
    # @param timestamp [Time] The moment when the service was checked. If not provided,
    #   Datadog will interpret it as the current timestamp.
    # @param tags [Array, Hash] Tags to associate with the check.
    # @param message [String] A message describing the current state of the service check.
    # @param hostname [String] A hostname to associate with the check.
    # @return [void]
    #
    # source://forwardable/1.3.3/forwardable.rb#231
    def service_check(*args, **_arg1, &block); end

    # Emits a set metric, which counts distinct values.
    #
    # @param value [Numeric, String] The value to count for distinct occurrences.
    # @return [void]
    #
    # source://forwardable/1.3.3/forwardable.rb#231
    def set(*args, **_arg1, &block); end

    # The StatsD client that handles method calls on the StatsD singleton
    #
    # @return [StatsD::Instrument::Client]
    #
    # source://statsd-instrument//lib/statsd/instrument.rb#343
    def singleton_client; end

    # The StatsD client that handles method calls on the StatsD singleton.
    #
    # E.g. a call to `StatsD.increment` will be handled by this client.
    #
    # @return [StatsD::Instrument::Client]
    #
    # source://statsd-instrument//lib/statsd/instrument.rb#339
    def singleton_client=(_arg0); end

    private

    # @private
    #
    # source://statsd-instrument//lib/statsd/instrument.rb#383
    def extended(klass); end
  end
end

# The StatsD::Instrument module provides metaprogramming methods to instrument your methods with
# StatsD metrics. E.g., you can create counters on how often a method is called, how often it is
# successful, the duration of the methods call, etc.
#
# source://statsd-instrument//lib/statsd/instrument.rb#18
module StatsD::Instrument
  # Adds counter instrumentation to a method.
  #
  # The metric will be incremented for every call of the instrumented method, no matter
  # whether what the method returns, or whether it raises an exception.
  #
  # @param sample_rate
  # @param tags
  # @param no_prefix
  # @param client
  # @param method [Symbol] The name of the method to instrument.
  # @param name [String, #call] The name of the metric to use. You can also pass in a
  #   callable to dynamically generate a metric name
  # @return [void]
  #
  # source://statsd-instrument//lib/statsd/instrument.rb#209
  def statsd_count(method, name, sample_rate: T.unsafe(nil), tags: T.unsafe(nil), no_prefix: T.unsafe(nil), client: T.unsafe(nil)); end

  # Adds success counter instrumentation to a method.
  #
  # A method call will be considered successful if it does not raise an exception, and the result is true-y.
  # Only for successful calls, the metric will be incremented.
  #
  # @param method [Symbol] The name of the method to instrument.
  # @param name [String, #call] The name of the metric to use. You can also pass in a
  #   callable to dynamically generate a metric name
  # @return [void]
  # @see #statsd_count_success
  # @yield You can pass a block to this method if you want to define yourself what is a successful call
  #   based on the return value of the method.
  # @yieldparam result The return value of the instrumented method.
  # @yieldreturn [Boolean] Return true iff the return value is considered a success, false otherwise.
  #
  # source://statsd-instrument//lib/statsd/instrument.rb#170
  def statsd_count_if(method, name, sample_rate: T.unsafe(nil), tags: T.unsafe(nil), no_prefix: T.unsafe(nil), client: T.unsafe(nil)); end

  # Adds success and failure counter instrumentation to a method.
  #
  # A method call will be considered successful if it does not raise an exception, and the result is true-y.
  # For successful calls, the metric <tt>[name].success</tt> will be incremented; for failed calls, the metric
  # name is <tt>[name].failure</tt>.
  #
  # @param tag_error_class add a <tt>error_class</tt> tag with the error class when an error is thrown
  # @param method [Symbol] The name of the method to instrument.
  # @param name [String, #call] The name of the metric to use. You can also pass in a
  #   callable to dynamically generate a metric name
  # @return [void]
  # @see #statsd_count_if
  # @yield You can pass a block to this method if you want to define yourself what is a successful call
  #   based on the return value of the method.
  # @yieldparam result The return value of the instrumented method.
  # @yieldreturn [Boolean] Return true iff the return value is considered a success, false otherwise.
  #
  # source://statsd-instrument//lib/statsd/instrument.rb#129
  def statsd_count_success(method, name, sample_rate: T.unsafe(nil), tags: T.unsafe(nil), no_prefix: T.unsafe(nil), client: T.unsafe(nil), tag_error_class: T.unsafe(nil)); end

  # Adds execution duration instrumentation to a method as a distribution.
  #
  # @note Supported by the datadog implementation only (in beta)
  # @param method [Symbol] The name of the method to instrument.
  # @param name [String, #call] The name of the metric to use. You can also pass in a
  #   callable to dynamically generate a metric name
  # @return [void]
  #
  # source://statsd-instrument//lib/statsd/instrument.rb#100
  def statsd_distribution(method, name, sample_rate: T.unsafe(nil), tags: T.unsafe(nil), no_prefix: T.unsafe(nil), client: T.unsafe(nil)); end

  # @private
  #
  # source://statsd-instrument//lib/statsd/instrument.rb#20
  def statsd_instrumentations; end

  # Adds execution duration instrumentation to a method as a timing.
  #
  # @param method [Symbol] The name of the method to instrument.
  # @param name [String, #call] The name of the metric to use. You can also pass in a
  #   callable to dynamically generate a metric name
  # @param tags [Hash, #call] The tags to be associated with the metric. You can also
  #   pass in a callable to dynamically generate the tags key and values
  # @return [void]
  #
  # source://statsd-instrument//lib/statsd/instrument.rb#79
  def statsd_measure(method, name, sample_rate: T.unsafe(nil), tags: T.unsafe(nil), no_prefix: T.unsafe(nil), client: T.unsafe(nil)); end

  # Removes StatsD counter instrumentation from a method
  #
  # @param method [Symbol] The method to remove instrumentation from.
  # @param name [String] The name of the metric that was used.
  # @return [void]
  # @see #statsd_count
  #
  # source://statsd-instrument//lib/statsd/instrument.rb#226
  def statsd_remove_count(method, name); end

  # Removes StatsD conditional counter instrumentation from a method
  #
  # @param method [Symbol] The method to remove instrumentation from.
  # @param name [String] The name of the metric that was used.
  # @return [void]
  # @see #statsd_count_if
  #
  # source://statsd-instrument//lib/statsd/instrument.rb#235
  def statsd_remove_count_if(method, name); end

  # Removes StatsD success counter instrumentation from a method
  #
  # @param method [Symbol] The method to remove instrumentation from.
  # @param name [String] The name of the metric that was used.
  # @return [void]
  # @see #statsd_count_success
  #
  # source://statsd-instrument//lib/statsd/instrument.rb#244
  def statsd_remove_count_success(method, name); end

  # Removes StatsD distribution instrumentation from a method
  #
  # @param method [Symbol] The method to remove instrumentation from.
  # @param name [String] The name of the metric that was used.
  # @return [void]
  # @see #statsd_measure
  #
  # source://statsd-instrument//lib/statsd/instrument.rb#262
  def statsd_remove_distribution(method, name); end

  # Removes StatsD measure instrumentation from a method
  #
  # @param method [Symbol] The method to remove instrumentation from.
  # @param name [String] The name of the metric that was used.
  # @return [void]
  # @see #statsd_measure
  #
  # source://statsd-instrument//lib/statsd/instrument.rb#253
  def statsd_remove_measure(method, name); end

  private

  # source://statsd-instrument//lib/statsd/instrument.rb#284
  def add_to_method(method, name, action, &block); end

  # source://statsd-instrument//lib/statsd/instrument.rb#314
  def method_visibility(method); end

  # source://statsd-instrument//lib/statsd/instrument.rb#310
  def remove_from_method(method, name, action); end

  # source://statsd-instrument//lib/statsd/instrument.rb#272
  def statsd_instrumentation_for(method, name, action); end

  class << self
    # Even though this method is considered private, and is no longer used internally,
    # applications in the wild rely on it. As a result, we cannot remove this method
    # until the next major version.
    #
    # @deprecated Use Process.clock_gettime(Process::CLOCK_MONOTONIC) instead.
    #
    # source://statsd-instrument//lib/statsd/instrument.rb#52
    def current_timestamp; end

    # Even though this method is considered private, and is no longer used internally,
    # applications in the wild rely on it. As a result, we cannot remove this method
    # until the next major version.
    #
    # @deprecated You can implement similar functionality yourself using
    #   `Process.clock_gettime(Process::CLOCK_MONOTONIC)`. Think about what will
    #   happen if an exception happens during the block execution though.
    #
    # source://statsd-instrument//lib/statsd/instrument.rb#63
    def duration; end

    # Generates a metric name for an instrumented method.
    #
    # @private
    # @return [String]
    #
    # source://statsd-instrument//lib/statsd/instrument.rb#34
    def generate_metric_name(name, callee, *args); end

    # Generates the tags for an instrumented method.
    #
    # @private
    # @return [Array[String]]
    #
    # source://statsd-instrument//lib/statsd/instrument.rb#41
    def generate_tags(tags, callee, *args); end
  end
end

# source://statsd-instrument//lib/statsd/instrument/aggregator.rb#5
class StatsD::Instrument::AggregationKey
  # @return [AggregationKey] a new instance of AggregationKey
  #
  # source://statsd-instrument//lib/statsd/instrument/aggregator.rb#8
  def initialize(name, tags, no_prefix, type, sample_rate: T.unsafe(nil)); end

  # source://statsd-instrument//lib/statsd/instrument/aggregator.rb#17
  def ==(other); end

  # source://statsd-instrument//lib/statsd/instrument/aggregator.rb#17
  def eql?(other); end

  # Returns the value of attribute hash.
  #
  # source://statsd-instrument//lib/statsd/instrument/aggregator.rb#6
  def hash; end

  # Returns the value of attribute name.
  #
  # source://statsd-instrument//lib/statsd/instrument/aggregator.rb#6
  def name; end

  # Returns the value of attribute no_prefix.
  #
  # source://statsd-instrument//lib/statsd/instrument/aggregator.rb#6
  def no_prefix; end

  # Returns the value of attribute sample_rate.
  #
  # source://statsd-instrument//lib/statsd/instrument/aggregator.rb#6
  def sample_rate; end

  # Returns the value of attribute tags.
  #
  # source://statsd-instrument//lib/statsd/instrument/aggregator.rb#6
  def tags; end

  # Returns the value of attribute type.
  #
  # source://statsd-instrument//lib/statsd/instrument/aggregator.rb#6
  def type; end
end

# source://statsd-instrument//lib/statsd/instrument/aggregator.rb#27
class StatsD::Instrument::Aggregator
  # @param sink [#<<] The sink to write the aggregated metrics to.
  # @param datagram_builder_class [Class] The class to use for building datagrams.
  # @param prefix [String] The prefix to add to all metrics.
  # @param default_tags [Array<String>] The tags to add to all metrics.
  # @param flush_interval [Float] The interval at which to flush the aggregated metrics.
  # @param max_values [Integer] The maximum number of values to aggregate before flushing.
  # @return [Aggregator] a new instance of Aggregator
  #
  # source://statsd-instrument//lib/statsd/instrument/aggregator.rb#85
  def initialize(sink, datagram_builder_class, prefix, default_tags, flush_interval: T.unsafe(nil), max_values: T.unsafe(nil)); end

  # source://statsd-instrument//lib/statsd/instrument/aggregator.rb#138
  def aggregate_timing(name, value, tags: T.unsafe(nil), no_prefix: T.unsafe(nil), type: T.unsafe(nil), sample_rate: T.unsafe(nil)); end

  # source://statsd-instrument//lib/statsd/instrument/aggregator.rb#172
  def flush; end

  # source://statsd-instrument//lib/statsd/instrument/aggregator.rb#158
  def gauge(name, value, tags: T.unsafe(nil), no_prefix: T.unsafe(nil)); end

  # Increment a counter by a given value and save it for later flushing.
  #
  # @param name [String] The name of the counter.
  # @param value [Integer] The value to increment the counter by.
  # @param tags [Hash{String, Symbol => String}, Array<String>] The tags to attach to the counter.
  # @param no_prefix [Boolean] If true, the metric will not be prefixed.
  # @return [void]
  #
  # source://statsd-instrument//lib/statsd/instrument/aggregator.rb#123
  def increment(name, value = T.unsafe(nil), tags: T.unsafe(nil), no_prefix: T.unsafe(nil)); end

  private

  # source://statsd-instrument//lib/statsd/instrument/aggregator.rb#236
  def datagram_builder(no_prefix:); end

  # Flushes the aggregated metrics to the sink.
  # Iterates over the aggregation state and sends each metric to the sink.
  # If you change this function, you need to update the logic in the finalizer as well.
  #
  # source://statsd-instrument//lib/statsd/instrument/aggregator.rb#183
  def do_flush; end

  # source://statsd-instrument//lib/statsd/instrument/aggregator.rb#226
  def packet_key(name, tags = T.unsafe(nil), no_prefix = T.unsafe(nil), type = T.unsafe(nil), sample_rate: T.unsafe(nil)); end

  # source://statsd-instrument//lib/statsd/instrument/aggregator.rb#243
  def start_flush_thread; end

  # source://statsd-instrument//lib/statsd/instrument/aggregator.rb#215
  def tags_sorted(tags); end

  # source://statsd-instrument//lib/statsd/instrument/aggregator.rb#257
  def thread_healthcheck; end

  class << self
    # source://statsd-instrument//lib/statsd/instrument/aggregator.rb#39
    def finalize(aggregation_state, sink, datagram_builders, datagram_builder_class, default_tags); end
  end
end

# source://statsd-instrument//lib/statsd/instrument/aggregator.rb#30
StatsD::Instrument::Aggregator::CONST_SAMPLE_RATE = T.let(T.unsafe(nil), Float)

# source://statsd-instrument//lib/statsd/instrument/aggregator.rb#31
StatsD::Instrument::Aggregator::COUNT = T.let(T.unsafe(nil), Symbol)

# source://statsd-instrument//lib/statsd/instrument/aggregator.rb#28
StatsD::Instrument::Aggregator::DEFAULT_MAX_CONTEXT_SIZE = T.let(T.unsafe(nil), Integer)

# source://statsd-instrument//lib/statsd/instrument/aggregator.rb#32
StatsD::Instrument::Aggregator::DISTRIBUTION = T.let(T.unsafe(nil), Symbol)

# source://statsd-instrument//lib/statsd/instrument/aggregator.rb#178
StatsD::Instrument::Aggregator::EMPTY_ARRAY = T.let(T.unsafe(nil), Array)

# source://statsd-instrument//lib/statsd/instrument/aggregator.rb#35
StatsD::Instrument::Aggregator::GAUGE = T.let(T.unsafe(nil), Symbol)

# source://statsd-instrument//lib/statsd/instrument/aggregator.rb#34
StatsD::Instrument::Aggregator::HISTOGRAM = T.let(T.unsafe(nil), Symbol)

# source://statsd-instrument//lib/statsd/instrument/aggregator.rb#33
StatsD::Instrument::Aggregator::MEASURE = T.let(T.unsafe(nil), Symbol)

# This module defines several assertion methods that can be used to verify that
# your application is emitting the right StatsD metrics.
#
# Every metric type has its own assertion method, like {#assert_statsd_increment}
# to assert `StatsD.increment` calls. You can also assert other properties of the
# metric that was emitted, like the sample rate or presence of tags.
# To check for the absence of metrics, use {#assert_no_statsd_calls}.
#
# @example Check for metric properties:
#   assert_statsd_measure('foo', sample_rate: 0.1, tags: ["bar"]) do
#   StatsD.measure('foo', sample_rate: 0.5, tags: ['bar','baz']) do
#   some_code_to_measure
#   end
#   end
# @example Check for multiple occurrences:
#   assert_statsd_increment('foo', times: 2) do
#   StatsD.increment('foo')
#   StatsD.increment('foo')
#   end
# @example Absence of metrics
#   assert_no_statsd_calls do
#   foo
#   end
# @example Handling exceptions
#   assert_statsd_increment('foo.error') do
#   # If we expect exceptions to occur, we have to handle them inside
#   # the block we pass to assert_statsd_increment.
#   assert_raises(RuntimeError) do
#   begin
#   attempt_foo
#   rescue
#   StatsD.increment('foo.error')
#   raise 'foo failed'
#   end
#   end
#   end
#
# source://statsd-instrument//lib/statsd/instrument/assertions.rb#44
module StatsD::Instrument::Assertions
  include ::StatsD::Instrument::Helpers

  # Asserts no metric occurred during the execution of the provided block.
  #
  # @param metric_names [Array<String>] (default: []) The metric names that are not
  #   allowed to happen inside the block. If this is set to `[]`, the assertion
  #   will fail if any metric occurs.
  # @param datagrams [Array<StatsD::Instrument::Datagram>] (default: nil) The datagrams
  #   to be inspected for metric emission.
  # @param client [StatsD::Instrument::Client] (default: nil) The client to be used
  #   for fetching datagrams (if not provided) and metric prefix. If not provided, the
  #   singleton client will attempt to be used.
  # @param no_prefix [Boolean] (default: false) A directive to indicate if the client's
  #   prefix should be prepended to the metric names.
  # @raise [Minitest::Assertion] If an exception occurs, or if any metric (with the
  #   provided names, or any), occurred during the execution of the provided block.
  # @return [void]
  # @yield A block in which the specified metric should not occur. This block
  #   should not raise any exceptions.
  #
  # source://statsd-instrument//lib/statsd/instrument/assertions.rb#64
  def assert_no_statsd_calls(*metric_names, datagrams: T.unsafe(nil), client: T.unsafe(nil), no_prefix: T.unsafe(nil), &block); end

  # Asserts that the set of provided metric expectations came true.
  #
  # Generally, it's recommended to  use more specific assertion methods, like
  # {#assert_statsd_increment} and others.
  # For backwards compatibility
  #
  # @param expectations [Array<StatsD::Instrument::Expectation>] The set of
  #   expectations to verify.
  # @private
  # @raise [Minitest::Assertion] If an exception occurs, or if the metric did
  #   not occur as specified during the execution the block.
  # @return [void]
  # @yield A block in which the specified metric should occur. This block
  #   should not raise any exceptions.
  #
  # source://statsd-instrument//lib/statsd/instrument/assertions.rb#175
  def assert_statsd_calls(expectations, datagrams: T.unsafe(nil), client: T.unsafe(nil), &block); end

  # Asserts that a given distribution metric occurred inside the provided block.
  #
  # @param metric_name [String] The name of the metric that should occur.
  # @param options [Hash] (see StatsD::Instrument::MetricExpectation.new)
  # @raise [Minitest::Assertion] If an exception occurs, or if the metric did
  #   not occur as specified during the execution the block.
  # @return [void]
  # @yield A block in which the specified metric should occur. This block
  #   should not raise any exceptions.
  #
  # source://statsd-instrument//lib/statsd/instrument/assertions.rb#147
  def assert_statsd_distribution(metric_name, value = T.unsafe(nil), datagrams: T.unsafe(nil), client: T.unsafe(nil), **options, &block); end

  # Asserts that the set of provided metric expectations came true.
  #
  # Generally, it's recommended to  use more specific assertion methods, like
  # {#assert_statsd_increment} and others.
  #
  # @param expectations [Array<StatsD::Instrument::Expectation>] The set of
  #   expectations to verify.
  # @private
  # @raise [Minitest::Assertion] If an exception occurs, or if the metric did
  #   not occur as specified during the execution the block.
  # @return [void]
  # @yield A block in which the specified metric should occur. This block
  #   should not raise any exceptions.
  #
  # source://statsd-instrument//lib/statsd/instrument/assertions.rb#175
  def assert_statsd_expectation(expectations, datagrams: T.unsafe(nil), client: T.unsafe(nil), &block); end

  # Asserts that the set of provided metric expectations came true.
  #
  # Generally, it's recommended to  use more specific assertion methods, like
  # {#assert_statsd_increment} and others.
  #
  # @param expectations [Array<StatsD::Instrument::Expectation>] The set of
  #   expectations to verify.
  # @private
  # @raise [Minitest::Assertion] If an exception occurs, or if the metric did
  #   not occur as specified during the execution the block.
  # @return [void]
  # @yield A block in which the specified metric should occur. This block
  #   should not raise any exceptions.
  #
  # source://statsd-instrument//lib/statsd/instrument/assertions.rb#175
  def assert_statsd_expectations(expectations, datagrams: T.unsafe(nil), client: T.unsafe(nil), &block); end

  # Asserts that a given gauge metric occurred inside the provided block.
  #
  # @param metric_name [String] The name of the metric that should occur.
  # @param options [Hash] (see StatsD::Instrument::MetricExpectation.new)
  # @raise [Minitest::Assertion] If an exception occurs, or if the metric did
  #   not occur as specified during the execution the block.
  # @return [void]
  # @yield A block in which the specified metric should occur. This block
  #   should not raise any exceptions.
  #
  # source://statsd-instrument//lib/statsd/instrument/assertions.rb#123
  def assert_statsd_gauge(metric_name, value = T.unsafe(nil), datagrams: T.unsafe(nil), client: T.unsafe(nil), **options, &block); end

  # Asserts that a given histogram metric occurred inside the provided block.
  #
  # @param metric_name [String] The name of the metric that should occur.
  # @param options [Hash] (see StatsD::Instrument::MetricExpectation.new)
  # @raise [Minitest::Assertion] If an exception occurs, or if the metric did
  #   not occur as specified during the execution the block.
  # @return [void]
  # @yield A block in which the specified metric should occur. This block
  #   should not raise any exceptions.
  #
  # source://statsd-instrument//lib/statsd/instrument/assertions.rb#135
  def assert_statsd_histogram(metric_name, value = T.unsafe(nil), datagrams: T.unsafe(nil), client: T.unsafe(nil), **options, &block); end

  # Asserts that a given counter metric occurred inside the provided block.
  #
  # @param metric_name [String] The name of the metric that should occur.
  # @param options [Hash] (see StatsD::Instrument::MetricExpectation.new)
  # @raise [Minitest::Assertion] If an exception occurs, or if the metric did
  #   not occur as specified during the execution the block.
  # @return [void]
  # @yield A block in which the specified metric should occur. This block
  #   should not raise any exceptions.
  #
  # source://statsd-instrument//lib/statsd/instrument/assertions.rb#99
  def assert_statsd_increment(metric_name, value = T.unsafe(nil), datagrams: T.unsafe(nil), client: T.unsafe(nil), **options, &block); end

  # Asserts that a given timing metric occurred inside the provided block.
  #
  # @param metric_name [String] The name of the metric that should occur.
  # @param options [Hash] (see StatsD::Instrument::MetricExpectation.new)
  # @raise [Minitest::Assertion] If an exception occurs, or if the metric did
  #   not occur as specified during the execution the block.
  # @return [void]
  # @yield A block in which the specified metric should occur. This block
  #   should not raise any exceptions.
  #
  # source://statsd-instrument//lib/statsd/instrument/assertions.rb#111
  def assert_statsd_measure(metric_name, value = T.unsafe(nil), datagrams: T.unsafe(nil), client: T.unsafe(nil), **options, &block); end

  # Asserts that a given set metric occurred inside the provided block.
  #
  # @param metric_name [String] The name of the metric that should occur.
  # @param options [Hash] (see StatsD::Instrument::MetricExpectation.new)
  # @raise [Minitest::Assertion] If an exception occurs, or if the metric did
  #   not occur as specified during the execution the block.
  # @return [void]
  # @yield A block in which the specified metric should occur. This block
  #   should not raise any exceptions.
  #
  # source://statsd-instrument//lib/statsd/instrument/assertions.rb#159
  def assert_statsd_set(metric_name, value = T.unsafe(nil), datagrams: T.unsafe(nil), client: T.unsafe(nil), **options, &block); end

  private

  # source://statsd-instrument//lib/statsd/instrument/assertions.rb#234
  def capture_statsd_datagrams_with_exception_handling(client:, &block); end
end

# source://statsd-instrument//lib/statsd/instrument/batched_sink.rb#7
class StatsD::Instrument::BatchedSink
  extend ::Forwardable

  # @return [BatchedSink] a new instance of BatchedSink
  #
  # source://statsd-instrument//lib/statsd/instrument/batched_sink.rb#30
  def initialize(sink, thread_priority: T.unsafe(nil), buffer_capacity: T.unsafe(nil), max_packet_size: T.unsafe(nil), statistics_interval: T.unsafe(nil)); end

  # source://statsd-instrument//lib/statsd/instrument/batched_sink.rb#52
  def <<(datagram); end

  # source://statsd-instrument//lib/statsd/instrument/batched_sink.rb#65
  def connection; end

  # source://statsd-instrument//lib/statsd/instrument/batched_sink.rb#61
  def flush(blocking:); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def host(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def port(*args, **_arg1, &block); end

  # @return [Boolean]
  #
  # source://statsd-instrument//lib/statsd/instrument/batched_sink.rb#48
  def sample?(sample_rate); end

  # source://statsd-instrument//lib/statsd/instrument/batched_sink.rb#57
  def shutdown(*args); end

  class << self
    # source://statsd-instrument//lib/statsd/instrument/batched_sink.rb#25
    def finalize(dispatcher); end

    # source://statsd-instrument//lib/statsd/instrument/batched_sink.rb#20
    def for_addr(addr, **kwargs); end
  end
end

# source://statsd-instrument//lib/statsd/instrument/batched_sink.rb#69
class StatsD::Instrument::BatchedSink::Buffer < ::Thread::SizedQueue
  # source://statsd-instrument//lib/statsd/instrument/batched_sink.rb#76
  def inspect; end

  # source://statsd-instrument//lib/statsd/instrument/batched_sink.rb#80
  def pop_nonblock; end

  # source://statsd-instrument//lib/statsd/instrument/batched_sink.rb#70
  def push_nonblock(item); end
end

# source://statsd-instrument//lib/statsd/instrument/batched_sink.rb#14
StatsD::Instrument::BatchedSink::DEFAULT_BUFFER_CAPACITY = T.let(T.unsafe(nil), Integer)

# https://docs.datadoghq.com/developers/dogstatsd/high_throughput/?code-lang=ruby#ensure-proper-packet-sizes
#
# source://statsd-instrument//lib/statsd/instrument/batched_sink.rb#16
StatsD::Instrument::BatchedSink::DEFAULT_MAX_PACKET_SIZE = T.let(T.unsafe(nil), Integer)

# in seconds, and 0 implies disabled-by-default.
#
# source://statsd-instrument//lib/statsd/instrument/batched_sink.rb#17
StatsD::Instrument::BatchedSink::DEFAULT_STATISTICS_INTERVAL = T.let(T.unsafe(nil), Integer)

# source://statsd-instrument//lib/statsd/instrument/batched_sink.rb#13
StatsD::Instrument::BatchedSink::DEFAULT_THREAD_PRIORITY = T.let(T.unsafe(nil), Integer)

# source://statsd-instrument//lib/statsd/instrument/batched_sink.rb#155
class StatsD::Instrument::BatchedSink::Dispatcher
  # @return [Dispatcher] a new instance of Dispatcher
  #
  # source://statsd-instrument//lib/statsd/instrument/batched_sink.rb#156
  def initialize(sink, buffer_capacity, thread_priority, max_packet_size, statistics_interval); end

  # source://statsd-instrument//lib/statsd/instrument/batched_sink.rb#171
  def <<(datagram); end

  # source://statsd-instrument//lib/statsd/instrument/batched_sink.rb#192
  def flush(blocking:); end

  # source://statsd-instrument//lib/statsd/instrument/batched_sink.rb#183
  def shutdown(wait = T.unsafe(nil)); end

  private

  # source://statsd-instrument//lib/statsd/instrument/batched_sink.rb#255
  def dispatch; end

  # source://statsd-instrument//lib/statsd/instrument/batched_sink.rb#267
  def report_error(error); end

  # source://statsd-instrument//lib/statsd/instrument/batched_sink.rb#232
  def thread_healthcheck; end
end

# source://statsd-instrument//lib/statsd/instrument/batched_sink.rb#230
StatsD::Instrument::BatchedSink::Dispatcher::NEWLINE = T.let(T.unsafe(nil), String)

# source://statsd-instrument//lib/statsd/instrument/batched_sink.rb#87
class StatsD::Instrument::BatchedSink::DispatcherStats
  # @return [DispatcherStats] a new instance of DispatcherStats
  #
  # source://statsd-instrument//lib/statsd/instrument/batched_sink.rb#88
  def initialize(interval, type); end

  # source://statsd-instrument//lib/statsd/instrument/batched_sink.rb#145
  def increment_batched_sends(buffer_len, packet_size, batch_len); end

  # source://statsd-instrument//lib/statsd/instrument/batched_sink.rb#141
  def increment_synchronous_sends; end

  # source://statsd-instrument//lib/statsd/instrument/batched_sink.rb#117
  def maybe_flush!(force: T.unsafe(nil)); end
end

# @note This class is part of the new Client implementation that is intended
#   to become the new default in the next major release of this library.
#
# source://statsd-instrument//lib/statsd/instrument/capture_sink.rb#7
class StatsD::Instrument::CaptureSink
  # @return [CaptureSink] a new instance of CaptureSink
  #
  # source://statsd-instrument//lib/statsd/instrument/capture_sink.rb#10
  def initialize(parent:, datagram_class: T.unsafe(nil)); end

  # source://statsd-instrument//lib/statsd/instrument/capture_sink.rb#20
  def <<(datagram); end

  # source://statsd-instrument//lib/statsd/instrument/capture_sink.rb#26
  def clear; end

  # Returns the value of attribute datagram_class.
  #
  # source://statsd-instrument//lib/statsd/instrument/capture_sink.rb#8
  def datagram_class; end

  # Returns the value of attribute datagrams.
  #
  # source://statsd-instrument//lib/statsd/instrument/capture_sink.rb#8
  def datagrams; end

  # source://statsd-instrument//lib/statsd/instrument/capture_sink.rb#30
  def flush(blocking:); end

  # Returns the value of attribute parent.
  #
  # source://statsd-instrument//lib/statsd/instrument/capture_sink.rb#8
  def parent; end

  # @return [Boolean]
  #
  # source://statsd-instrument//lib/statsd/instrument/capture_sink.rb#16
  def sample?(_sample_rate); end
end

# The Client is the main interface for using StatsD. It defines the metric
# methods that you would normally call from your application.
#
# The client set to {StatsD.singleton_client} will handle all metric calls made
# against the StatsD singleton, e.g. `StatsD.increment`.
#
# We recommend that the configuration of the StatsD setup is provided through
# environment variables
#
# You are encouraged to instantiate multiple clients, and instantiate variants
# of an existing clients using {#clone_with_options}. We recommend instantiating
# a separate client for every logical component of your application using
# `clone_with_options`, and setting a different metric `prefix`.
#
# @see StatsD.singleton_client
# @see #clone_with_options
#
# source://statsd-instrument//lib/statsd/instrument/client.rb#21
class StatsD::Instrument::Client
  # Instantiates a new client.
  #
  # @return [Client] a new instance of Client
  # @see .from_env to instantiate a client using environment variables.
  #
  # source://statsd-instrument//lib/statsd/instrument/client.rb#151
  def initialize(prefix: T.unsafe(nil), default_sample_rate: T.unsafe(nil), default_tags: T.unsafe(nil), implementation: T.unsafe(nil), sink: T.unsafe(nil), datagram_builder_class: T.unsafe(nil), enable_aggregation: T.unsafe(nil), aggregation_flush_interval: T.unsafe(nil), aggregation_max_context_size: T.unsafe(nil)); end

  # Captures metrics that were emitted during the provided block.
  #
  # @return [Array<StatsD::Instagram::Datagram>] The list of metrics that were
  #   emitted during the block, in the same order in which they were emitted.
  # @yield During the execution of the provided block, metrics will be captured.
  #
  # source://statsd-instrument//lib/statsd/instrument/client.rb#552
  def capture(&block); end

  # source://statsd-instrument//lib/statsd/instrument/client.rb#533
  def capture_sink; end

  # source://statsd-instrument//lib/statsd/instrument/client.rb#514
  def clone_with_options(sink: T.unsafe(nil), prefix: T.unsafe(nil), default_sample_rate: T.unsafe(nil), default_tags: T.unsafe(nil), datagram_builder_class: T.unsafe(nil)); end

  # The class to use to build StatsD datagrams. To build the actual datagrams,
  # the class will be instantiated, potentially multiple times, by the client.
  #
  # @return [Class] A subclass of {StatsD::Instrument::DatagramBuilder}
  # @see .datagram_builder_class_for_implementation
  #
  # source://statsd-instrument//lib/statsd/instrument/client.rb#73
  def datagram_builder_class; end

  # The default sample rate to use for metrics that are emitted without a
  # sample rate set. This should be a value between 0 (never emit a metric) and
  # 1.0 (always emit). If it is not set, the default value 1.0 is used.
  #
  # We generally recommend setting sample rates on individual metrics based
  # on their frequency, rather than changing the default sample rate.
  #
  # @return [Float] (default: 1.0) A value between 0.0 and 1.0.
  #
  # source://statsd-instrument//lib/statsd/instrument/client.rb#145
  def default_sample_rate; end

  # The tags to apply to all the metrics emitted through this client.
  #
  # The tags can be supplied in normal form: an array of strings. You can also
  # provide a hash, which will be turned into normal form by concatanting the
  # key and the value using a colon. To not use any default tags, set to `nil`.
  # Note that other components of your StatsD metric pipeline may also add tags
  # to metrics. E.g. the DataDog agent may add add tags like `hostname`.
  #
  # We generally recommend to not use default tags, or use them sparingly.
  # Adding tags to every metric easily introduces carninality explosions, which
  # will make metrics less precise due to the lossy nature of aggregation. It
  # also makes your infrastructure more expsnive to run, and the user interface
  # of your metric explorer less responsive.
  #
  # @return [Array<String>, Hash, nil]
  #
  # source://statsd-instrument//lib/statsd/instrument/client.rb#135
  def default_tags; end

  # Emits a distribution metric, which builds a histogram of the reported
  # values.
  #
  # @note The distribution metric type is not available on all implementations.
  #   A `NotImplementedError` will be raised if you call this method, but
  #   the active implementation does not support it.
  # @param value [Numeric] The value to include in the distribution histogram.
  # @param name [String] The name of the metric.
  #
  #   - We recommend using `snake_case.metric_names` as naming scheme.
  #   - A `.` should be used for namespacing, e.g. `foo.bar.baz`
  #   - A metric name should not include the following characters: `|`, `@`, and `:`.
  #   The library will convert these characters to `_`.
  # @param sample_rate [Float] (default: `#default_sample_rate`) The rate at which to sample
  #   this metric call. This value should be between 0 and 1. This value can be used to reduce
  #   the amount of network I/O (and CPU cycles) is being used for very frequent metrics.
  #
  #   - A value of `0.1` means that only 1 out of 10 calls will be emitted; the other 9 will
  #   be short-circuited.
  #   - When set to `1`, every metric will be emitted.
  #   - If this parameter is not set, the default sample rate for this client will be used.
  # @param tags [Hash<Symbol, String>, Array<String>] (default: nil)
  # @return [void]
  #
  # source://statsd-instrument//lib/statsd/instrument/client.rb#320
  def distribution(name, value = T.unsafe(nil), sample_rate: T.unsafe(nil), tags: T.unsafe(nil), no_prefix: T.unsafe(nil), &block); end

  # Emits an event. An event represents any record of activity noteworthy for engineers.
  #
  # @note Supported by the Datadog implementation only.
  # @param title [String] Event title.
  # @param text [String] Event description. Newlines are allowed.
  # @param timestamp [Time] The of the event. If not provided,
  #   Datadog will interpret it as the current timestamp.
  # @param hostname [String] A hostname to associate with the event.
  # @param priority [String] Priority of the event. Either "normal" (default) or "low".
  # @param source_type_name [String] The source type of the event.
  # @param alert_type [String] Either "error", "warning", "info" (default) or "success".
  # @param tags [Array, Hash] Tags to associate with the event.
  # @param aggregation_key [String] An aggregation key to group events with the same key.
  # @return [void]
  #
  # source://statsd-instrument//lib/statsd/instrument/client.rb#460
  def event(title, text, timestamp: T.unsafe(nil), hostname: T.unsafe(nil), aggregation_key: T.unsafe(nil), priority: T.unsafe(nil), source_type_name: T.unsafe(nil), alert_type: T.unsafe(nil), tags: T.unsafe(nil), no_prefix: T.unsafe(nil)); end

  # Forces the client to flush all metrics that are currently buffered, first flushes the aggregation
  # if enabled.
  #
  # @return [void]
  #
  # source://statsd-instrument//lib/statsd/instrument/client.rb#479
  def force_flush; end

  # Emits a gauge metric.
  #
  # You should use a gauge if you are reporting the current value of
  # something that can only have one value at the time. E.g., the
  # speed of your car. A newly reported value will replace the previously
  # reported value.
  #
  # @param value [Numeric] The gauged value.
  # @param name [String] The name of the metric.
  #
  #   - We recommend using `snake_case.metric_names` as naming scheme.
  #   - A `.` should be used for namespacing, e.g. `foo.bar.baz`
  #   - A metric name should not include the following characters: `|`, `@`, and `:`.
  #   The library will convert these characters to `_`.
  # @param sample_rate [Float] (default: `#default_sample_rate`) The rate at which to sample
  #   this metric call. This value should be between 0 and 1. This value can be used to reduce
  #   the amount of network I/O (and CPU cycles) is being used for very frequent metrics.
  #
  #   - A value of `0.1` means that only 1 out of 10 calls will be emitted; the other 9 will
  #   be short-circuited.
  #   - When set to `1`, every metric will be emitted.
  #   - If this parameter is not set, the default sample rate for this client will be used.
  # @param tags [Hash<Symbol, String>, Array<String>] (default: nil)
  # @return [void]
  #
  # source://statsd-instrument//lib/statsd/instrument/client.rb#280
  def gauge(name, value, sample_rate: T.unsafe(nil), tags: T.unsafe(nil), no_prefix: T.unsafe(nil)); end

  # Emits a histogram metric, which builds a histogram of the reported values.
  #
  # @note The histogram metric type is not available on all implementations.
  #   A `NotImplementedError` will be raised if you call this method, but
  #   the active implementation does not support it.
  # @param value [Numeric] The value to include in the histogram.
  # @param name [String] The name of the metric.
  #
  #   - We recommend using `snake_case.metric_names` as naming scheme.
  #   - A `.` should be used for namespacing, e.g. `foo.bar.baz`
  #   - A metric name should not include the following characters: `|`, `@`, and `:`.
  #   The library will convert these characters to `_`.
  # @param sample_rate [Float] (default: `#default_sample_rate`) The rate at which to sample
  #   this metric call. This value should be between 0 and 1. This value can be used to reduce
  #   the amount of network I/O (and CPU cycles) is being used for very frequent metrics.
  #
  #   - A value of `0.1` means that only 1 out of 10 calls will be emitted; the other 9 will
  #   be short-circuited.
  #   - When set to `1`, every metric will be emitted.
  #   - If this parameter is not set, the default sample rate for this client will be used.
  # @param tags [Hash<Symbol, String>, Array<String>] (default: nil)
  # @return [void]
  #
  # source://statsd-instrument//lib/statsd/instrument/client.rb#360
  def histogram(name, value, sample_rate: T.unsafe(nil), tags: T.unsafe(nil), no_prefix: T.unsafe(nil)); end

  # Emits a counter metric.
  #
  # You should use a counter metric to count the frequency of something happening. As a
  # result, the value should generally be set to 1 (the default), unless you reporting
  # about a batch of activity. E.g. `increment('messages.processed', messages.size)`
  # For values that are not frequencies, you should use another metric type, e.g.
  # {#histogram} or {#distribution}.
  #
  # @param name [String] The name of the metric.
  #
  #   - We recommend using `snake_case.metric_names` as naming scheme.
  #   - A `.` should be used for namespacing, e.g. `foo.bar.baz`
  #   - A metric name should not include the following characters: `|`, `@`, and `:`.
  #   The library will convert these characters to `_`.
  # @param value [Integer] (default: 1) The value to increment the counter by.
  #
  #   You should not compensate for the sample rate using the counter increment. E.g., if
  #   your sample rate is set to `0.01`, you should not use 100 as increment to compensate
  #   for it. The sample rate is part of the packet that is being sent to the server, and
  #   the server should know how to compensate for it.
  # @param sample_rate [Float] (default: `#default_sample_rate`) The rate at which to sample
  #   this metric call. This value should be between 0 and 1. This value can be used to reduce
  #   the amount of network I/O (and CPU cycles) is being used for very frequent metrics.
  #
  #   - A value of `0.1` means that only 1 out of 10 calls will be emitted; the other 9 will
  #   be short-circuited.
  #   - When set to `1`, every metric will be emitted.
  #   - If this parameter is not set, the default sample rate for this client will be used.
  # @param tags [Hash<Symbol, String>, Array<String>] (default: nil)
  # @return [void]
  #
  # source://statsd-instrument//lib/statsd/instrument/client.rb#220
  def increment(name, value = T.unsafe(nil), sample_rate: T.unsafe(nil), tags: T.unsafe(nil), no_prefix: T.unsafe(nil)); end

  # Measures the latency of the given block in milliseconds, and emits it as a metric.
  #
  # @param metric_type [Symbol] The metric type to use. If not specified, we will
  #   use the preferred metric type of the implementation. The default is `:ms`.
  #   Generally, you should not have to set this.
  # @param name [String] The name of the metric.
  #
  #   - We recommend using `snake_case.metric_names` as naming scheme.
  #   - A `.` should be used for namespacing, e.g. `foo.bar.baz`
  #   - A metric name should not include the following characters: `|`, `@`, and `:`.
  #   The library will convert these characters to `_`.
  # @param sample_rate [Float] (default: `#default_sample_rate`) The rate at which to sample
  #   this metric call. This value should be between 0 and 1. This value can be used to reduce
  #   the amount of network I/O (and CPU cycles) is being used for very frequent metrics.
  #
  #   - A value of `0.1` means that only 1 out of 10 calls will be emitted; the other 9 will
  #   be short-circuited.
  #   - When set to `1`, every metric will be emitted.
  #   - If this parameter is not set, the default sample rate for this client will be used.
  # @param tags [Hash<Symbol, String>, Array<String>] (default: nil)
  # @return The return value of the provided block will be passed through.
  # @yield The latency (execution time) of the block
  #
  # source://statsd-instrument//lib/statsd/instrument/client.rb#390
  def latency(name, sample_rate: T.unsafe(nil), tags: T.unsafe(nil), metric_type: T.unsafe(nil), no_prefix: T.unsafe(nil)); end

  # Emits a timing metric.
  #
  # @param value [Numeric] The duration to record, in milliseconds.
  # @param name [String] The name of the metric.
  #
  #   - We recommend using `snake_case.metric_names` as naming scheme.
  #   - A `.` should be used for namespacing, e.g. `foo.bar.baz`
  #   - A metric name should not include the following characters: `|`, `@`, and `:`.
  #   The library will convert these characters to `_`.
  # @param sample_rate [Float] (default: `#default_sample_rate`) The rate at which to sample
  #   this metric call. This value should be between 0 and 1. This value can be used to reduce
  #   the amount of network I/O (and CPU cycles) is being used for very frequent metrics.
  #
  #   - A value of `0.1` means that only 1 out of 10 calls will be emitted; the other 9 will
  #   be short-circuited.
  #   - When set to `1`, every metric will be emitted.
  #   - If this parameter is not set, the default sample rate for this client will be used.
  # @param tags [Hash<Symbol, String>, Array<String>] (default: nil)
  # @return [void]
  #
  # source://statsd-instrument//lib/statsd/instrument/client.rb#241
  def measure(name, value = T.unsafe(nil), sample_rate: T.unsafe(nil), tags: T.unsafe(nil), no_prefix: T.unsafe(nil), &block); end

  # The prefix to prepend to the metric names that are emitted through this
  # client, using a dot (`.`) as namespace separator. E.g. when the prefix is
  # set to `foo`, and you emit a metric named `bar`, the metric name will be
  # `foo.bar`.
  #
  # Generally all the metrics you emit to the same StatsD server will share a
  # single, global namespace. If you are emitting metrics from multiple
  # applications, using a prefix is recommended to prevent metric name
  # collisions.
  #
  # You can also leave this value to be `nil` if you don't want to prefix your
  # metric names.
  #
  # @note The `prefix` can be overridden by any metric call by setting the
  #   `no_prefix` keyword argument to `true`. We recommend against doing this,
  #   but this behavior is retained for backwards compatibility.
  #   Rather, when you feel the need to do this, we recommend instantiating
  #   a new client without prefix (using {#clone_with_options}), and using it
  #   to emit the metric.
  # @return [String, nil]
  #
  # source://statsd-instrument//lib/statsd/instrument/client.rb#118
  def prefix; end

  # Emits a service check. Services Checks allow you to characterize the status
  # of a service in order to monitor it within Datadog.
  #
  # @note Supported by the Datadog implementation only.
  # @param name [String] Name of the service
  # @param status [Symbol] Either `:ok`, `:warning`, `:critical` or `:unknown`
  # @param timestamp [Time] The moment when the service was checked. If not provided,
  #   Datadog will interpret it as the current timestamp.
  # @param tags [Array, Hash] Tags to associate with the check.
  # @param message [String] A message describing the current state of the service check.
  # @param hostname [String] A hostname to associate with the check.
  # @return [void]
  #
  # source://statsd-instrument//lib/statsd/instrument/client.rb#435
  def service_check(name, status, timestamp: T.unsafe(nil), hostname: T.unsafe(nil), tags: T.unsafe(nil), message: T.unsafe(nil), no_prefix: T.unsafe(nil)); end

  # Emits a set metric, which counts distinct values.
  #
  # @param value [Numeric, String] The value to count for distinct occurrences.
  # @param name [String] The name of the metric.
  #
  #   - We recommend using `snake_case.metric_names` as naming scheme.
  #   - A `.` should be used for namespacing, e.g. `foo.bar.baz`
  #   - A metric name should not include the following characters: `|`, `@`, and `:`.
  #   The library will convert these characters to `_`.
  # @param sample_rate [Float] (default: `#default_sample_rate`) The rate at which to sample
  #   this metric call. This value should be between 0 and 1. This value can be used to reduce
  #   the amount of network I/O (and CPU cycles) is being used for very frequent metrics.
  #
  #   - A value of `0.1` means that only 1 out of 10 calls will be emitted; the other 9 will
  #   be short-circuited.
  #   - When set to `1`, every metric will be emitted.
  #   - If this parameter is not set, the default sample rate for this client will be used.
  # @param tags [Hash<Symbol, String>, Array<String>] (default: nil)
  # @return [void]
  #
  # source://statsd-instrument//lib/statsd/instrument/client.rb#300
  def set(name, value, sample_rate: T.unsafe(nil), tags: T.unsafe(nil), no_prefix: T.unsafe(nil)); end

  # The sink to send UDP datagrams to.
  #
  # This can be set to any object that responds to the following methods:
  #
  # - `sample?` which should return true if the metric should be sampled, i.e.
  #   actually sent to the sink.
  # - `#<<` which takes a UDP datagram as string to emit the datagram. This
  #   method will only be called if `sample?` returned `true`.
  #
  # Generally, you should use an instance of one of the following classes that
  # ship with this library:
  #
  # - {StatsD::Instrument::Sink} A sink that will actually emit the provided
  #   datagrams over UDP.
  # - {StatsD::Instrument::NullSink} A sink that will simply swallow every
  #   datagram. This sink is for use when testing your application.
  # - {StatsD::Instrument::LogSink} A sink that log all provided datagrams to
  #   a Logger, normally {StatsD.logger}.
  #
  # @return [#sample?, #<<]
  #
  # source://statsd-instrument//lib/statsd/instrument/client.rb#95
  def sink; end

  # source://statsd-instrument//lib/statsd/instrument/client.rb#540
  def with_capture_sink(capture_sink); end

  # Instantiates a new StatsD client that uses the settings of the current client,
  # except for the provided overrides.
  #
  # @return The return value of the block will be passed on as return value.
  # @yield [client] A new client will be constructed with the altered settings, and
  #   yielded to the block. The original client will not be affected. The new client
  #   will be disposed after the block returns
  #
  # source://statsd-instrument//lib/statsd/instrument/client.rb#496
  def with_options(sink: T.unsafe(nil), prefix: T.unsafe(nil), default_sample_rate: T.unsafe(nil), default_tags: T.unsafe(nil), datagram_builder_class: T.unsafe(nil)); end

  protected

  # source://statsd-instrument//lib/statsd/instrument/client.rb#560
  def datagram_builder(no_prefix:); end

  # source://statsd-instrument//lib/statsd/instrument/client.rb#571
  def emit(datagram); end

  # @return [Boolean]
  #
  # source://statsd-instrument//lib/statsd/instrument/client.rb#567
  def sample?(sample_rate); end

  class << self
    # Finds the right DatagramBuilder class for a given implementation.
    #
    # @param implementation [Symbol, String] The name of the implementation, e.g.
    #   `"statsd"` or `:datadog`.
    # @private
    # @raise `NotImplementedError` if the implementation is not recognized or
    #   supported.
    # @return [Class] The subclass of {StatsD::Instrument::DatagramBuilder}
    #   builder to use to generate UDP datagrams for the given implementation.
    #
    # source://statsd-instrument//lib/statsd/instrument/client.rb#56
    def datagram_builder_class_for_implementation(implementation); end

    # Instantiates a StatsD::Instrument::Client using configuration values provided in
    # environment variables.
    #
    # @see StatsD::Instrument::Environment
    #
    # source://statsd-instrument//lib/statsd/instrument/client.rb#27
    def from_env(env = T.unsafe(nil), prefix: T.unsafe(nil), default_sample_rate: T.unsafe(nil), default_tags: T.unsafe(nil), implementation: T.unsafe(nil), sink: T.unsafe(nil), datagram_builder_class: T.unsafe(nil)); end
  end
end

# source://statsd-instrument//lib/statsd/instrument/client.rb#487
StatsD::Instrument::Client::NO_CHANGE = T.let(T.unsafe(nil), Object)

# source://statsd-instrument//lib/statsd/instrument/connection_behavior.rb#5
module StatsD::Instrument::ConnectionBehavior
  # source://statsd-instrument//lib/statsd/instrument/connection_behavior.rb#6
  def close; end

  # source://statsd-instrument//lib/statsd/instrument/connection_behavior.rb#16
  def send_buffer_size; end

  # @raise [NotImplementedError]
  #
  # source://statsd-instrument//lib/statsd/instrument/connection_behavior.rb#24
  def type; end

  private

  # source://statsd-instrument//lib/statsd/instrument/connection_behavior.rb#30
  def send_buffer_size_from_socket(original_socket); end

  # source://statsd-instrument//lib/statsd/instrument/connection_behavior.rb#34
  def setup_socket(original_socket); end
end

# The Datagram class parses and inspects a StatsD datagrams
#
# @note This class is part of the new Client implementation that is intended
#   to become the new default in the next major release of this library.
#
# source://statsd-instrument//lib/statsd/instrument/datagram.rb#9
class StatsD::Instrument::Datagram
  # @return [Datagram] a new instance of Datagram
  #
  # source://statsd-instrument//lib/statsd/instrument/datagram.rb#12
  def initialize(source); end

  # @return [Boolean]
  #
  # source://statsd-instrument//lib/statsd/instrument/datagram.rb#58
  def ==(other); end

  # @return [Boolean]
  #
  # source://statsd-instrument//lib/statsd/instrument/datagram.rb#58
  def eql?(other); end

  # source://statsd-instrument//lib/statsd/instrument/datagram.rb#54
  def hash; end

  # source://statsd-instrument//lib/statsd/instrument/datagram.rb#50
  def inspect; end

  # source://statsd-instrument//lib/statsd/instrument/datagram.rb#25
  def name; end

  # @return [Float] The sample rate at which this datagram was emitted, between 0 and 1.
  #
  # source://statsd-instrument//lib/statsd/instrument/datagram.rb#17
  def sample_rate; end

  # Returns the value of attribute source.
  #
  # source://statsd-instrument//lib/statsd/instrument/datagram.rb#10
  def source; end

  # source://statsd-instrument//lib/statsd/instrument/datagram.rb#46
  def tags; end

  # source://statsd-instrument//lib/statsd/instrument/datagram.rb#21
  def type; end

  # source://statsd-instrument//lib/statsd/instrument/datagram.rb#29
  def value; end

  private

  # source://statsd-instrument//lib/statsd/instrument/datagram.rb#82
  def parsed_datagram; end
end

# source://statsd-instrument//lib/statsd/instrument/datagram.rb#73
StatsD::Instrument::Datagram::PARSER = T.let(T.unsafe(nil), Regexp)

# @note This class is part of the new Client implementation that is intended
#   to become the new default in the next major release of this library.
#
# source://statsd-instrument//lib/statsd/instrument/datagram_builder.rb#7
class StatsD::Instrument::DatagramBuilder
  extend ::Forwardable

  # @return [DatagramBuilder] a new instance of DatagramBuilder
  #
  # source://statsd-instrument//lib/statsd/instrument/datagram_builder.rb#28
  def initialize(prefix: T.unsafe(nil), default_tags: T.unsafe(nil)); end

  # source://statsd-instrument//lib/statsd/instrument/datagram_builder.rb#33
  def c(name, value, sample_rate, tags); end

  # source://statsd-instrument//lib/statsd/instrument/datagram_builder.rb#53
  def d(name, value, sample_rate, tags); end

  # source://statsd-instrument//lib/statsd/instrument/datagram_builder.rb#37
  def g(name, value, sample_rate, tags); end

  # source://statsd-instrument//lib/statsd/instrument/datagram_builder.rb#49
  def h(name, value, sample_rate, tags); end

  # source://statsd-instrument//lib/statsd/instrument/datagram_builder.rb#63
  def kv(name, value, sample_rate, tags); end

  # source://statsd-instrument//lib/statsd/instrument/datagram_builder.rb#67
  def latency_metric_type; end

  # source://statsd-instrument//lib/statsd/instrument/datagram_builder.rb#41
  def ms(name, value, sample_rate, tags); end

  # source://statsd-instrument//lib/statsd/instrument/datagram_builder.rb#71
  def normalize_tags(tags, buffer = T.unsafe(nil)); end

  # source://statsd-instrument//lib/statsd/instrument/datagram_builder.rb#45
  def s(name, value, sample_rate, tags); end

  # source://statsd-instrument//lib/statsd/instrument/datagram_builder.rb#57
  def timing_value_packed(name, type, values, sample_rate, tags); end

  protected

  # source://statsd-instrument//lib/statsd/instrument/datagram_builder.rb#106
  def compile_tags(tags, buffer = T.unsafe(nil)); end

  # source://statsd-instrument//lib/statsd/instrument/datagram_builder.rb#85
  def generate_generic_datagram(name, value, type, sample_rate, tags); end

  # Utility function to remove invalid characters from a StatsD metric name
  #
  # source://statsd-instrument//lib/statsd/instrument/datagram_builder.rb#78
  def normalize_name(name); end

  class << self
    # source://statsd-instrument//lib/statsd/instrument/datagram_builder.rb#18
    def datagram_class; end

    # source://statsd-instrument//lib/statsd/instrument/datagram_builder.rb#22
    def normalize_string(string); end

    # source://statsd-instrument//lib/statsd/instrument/datagram_builder.rb#10
    def unsupported_datagram_types(*types); end
  end
end

# The Datagram class parses and inspects a StatsD datagrams
#
# @note This class is part of the new Client implementation that is intended
#   to become the new default in the next major release of this library.
#
# source://statsd-instrument//lib/statsd/instrument/dogstatsd_datagram.rb#9
class StatsD::Instrument::DogStatsDDatagram < ::StatsD::Instrument::Datagram
  # source://statsd-instrument//lib/statsd/instrument/dogstatsd_datagram.rb#33
  def aggregation_key; end

  # source://statsd-instrument//lib/statsd/instrument/dogstatsd_datagram.rb#45
  def alert_type; end

  # source://statsd-instrument//lib/statsd/instrument/dogstatsd_datagram.rb#25
  def hostname; end

  # source://statsd-instrument//lib/statsd/instrument/dogstatsd_datagram.rb#49
  def message; end

  # source://statsd-instrument//lib/statsd/instrument/dogstatsd_datagram.rb#10
  def name; end

  # source://statsd-instrument//lib/statsd/instrument/dogstatsd_datagram.rb#41
  def priority; end

  # source://statsd-instrument//lib/statsd/instrument/dogstatsd_datagram.rb#37
  def source_type_name; end

  # source://statsd-instrument//lib/statsd/instrument/dogstatsd_datagram.rb#29
  def timestamp; end

  # source://statsd-instrument//lib/statsd/instrument/dogstatsd_datagram.rb#17
  def value; end

  protected

  # source://statsd-instrument//lib/statsd/instrument/dogstatsd_datagram.rb#55
  def parsed_datagram; end
end

# |k:my-key|p:low|s:source|t:success|
#
# source://statsd-instrument//lib/statsd/instrument/dogstatsd_datagram.rb#75
StatsD::Instrument::DogStatsDDatagram::EVENT_PARSER = T.let(T.unsafe(nil), Regexp)

# source://statsd-instrument//lib/statsd/instrument/dogstatsd_datagram.rb#89
StatsD::Instrument::DogStatsDDatagram::PARSER = T.let(T.unsafe(nil), Regexp)

# source://statsd-instrument//lib/statsd/instrument/dogstatsd_datagram.rb#63
StatsD::Instrument::DogStatsDDatagram::SERVICE_CHECK_PARSER = T.let(T.unsafe(nil), Regexp)

# @note This class is part of the new Client implementation that is intended
#   to become the new default in the next major release of this library.
#
# source://statsd-instrument//lib/statsd/instrument/dogstatsd_datagram_builder.rb#7
class StatsD::Instrument::DogStatsDDatagramBuilder < ::StatsD::Instrument::DatagramBuilder
  # Constructs an event datagram.
  #
  # @param title [String] Event title.
  # @param text [String] Event description. Newlines are allowed.
  # @param timestamp [Time] The of the event. If not provided,
  #   Datadog will interpret it as the current timestamp.
  # @param hostname [String] A hostname to associate with the event.
  # @param aggregation_key [String] An aggregation key to group events with the same key.
  # @param priority [String] Priority of the event. Either "normal" (default) or "low".
  # @param source_type_name [String] The source type of the event.
  # @param alert_type [String] Either "error", "warning", "info" (default) or "success".
  # @param tags [Array, Hash] Tags to associate with the event.
  # @return [String] The correctly formatted service check datagram
  # @see https://docs.datadoghq.com/developers/dogstatsd/datagram_shell/#events
  #
  # source://statsd-instrument//lib/statsd/instrument/dogstatsd_datagram_builder.rb#34
  def _e(title, text, timestamp: T.unsafe(nil), hostname: T.unsafe(nil), aggregation_key: T.unsafe(nil), priority: T.unsafe(nil), source_type_name: T.unsafe(nil), alert_type: T.unsafe(nil), tags: T.unsafe(nil)); end

  # Constructs a service check datagram.
  #
  # @param name [String] Name of the service
  # @param status [Symbol] Either `:ok`, `:warning`, `:critical` or `:unknown`
  # @param timestamp [Time] The moment when the service was checked. If not provided,
  #   Datadog will interpret it as the current timestamp.
  # @param hostname [String] A hostname to associate with the check.
  # @param tags [Array, Hash] Tags to associate with the check.
  # @param message [String] A message describing the current state of the service check.
  # @return [String] The correctly formatted service check datagram
  # @see https://docs.datadoghq.com/developers/dogstatsd/datagram_shell/#service-checks
  #
  # source://statsd-instrument//lib/statsd/instrument/dogstatsd_datagram_builder.rb#71
  def _sc(name, status, timestamp: T.unsafe(nil), hostname: T.unsafe(nil), tags: T.unsafe(nil), message: T.unsafe(nil)); end

  # source://statsd-instrument//lib/statsd/instrument/datagram_builder.rb#12
  def kv(_, _, _, _); end

  # source://statsd-instrument//lib/statsd/instrument/dogstatsd_datagram_builder.rb#15
  def latency_metric_type; end

  class << self
    # source://statsd-instrument//lib/statsd/instrument/dogstatsd_datagram_builder.rb#11
    def datagram_class; end
  end
end

# source://statsd-instrument//lib/statsd/instrument/dogstatsd_datagram_builder.rb#91
StatsD::Instrument::DogStatsDDatagramBuilder::SERVICE_CHECK_STATUS_VALUES = T.let(T.unsafe(nil), Hash)

# The environment module is used to detect, and initialize the environment in
# which this library is active. It will use different default values based on the environment.
#
# source://statsd-instrument//lib/statsd/instrument/environment.rb#7
class StatsD::Instrument::Environment
  # @return [Environment] a new instance of Environment
  #
  # source://statsd-instrument//lib/statsd/instrument/environment.rb#36
  def initialize(env); end

  # source://statsd-instrument//lib/statsd/instrument/environment.rb#124
  def aggregation_interval; end

  # source://statsd-instrument//lib/statsd/instrument/environment.rb#128
  def aggregation_max_context_size; end

  # source://statsd-instrument//lib/statsd/instrument/environment.rb#135
  def client; end

  # source://statsd-instrument//lib/statsd/instrument/environment.rb#139
  def default_sink_for_environment; end

  # Returns the value of attribute env.
  #
  # source://statsd-instrument//lib/statsd/instrument/environment.rb#34
  def env; end

  # Detects the current environment, either by asking Rails, or by inspecting environment variables.
  #
  # - It will prefer the value set in <tt>ENV['STATSD_ENV']</tt>
  # - Within a Rails application, <tt>Rails.env</tt> is used.
  # - It will check the following environment variables in order:
  #   - <tt>RAILS_ENV</tt>,
  #   - <tt>RACK_ENV</tt>
  #   - <tt>ENV</tt>.
  # - If none of these are set, it will return <tt>development</tt>
  #
  # @return [String] The detected environment.
  #
  # source://statsd-instrument//lib/statsd/instrument/environment.rb#59
  def environment; end

  # @return [Boolean]
  #
  # source://statsd-instrument//lib/statsd/instrument/environment.rb#120
  def experimental_aggregation_enabled?; end

  # source://statsd-instrument//lib/statsd/instrument/environment.rb#81
  def statsd_addr; end

  # source://statsd-instrument//lib/statsd/instrument/environment.rb#113
  def statsd_batch_statistics_interval; end

  # @return [Boolean]
  #
  # source://statsd-instrument//lib/statsd/instrument/environment.rb#97
  def statsd_batching?; end

  # source://statsd-instrument//lib/statsd/instrument/environment.rb#93
  def statsd_buffer_capacity; end

  # source://statsd-instrument//lib/statsd/instrument/environment.rb#89
  def statsd_default_tags; end

  # source://statsd-instrument//lib/statsd/instrument/environment.rb#69
  def statsd_implementation; end

  # source://statsd-instrument//lib/statsd/instrument/environment.rb#105
  def statsd_max_packet_size; end

  # source://statsd-instrument//lib/statsd/instrument/environment.rb#77
  def statsd_prefix; end

  # source://statsd-instrument//lib/statsd/instrument/environment.rb#73
  def statsd_sample_rate; end

  # source://statsd-instrument//lib/statsd/instrument/environment.rb#85
  def statsd_socket_path; end

  # @return [Boolean]
  #
  # source://statsd-instrument//lib/statsd/instrument/environment.rb#101
  def statsd_uds_send?; end

  class << self
    # source://statsd-instrument//lib/statsd/instrument/environment.rb#9
    def current; end

    # @deprecated For backwards compatibility only. Use {StatsD::Instrument::Environment#environment}
    #   through {StatsD::Instrument::Environment.current} instead.
    #
    # source://statsd-instrument//lib/statsd/instrument/environment.rb#15
    def environment; end

    # Sets default values for sample rate and logger.
    #
    # - Default sample rate is set to the value in the STATSD_SAMPLE_RATE environment variable,
    #   or 1.0 otherwise. See {StatsD#default_sample_rate}
    # - {StatsD#logger} is set to a logger that send output to stderr.
    #
    # If you are including this library inside a Rails environment, additional initialization will
    # be done as part of the {StatsD::Instrument::Railtie}.
    #
    # @return [void]
    #
    # source://statsd-instrument//lib/statsd/instrument/environment.rb#29
    def setup; end
  end
end

# @private
#
# source://statsd-instrument//lib/statsd/instrument/expectation.rb#8
class StatsD::Instrument::Expectation
  # @return [Expectation] a new instance of Expectation
  #
  # source://statsd-instrument//lib/statsd/instrument/expectation.rb#37
  def initialize(type:, name:, client: T.unsafe(nil), value: T.unsafe(nil), sample_rate: T.unsafe(nil), tags: T.unsafe(nil), no_prefix: T.unsafe(nil), times: T.unsafe(nil)); end

  # source://statsd-instrument//lib/statsd/instrument/expectation.rb#76
  def inspect; end

  # source://statsd-instrument//lib/statsd/instrument/expectation.rb#56
  def matches(actual_metric); end

  # Returns the value of attribute name.
  #
  # source://statsd-instrument//lib/statsd/instrument/expectation.rb#35
  def name; end

  # Sets the attribute name
  #
  # @param value the value to set the attribute name to.
  #
  # source://statsd-instrument//lib/statsd/instrument/expectation.rb#35
  def name=(_arg0); end

  # source://statsd-instrument//lib/statsd/instrument/expectation.rb#47
  def normalized_value_for_type(type, value); end

  # Returns the value of attribute sample_rate.
  #
  # source://statsd-instrument//lib/statsd/instrument/expectation.rb#35
  def sample_rate; end

  # Sets the attribute sample_rate
  #
  # @param value the value to set the attribute sample_rate to.
  #
  # source://statsd-instrument//lib/statsd/instrument/expectation.rb#35
  def sample_rate=(_arg0); end

  # Returns the value of attribute tags.
  #
  # source://statsd-instrument//lib/statsd/instrument/expectation.rb#35
  def tags; end

  # Sets the attribute tags
  #
  # @param value the value to set the attribute tags to.
  #
  # source://statsd-instrument//lib/statsd/instrument/expectation.rb#35
  def tags=(_arg0); end

  # Returns the value of attribute times.
  #
  # source://statsd-instrument//lib/statsd/instrument/expectation.rb#35
  def times; end

  # Sets the attribute times
  #
  # @param value the value to set the attribute times to.
  #
  # source://statsd-instrument//lib/statsd/instrument/expectation.rb#35
  def times=(_arg0); end

  # source://statsd-instrument//lib/statsd/instrument/expectation.rb#68
  def to_s; end

  # Returns the value of attribute type.
  #
  # source://statsd-instrument//lib/statsd/instrument/expectation.rb#35
  def type; end

  # Sets the attribute type
  #
  # @param value the value to set the attribute type to.
  #
  # source://statsd-instrument//lib/statsd/instrument/expectation.rb#35
  def type=(_arg0); end

  # Returns the value of attribute value.
  #
  # source://statsd-instrument//lib/statsd/instrument/expectation.rb#35
  def value; end

  # Sets the attribute value
  #
  # @param value the value to set the attribute value to.
  #
  # source://statsd-instrument//lib/statsd/instrument/expectation.rb#35
  def value=(_arg0); end

  private

  # Utility function to convert tags to the canonical form.
  #
  # - Tags specified as key value pairs will be converted into an array
  # - Tags are normalized to remove unsupported characters
  #
  # @param tags [Array<String>, Hash<String, String>, nil] Tags specified in any form.
  # @private
  # @return [Array<String>, nil] the list of tags in canonical form.
  # @todo We should delegate this to thje datagram builder of the current client,
  #   to ensure that this logic matches the logic of the active datagram builder.
  #
  # source://statsd-instrument//lib/statsd/instrument/expectation.rb#94
  def normalize_tags(tags); end

  class << self
    # source://statsd-instrument//lib/statsd/instrument/expectation.rb#26
    def distribution(name, value = T.unsafe(nil), **options); end

    # source://statsd-instrument//lib/statsd/instrument/expectation.rb#18
    def gauge(name, value = T.unsafe(nil), **options); end

    # source://statsd-instrument//lib/statsd/instrument/expectation.rb#30
    def histogram(name, value = T.unsafe(nil), **options); end

    # source://statsd-instrument//lib/statsd/instrument/expectation.rb#10
    def increment(name, value = T.unsafe(nil), **options); end

    # source://statsd-instrument//lib/statsd/instrument/expectation.rb#14
    def measure(name, value = T.unsafe(nil), **options); end

    # source://statsd-instrument//lib/statsd/instrument/expectation.rb#22
    def set(name, value = T.unsafe(nil), **options); end
  end
end

# source://statsd-instrument//lib/statsd/instrument/helpers.rb#5
module StatsD::Instrument::Helpers
  # For backwards compatibility
  #
  # source://statsd-instrument//lib/statsd/instrument/helpers.rb#6
  def capture_statsd_calls(client: T.unsafe(nil), &block); end

  # source://statsd-instrument//lib/statsd/instrument/helpers.rb#6
  def capture_statsd_datagrams(client: T.unsafe(nil), &block); end

  class << self
    # source://statsd-instrument//lib/statsd/instrument/helpers.rb#15
    def add_tag(tags, key, value); end

    # source://statsd-instrument//lib/statsd/instrument/helpers.rb#31
    def prefix_metric(metric_name, client: T.unsafe(nil)); end

    # @return [Boolean]
    #
    # source://statsd-instrument//lib/statsd/instrument/helpers.rb#36
    def prefixed_metric?(metric_name, client: T.unsafe(nil)); end
  end
end

# @note This class is part of the new Client implementation that is intended
#   to become the new default in the next major release of this library.
#
# source://statsd-instrument//lib/statsd/instrument/log_sink.rb#7
class StatsD::Instrument::LogSink
  # @return [LogSink] a new instance of LogSink
  #
  # source://statsd-instrument//lib/statsd/instrument/log_sink.rb#10
  def initialize(logger, severity: T.unsafe(nil)); end

  # source://statsd-instrument//lib/statsd/instrument/log_sink.rb#19
  def <<(datagram); end

  # source://statsd-instrument//lib/statsd/instrument/log_sink.rb#27
  def flush(blocking:); end

  # Returns the value of attribute logger.
  #
  # source://statsd-instrument//lib/statsd/instrument/log_sink.rb#8
  def logger; end

  # @return [Boolean]
  #
  # source://statsd-instrument//lib/statsd/instrument/log_sink.rb#15
  def sample?(_sample_rate); end

  # Returns the value of attribute severity.
  #
  # source://statsd-instrument//lib/statsd/instrument/log_sink.rb#8
  def severity; end
end

# source://statsd-instrument//lib/statsd/instrument/matchers.rb#8
module StatsD::Instrument::Matchers
  # source://statsd-instrument//lib/statsd/instrument/matchers.rb#119
  def trigger_statsd_distribution(metric_name, options = T.unsafe(nil)); end

  # source://statsd-instrument//lib/statsd/instrument/matchers.rb#107
  def trigger_statsd_gauge(metric_name, options = T.unsafe(nil)); end

  # source://statsd-instrument//lib/statsd/instrument/matchers.rb#115
  def trigger_statsd_histogram(metric_name, options = T.unsafe(nil)); end

  # source://statsd-instrument//lib/statsd/instrument/matchers.rb#99
  def trigger_statsd_increment(metric_name, options = T.unsafe(nil)); end

  # source://statsd-instrument//lib/statsd/instrument/matchers.rb#103
  def trigger_statsd_measure(metric_name, options = T.unsafe(nil)); end

  # source://statsd-instrument//lib/statsd/instrument/matchers.rb#111
  def trigger_statsd_set(metric_name, options = T.unsafe(nil)); end
end

# source://statsd-instrument//lib/statsd/instrument/matchers.rb#97
class StatsD::Instrument::Matchers::Distribution < ::StatsD::Instrument::Matchers::Matcher; end

# source://statsd-instrument//lib/statsd/instrument/matchers.rb#94
class StatsD::Instrument::Matchers::Gauge < ::StatsD::Instrument::Matchers::Matcher; end

# source://statsd-instrument//lib/statsd/instrument/matchers.rb#96
class StatsD::Instrument::Matchers::Histogram < ::StatsD::Instrument::Matchers::Matcher; end

# source://statsd-instrument//lib/statsd/instrument/matchers.rb#92
class StatsD::Instrument::Matchers::Increment < ::StatsD::Instrument::Matchers::Matcher; end

# source://statsd-instrument//lib/statsd/instrument/matchers.rb#9
class StatsD::Instrument::Matchers::Matcher
  include ::RSpec::Matchers::Composable
  include ::StatsD::Instrument::Helpers

  # @return [Matcher] a new instance of Matcher
  #
  # source://statsd-instrument//lib/statsd/instrument/matchers.rb#13
  def initialize(metric_type, metric_name, options = T.unsafe(nil)); end

  # source://statsd-instrument//lib/statsd/instrument/matchers.rb#38
  def description; end

  # source://statsd-instrument//lib/statsd/instrument/matchers.rb#26
  def failure_message; end

  # source://statsd-instrument//lib/statsd/instrument/matchers.rb#30
  def failure_message_when_negated; end

  # @return [Boolean]
  #
  # source://statsd-instrument//lib/statsd/instrument/matchers.rb#19
  def matches?(block); end

  # @return [Boolean]
  #
  # source://statsd-instrument//lib/statsd/instrument/matchers.rb#34
  def supports_block_expectations?; end

  private

  # source://statsd-instrument//lib/statsd/instrument/matchers.rb#44
  def expect_statsd_call(metric_type, metric_name, options, &block); end

  # source://statsd-instrument//lib/statsd/instrument/matchers.rb#79
  def metric_information(metric_name, options, metrics, expectation); end
end

# source://statsd-instrument//lib/statsd/instrument/matchers.rb#93
class StatsD::Instrument::Matchers::Measure < ::StatsD::Instrument::Matchers::Matcher; end

# source://statsd-instrument//lib/statsd/instrument/matchers.rb#95
class StatsD::Instrument::Matchers::Set < ::StatsD::Instrument::Matchers::Matcher; end

# For backwards compatibility
#
# source://statsd-instrument//lib/statsd/instrument/expectation.rb#107
StatsD::Instrument::MetricExpectation = StatsD::Instrument::Expectation

# @note This class is part of the new Client implementation that is intended
#   to become the new default in the next major release of this library.
#
# source://statsd-instrument//lib/statsd/instrument/null_sink.rb#7
class StatsD::Instrument::NullSink
  # source://statsd-instrument//lib/statsd/instrument/null_sink.rb#12
  def <<(_datagram); end

  # source://statsd-instrument//lib/statsd/instrument/null_sink.rb#16
  def flush(blocking:); end

  # @return [Boolean]
  #
  # source://statsd-instrument//lib/statsd/instrument/null_sink.rb#8
  def sample?(_sample_rate); end
end

# This Railtie runs some initializers that will set the logger to <tt>Rails#logger</tt>,
# and will initialize the {StatsD#backend} based on the Rails environment.
#
# @see StatsD::Instrument::Environment
#
# source://statsd-instrument//lib/statsd/instrument/railtie.rb#9
class StatsD::Instrument::Railtie < ::Rails::Railtie; end

# source://statsd-instrument//lib/statsd/instrument/sink.rb#5
class StatsD::Instrument::Sink
  # @return [Sink] a new instance of Sink
  #
  # source://statsd-instrument//lib/statsd/instrument/sink.rb#28
  def initialize(connection = T.unsafe(nil)); end

  # source://statsd-instrument//lib/statsd/instrument/sink.rb#37
  def <<(datagram); end

  # source://statsd-instrument//lib/statsd/instrument/sink.rb#69
  def connection; end

  # source://statsd-instrument//lib/statsd/instrument/sink.rb#65
  def connection_type; end

  # source://statsd-instrument//lib/statsd/instrument/sink.rb#61
  def flush(blocking: T.unsafe(nil)); end

  # source://statsd-instrument//lib/statsd/instrument/sink.rb#73
  def host; end

  # source://statsd-instrument//lib/statsd/instrument/sink.rb#77
  def port; end

  # @return [Boolean]
  #
  # source://statsd-instrument//lib/statsd/instrument/sink.rb#33
  def sample?(sample_rate); end

  private

  # source://statsd-instrument//lib/statsd/instrument/sink.rb#83
  def invalidate_connection; end

  # source://statsd-instrument//lib/statsd/instrument/sink.rb#87
  def thread_store; end

  class << self
    # source://statsd-instrument//lib/statsd/instrument/sink.rb#7
    def for_addr(addr); end
  end
end

# source://statsd-instrument//lib/statsd/instrument/sink.rb#20
StatsD::Instrument::Sink::FINALIZER = T.let(T.unsafe(nil), Proc)

# @note This class is part of the new Client implementation that is intended
#   to become the new default in the next major release of this library.
#
# source://statsd-instrument//lib/statsd/instrument/statsd_datagram_builder.rb#7
class StatsD::Instrument::StatsDDatagramBuilder < ::StatsD::Instrument::DatagramBuilder
  # source://statsd-instrument//lib/statsd/instrument/datagram_builder.rb#12
  def d(_, _, _, _); end

  # source://statsd-instrument//lib/statsd/instrument/datagram_builder.rb#12
  def h(_, _, _, _); end

  # source://statsd-instrument//lib/statsd/instrument/datagram_builder.rb#12
  def kv(_, _, _, _); end

  protected

  # @raise [NotImplementedError]
  #
  # source://statsd-instrument//lib/statsd/instrument/statsd_datagram_builder.rb#12
  def compile_tags(*_arg0); end
end

# source://statsd-instrument//lib/statsd/instrument/udp_connection.rb#5
class StatsD::Instrument::UdpConnection
  include ::StatsD::Instrument::ConnectionBehavior

  # @return [UdpConnection] a new instance of UdpConnection
  #
  # source://statsd-instrument//lib/statsd/instrument/udp_connection.rb#12
  def initialize(host, port, max_packet_size: T.unsafe(nil)); end

  # Returns the value of attribute host.
  #
  # source://statsd-instrument//lib/statsd/instrument/udp_connection.rb#10
  def host; end

  # Returns the value of attribute port.
  #
  # source://statsd-instrument//lib/statsd/instrument/udp_connection.rb#10
  def port; end

  # source://statsd-instrument//lib/statsd/instrument/udp_connection.rb#18
  def send_datagram(message); end

  # source://statsd-instrument//lib/statsd/instrument/udp_connection.rb#22
  def type; end

  private

  # source://statsd-instrument//lib/statsd/instrument/udp_connection.rb#28
  def setup_socket(original_socket); end

  # source://statsd-instrument//lib/statsd/instrument/udp_connection.rb#32
  def socket; end
end

# source://statsd-instrument//lib/statsd/instrument/udp_connection.rb#8
StatsD::Instrument::UdpConnection::DEFAULT_MAX_PACKET_SIZE = T.let(T.unsafe(nil), Integer)

# source://statsd-instrument//lib/statsd/instrument/uds_connection.rb#5
class StatsD::Instrument::UdsConnection
  include ::StatsD::Instrument::ConnectionBehavior

  # @return [UdsConnection] a new instance of UdsConnection
  #
  # source://statsd-instrument//lib/statsd/instrument/uds_connection.rb#10
  def initialize(socket_path, max_packet_size: T.unsafe(nil)); end

  # source://statsd-instrument//lib/statsd/instrument/uds_connection.rb#25
  def host; end

  # source://statsd-instrument//lib/statsd/instrument/uds_connection.rb#29
  def port; end

  # source://statsd-instrument//lib/statsd/instrument/uds_connection.rb#21
  def send_datagram(message); end

  # source://statsd-instrument//lib/statsd/instrument/uds_connection.rb#33
  def type; end

  private

  # source://statsd-instrument//lib/statsd/instrument/uds_connection.rb#39
  def socket; end
end

# source://statsd-instrument//lib/statsd/instrument/uds_connection.rb#8
StatsD::Instrument::UdsConnection::DEFAULT_MAX_PACKET_SIZE = T.let(T.unsafe(nil), Integer)

# source://statsd-instrument//lib/statsd/instrument/version.rb#5
StatsD::Instrument::VERSION = T.let(T.unsafe(nil), String)

# source://statsd-instrument//lib/statsd/instrument.rb#268
StatsD::Instrument::VOID = T.let(T.unsafe(nil), StatsD::Instrument::VoidClass)

# source://statsd-instrument//lib/statsd/instrument.rb#266
class StatsD::Instrument::VoidClass; end
