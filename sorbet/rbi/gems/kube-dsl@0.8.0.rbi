# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `kube-dsl` gem.
# Please instead update this file by running `bin/tapioca gem kube-dsl`.


# source://kube-dsl//lib/kube-dsl.rb#2
# typed: strong
module KubeDSL
  extend ::KubeDSL::Entrypoint
end

# source://kube-dsl//lib/kube-dsl/allow_blank.rb#3
class KubeDSL::AllowBlank
  # @return [AllowBlank] a new instance of AllowBlank
  #
  # source://kube-dsl//lib/kube-dsl/allow_blank.rb#6
  def initialize(value); end

  # Returns the value of attribute value.
  #
  # source://kube-dsl//lib/kube-dsl/allow_blank.rb#4
  def value; end
end

# source://kube-dsl//lib/kube-dsl/array_field_res.rb#3
class KubeDSL::ArrayFieldRes
  include ::KubeDSL::StringHelpers
  include ::KubeDSL::RbiHelpers

  # @return [ArrayFieldRes] a new instance of ArrayFieldRes
  #
  # source://kube-dsl//lib/kube-dsl/array_field_res.rb#11
  def initialize(name, required, elem_res); end

  # Returns the value of attribute elem_res.
  #
  # source://kube-dsl//lib/kube-dsl/array_field_res.rb#7
  def elem_res; end

  # source://kube-dsl//lib/kube-dsl/array_field_res.rb#24
  def fields_to_rbi(inflector); end

  # source://kube-dsl//lib/kube-dsl/array_field_res.rb#17
  def fields_to_ruby(inflector); end

  # Returns the value of attribute name.
  #
  # source://kube-dsl//lib/kube-dsl/array_field_res.rb#7
  def name; end

  # Returns the value of attribute required.
  #
  # source://kube-dsl//lib/kube-dsl/array_field_res.rb#7
  def required; end

  # Returns the value of attribute required.
  #
  # source://kube-dsl//lib/kube-dsl/array_field_res.rb#7
  def required?; end

  # source://kube-dsl//lib/kube-dsl/array_field_res.rb#42
  def serialize_call(inflector); end

  # source://kube-dsl//lib/kube-dsl/array_field_res.rb#36
  def validations(inflector); end

  private

  # source://kube-dsl//lib/kube-dsl/array_field_res.rb#48
  def plural_name(inflector); end

  # source://kube-dsl//lib/kube-dsl/array_field_res.rb#54
  def ruby_type; end
end

# source://kube-dsl//lib/kube-dsl/builder.rb#6
class KubeDSL::Builder
  # @return [Builder] a new instance of Builder
  #
  # source://kube-dsl//lib/kube-dsl/builder.rb#11
  def initialize(schema_dir:, output_dir:, autoload_prefix:, inflector:, dsl_namespace:, entrypoint_namespace:); end

  # Returns the value of attribute autoload_prefix.
  #
  # source://kube-dsl//lib/kube-dsl/builder.rb#7
  def autoload_prefix; end

  # Returns the value of attribute dsl_namespace.
  #
  # source://kube-dsl//lib/kube-dsl/builder.rb#8
  def dsl_namespace; end

  # source://kube-dsl//lib/kube-dsl/builder.rb#47
  def each_autoload_file(&block); end

  # source://kube-dsl//lib/kube-dsl/builder.rb#70
  def each_resource; end

  # source://kube-dsl//lib/kube-dsl/builder.rb#35
  def each_resource_file; end

  # source://kube-dsl//lib/kube-dsl/builder.rb#43
  def entrypoint(&block); end

  # Returns the value of attribute entrypoint_namespace.
  #
  # source://kube-dsl//lib/kube-dsl/builder.rb#8
  def entrypoint_namespace; end

  # Returns the value of attribute inflector.
  #
  # source://kube-dsl//lib/kube-dsl/builder.rb#9
  def inflector; end

  # Returns the value of attribute output_dir.
  #
  # source://kube-dsl//lib/kube-dsl/builder.rb#7
  def output_dir; end

  # source://kube-dsl//lib/kube-dsl/builder.rb#66
  def parse_ref(ref_str); end

  # source://kube-dsl//lib/kube-dsl/builder.rb#23
  def register_resolver(*prefixes, &resolver); end

  # source://kube-dsl//lib/kube-dsl/builder.rb#29
  def register_serialize_handler(namespace, version, kind, field, &block); end

  # Returns the value of attribute resolvers.
  #
  # source://kube-dsl//lib/kube-dsl/builder.rb#9
  def resolvers; end

  # source://kube-dsl//lib/kube-dsl/builder.rb#55
  def resource_from_ref(ref); end

  # Returns the value of attribute schema_dir.
  #
  # source://kube-dsl//lib/kube-dsl/builder.rb#7
  def schema_dir; end

  # Returns the value of attribute serialize_handlers.
  #
  # source://kube-dsl//lib/kube-dsl/builder.rb#9
  def serialize_handlers; end

  private

  # source://kube-dsl//lib/kube-dsl/builder.rb#141
  def add_doc_to_resource(res, doc); end

  # source://kube-dsl//lib/kube-dsl/builder.rb#166
  def add_prop_to_resource(name, prop, res); end

  # source://kube-dsl//lib/kube-dsl/builder.rb#147
  def add_props_to_resource(properties, res); end

  # source://kube-dsl//lib/kube-dsl/builder.rb#98
  def autoload_map; end

  # source://kube-dsl//lib/kube-dsl/builder.rb#115
  def each_autoload_file_helper(amap, path, &block); end

  # source://kube-dsl//lib/kube-dsl/builder.rb#90
  def load_resources; end

  # source://kube-dsl//lib/kube-dsl/builder.rb#154
  def resolve_ref(ref_str); end

  # source://kube-dsl//lib/kube-dsl/builder.rb#241
  def resource_cache; end

  # source://kube-dsl//lib/kube-dsl/builder.rb#237
  def start_path; end
end

# source://kube-dsl//lib/kube-dsl/dsl.rb#1
module KubeDSL::DSL; end

# source://kube-dsl//lib/kube-dsl/dsl/admissionregistration.rb#1
module KubeDSL::DSL::Admissionregistration; end

# source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1.rb#1
module KubeDSL::DSL::Admissionregistration::V1; end

# source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/mutating_webhook.rb#7
class KubeDSL::DSL::Admissionregistration::V1::MutatingWebhook < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def admission_review_versions(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def client_config(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def client_config_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def failure_policy(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/mutating_webhook.rb#48
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def match_policy(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def namespace_selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def namespace_selector_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def object_selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def object_selector_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def reinvocation_policy(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def rule(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def rules; end

  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/mutating_webhook.rb#32
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def side_effects(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def timeout_seconds(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/mutating_webhook_configuration.rb#7
class KubeDSL::DSL::Admissionregistration::V1::MutatingWebhookConfiguration < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/mutating_webhook_configuration.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/mutating_webhook_configuration.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def webhook(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def webhooks; end
end

# source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/mutating_webhook_configuration_list.rb#7
class KubeDSL::DSL::Admissionregistration::V1::MutatingWebhookConfigurationList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/mutating_webhook_configuration_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/mutating_webhook_configuration_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/rule_with_operations.rb#7
class KubeDSL::DSL::Admissionregistration::V1::RuleWithOperations < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def api_groups(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def api_versions(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/rule_with_operations.rb#30
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def operations(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def resources(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def scope(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/rule_with_operations.rb#20
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/service_reference.rb#7
class KubeDSL::DSL::Admissionregistration::V1::ServiceReference < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/service_reference.rb#27
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def namespace(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def path(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def port(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/service_reference.rb#18
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/validating_webhook.rb#7
class KubeDSL::DSL::Admissionregistration::V1::ValidatingWebhook < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def admission_review_versions(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def client_config(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def client_config_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def failure_policy(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/validating_webhook.rb#45
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def match_policy(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def namespace_selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def namespace_selector_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def object_selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def object_selector_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def rule(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def rules; end

  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/validating_webhook.rb#30
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def side_effects(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def timeout_seconds(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/validating_webhook_configuration.rb#7
class KubeDSL::DSL::Admissionregistration::V1::ValidatingWebhookConfiguration < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/validating_webhook_configuration.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/validating_webhook_configuration.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def webhook(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def webhooks; end
end

# source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/validating_webhook_configuration_list.rb#7
class KubeDSL::DSL::Admissionregistration::V1::ValidatingWebhookConfigurationList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/validating_webhook_configuration_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/validating_webhook_configuration_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/webhook_client_config.rb#7
class KubeDSL::DSL::Admissionregistration::V1::WebhookClientConfig < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def ca_bundle(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/webhook_client_config.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/webhook_client_config.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def service(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def service_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def url(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiextensions.rb#1
module KubeDSL::DSL::Apiextensions; end

# source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1.rb#1
module KubeDSL::DSL::Apiextensions::V1; end

# source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_column_definition.rb#7
class KubeDSL::DSL::Apiextensions::V1::CustomResourceColumnDefinition < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def description(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def format(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def json_path(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_column_definition.rb#33
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def priority(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_column_definition.rb#22
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_conversion.rb#7
class KubeDSL::DSL::Apiextensions::V1::CustomResourceConversion < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_conversion.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_conversion.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def strategy(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def webhook(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def webhook_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_definition.rb#7
class KubeDSL::DSL::Apiextensions::V1::CustomResourceDefinition < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_definition.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_definition.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def status(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_definition_condition.rb#7
class KubeDSL::DSL::Apiextensions::V1::CustomResourceDefinitionCondition < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_definition_condition.rb#30
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def last_transition_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_definition_condition.rb#20
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def status(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_definition_list.rb#7
class KubeDSL::DSL::Apiextensions::V1::CustomResourceDefinitionList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_definition_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_definition_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_definition_names.rb#7
class KubeDSL::DSL::Apiextensions::V1::CustomResourceDefinitionNames < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def categories(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def kind(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_definition_names.rb#33
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def list_kind(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def plural(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_definition_names.rb#22
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def short_names(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def singular(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_definition_spec.rb#7
class KubeDSL::DSL::Apiextensions::V1::CustomResourceDefinitionSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def conversion(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def conversion_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def group(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_definition_spec.rb#33
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def names(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def names_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def preserve_unknown_fields(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def scope(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_definition_spec.rb#22
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def version(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def versions; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_definition_status.rb#7
class KubeDSL::DSL::Apiextensions::V1::CustomResourceDefinitionStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def accepted_names(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def accepted_names_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def condition(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def conditions; end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_definition_status.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_definition_status.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def stored_versions(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_definition_version.rb#7
class KubeDSL::DSL::Apiextensions::V1::CustomResourceDefinitionVersion < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def additional_printer_column(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def additional_printer_columns; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def deprecated(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def deprecation_warning(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_definition_version.rb#39
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def schema(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def schema_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_definition_version.rb#26
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def served(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def storage(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def subresources(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def subresources_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_subresource_scale.rb#7
class KubeDSL::DSL::Apiextensions::V1::CustomResourceSubresourceScale < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_subresource_scale.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def label_selector_path(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_subresource_scale.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def spec_replicas_path(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def status_replicas_path(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_subresources.rb#7
class KubeDSL::DSL::Apiextensions::V1::CustomResourceSubresources < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_subresources.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def scale(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def scale_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_subresources.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def status(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_validation.rb#7
class KubeDSL::DSL::Apiextensions::V1::CustomResourceValidation < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_validation.rb#18
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def open_apiv3_schema(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def open_apiv3_schema_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_validation.rb#12
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/external_documentation.rb#7
class KubeDSL::DSL::Apiextensions::V1::ExternalDocumentation < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def description(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/external_documentation.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/external_documentation.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def url(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/json.rb#4
class KubeDSL::DSL::Apiextensions::V1::JSON < ::KubeDSL::DSLObject
  sig { params(block: T.nilable(T.proc.void)).void }
  def initialize(&block); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/json.rb#17
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/json.rb#5
  sig { returns(JSONType) }
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/json.rb#9
  sig { params(val: T.nilable(JSONType)).returns(JSONType) }
  def value(val = T.unsafe(nil)); end

  JSONType = T.type_alias { T.any(
        T::Array[T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped])],
        T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])]
      ) }
end

# source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/json_schema_props.rb#7
class KubeDSL::DSL::Apiextensions::V1::JSONSchemaProps < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def additional_items(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def additional_properties(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def all_of(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Apiextensions::V1::JSONSchemaProps))
    ).returns(T::Array[KubeDSL::DSL::Apiextensions::V1::JSONSchemaProps])
  end
  def all_ofs(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def all_oves; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def any_of(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Apiextensions::V1::JSONSchemaProps))
    ).returns(T::Array[KubeDSL::DSL::Apiextensions::V1::JSONSchemaProps])
  end
  def any_ofs(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def any_oves; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def default(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.void)).returns(::KubeDSL::KeyValueFields) }
  def definitions(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.void)).returns(::KubeDSL::KeyValueFields) }
  def dependencies(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def description(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def ena; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def enum(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Apiextensions::V1::JSON))
    ).returns(T::Array[KubeDSL::DSL::Apiextensions::V1::JSON])
  end
  def enums(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def example(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def exclusive_maximum(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def exclusive_minimum(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def external_docs(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def external_docs_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def format(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def id(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def items(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/json_schema_props.rb#141
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def max_items(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def max_length(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def max_properties(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def maximum(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def min_items(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def min_length(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def min_properties(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def minimum(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def multiple_of(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def not_field(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def not_field_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def nullable(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def one_of(elem_name = T.unsafe(nil), &block); end

  sig do
    params(
      elem_name: T.nilable(Symbol),
      block: T.nilable(T.proc.returns(KubeDSL::DSL::Apiextensions::V1::JSONSchemaProps))
    ).returns(T::Array[KubeDSL::DSL::Apiextensions::V1::JSONSchemaProps])
  end
  def one_ofs(elem_name = nil, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def one_oves; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def pattern(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.void)).returns(::KubeDSL::KeyValueFields) }
  def pattern_properties(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.void)).returns(::KubeDSL::KeyValueFields) }
  def properties(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def required(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/json_schema_props.rb#94
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def title(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def type(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def unique_items(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def x_kubernetes_embedded_resource(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def x_kubernetes_int_or_string(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def x_kubernetes_list_map_keys(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def x_kubernetes_list_type(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def x_kubernetes_map_type(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def x_kubernetes_preserve_unknown_fields(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def x_kubernetes_validation(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def x_kubernetes_validations; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/service_reference.rb#7
class KubeDSL::DSL::Apiextensions::V1::ServiceReference < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/service_reference.rb#27
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def namespace(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def path(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def port(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/service_reference.rb#18
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/validation_rule.rb#7
class KubeDSL::DSL::Apiextensions::V1::ValidationRule < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/validation_rule.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def rule(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/validation_rule.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/webhook_client_config.rb#7
class KubeDSL::DSL::Apiextensions::V1::WebhookClientConfig < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def ca_bundle(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/webhook_client_config.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/webhook_client_config.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def service(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def service_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def url(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/webhook_conversion.rb#7
class KubeDSL::DSL::Apiextensions::V1::WebhookConversion < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def client_config(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def client_config_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def conversion_review_versions(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/webhook_conversion.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/webhook_conversion.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiregistration.rb#1
module KubeDSL::DSL::Apiregistration; end

# source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1.rb#1
module KubeDSL::DSL::Apiregistration::V1; end

# source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1/api_service.rb#7
class KubeDSL::DSL::Apiregistration::V1::APIService < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1/api_service.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1/api_service.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def status(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1/api_service_condition.rb#7
class KubeDSL::DSL::Apiregistration::V1::APIServiceCondition < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1/api_service_condition.rb#30
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def last_transition_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1/api_service_condition.rb#20
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def status(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1/api_service_list.rb#7
class KubeDSL::DSL::Apiregistration::V1::APIServiceList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1/api_service_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1/api_service_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1/api_service_spec.rb#7
class KubeDSL::DSL::Apiregistration::V1::APIServiceSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def ca_bundle(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def group(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def group_priority_minimum(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def insecure_skip_tls_verify(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1/api_service_spec.rb#36
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1/api_service_spec.rb#24
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def service(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def service_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def version(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def version_priority(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1/api_service_status.rb#7
class KubeDSL::DSL::Apiregistration::V1::APIServiceStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def condition(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def conditions; end

  # source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1/api_service_status.rb#18
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1/api_service_status.rb#12
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1/service_reference.rb#7
class KubeDSL::DSL::Apiregistration::V1::ServiceReference < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1/service_reference.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def namespace(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def port(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1/service_reference.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiserverinternal.rb#1
module KubeDSL::DSL::Apiserverinternal; end

# source://kube-dsl//lib/kube-dsl/dsl/apiserverinternal/v1alpha1.rb#1
module KubeDSL::DSL::Apiserverinternal::V1alpha1; end

# source://kube-dsl//lib/kube-dsl/dsl/apiserverinternal/v1alpha1/server_storage_version.rb#7
class KubeDSL::DSL::Apiserverinternal::V1alpha1::ServerStorageVersion < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def api_server_id(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def decodable_versions(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def encoding_version(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiserverinternal/v1alpha1/server_storage_version.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/apiserverinternal/v1alpha1/server_storage_version.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiserverinternal/v1alpha1/storage_version.rb#7
class KubeDSL::DSL::Apiserverinternal::V1alpha1::StorageVersion < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/apiserverinternal/v1alpha1/storage_version.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/apiserverinternal/v1alpha1/storage_version.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def spec(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def status(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiserverinternal/v1alpha1/storage_version_condition.rb#7
class KubeDSL::DSL::Apiserverinternal::V1alpha1::StorageVersionCondition < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/apiserverinternal/v1alpha1/storage_version_condition.rb#33
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def last_transition_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def observed_generation(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiserverinternal/v1alpha1/storage_version_condition.rb#22
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def status(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiserverinternal/v1alpha1/storage_version_list.rb#7
class KubeDSL::DSL::Apiserverinternal::V1alpha1::StorageVersionList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/apiserverinternal/v1alpha1/storage_version_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/apiserverinternal/v1alpha1/storage_version_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiserverinternal/v1alpha1/storage_version_status.rb#7
class KubeDSL::DSL::Apiserverinternal::V1alpha1::StorageVersionStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def common_encoding_version(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def condition(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def conditions; end

  # source://kube-dsl//lib/kube-dsl/dsl/apiserverinternal/v1alpha1/storage_version_status.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/apiserverinternal/v1alpha1/storage_version_status.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def storage_version(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def storage_versions; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps.rb#1
module KubeDSL::DSL::Apps; end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1.rb#1
module KubeDSL::DSL::Apps::V1; end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/controller_revision.rb#7
class KubeDSL::DSL::Apps::V1::ControllerRevision < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def data(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/controller_revision.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def revision(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/controller_revision.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/controller_revision_list.rb#7
class KubeDSL::DSL::Apps::V1::ControllerRevisionList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/controller_revision_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/controller_revision_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/daemon_set.rb#7
class KubeDSL::DSL::Apps::V1::DaemonSet < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/daemon_set.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/daemon_set.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def status(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/daemon_set_condition.rb#7
class KubeDSL::DSL::Apps::V1::DaemonSetCondition < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/daemon_set_condition.rb#30
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def last_transition_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/daemon_set_condition.rb#20
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def status(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/daemon_set_list.rb#7
class KubeDSL::DSL::Apps::V1::DaemonSetList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/daemon_set_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/daemon_set_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/daemon_set_spec.rb#7
class KubeDSL::DSL::Apps::V1::DaemonSetSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/daemon_set_spec.rb#30
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def min_ready_seconds(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def revision_history_limit(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def selector_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/daemon_set_spec.rb#20
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def template(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def template_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def update_strategy(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def update_strategy_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/daemon_set_status.rb#7
class KubeDSL::DSL::Apps::V1::DaemonSetStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def collision_count(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def condition(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def conditions; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def current_number_scheduled(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def desired_number_scheduled(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/daemon_set_status.rb#45
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def number_available(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def number_misscheduled(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def number_ready(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def number_unavailable(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def observed_generation(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/daemon_set_status.rb#30
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def updated_number_scheduled(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/daemon_set_update_strategy.rb#7
class KubeDSL::DSL::Apps::V1::DaemonSetUpdateStrategy < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/daemon_set_update_strategy.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def rolling_update(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def rolling_update_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/daemon_set_update_strategy.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/deployment.rb#7
class KubeDSL::DSL::Apps::V1::Deployment < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/deployment.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/deployment.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def status(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/deployment_condition.rb#7
class KubeDSL::DSL::Apps::V1::DeploymentCondition < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/deployment_condition.rb#33
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def last_transition_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def last_update_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/deployment_condition.rb#22
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def status(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/deployment_list.rb#7
class KubeDSL::DSL::Apps::V1::DeploymentList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/deployment_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/deployment_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/deployment_spec.rb#7
class KubeDSL::DSL::Apps::V1::DeploymentSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/deployment_spec.rb#39
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def min_ready_seconds(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def paused(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def progress_deadline_seconds(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def revision_history_limit(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def selector_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/deployment_spec.rb#26
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def strategy(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def strategy_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def template(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def template_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/deployment_status.rb#7
class KubeDSL::DSL::Apps::V1::DeploymentStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def available_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def collision_count(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def condition(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def conditions; end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/deployment_status.rb#39
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def observed_generation(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def ready_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/deployment_status.rb#26
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def unavailable_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def updated_replicas(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/deployment_strategy.rb#7
class KubeDSL::DSL::Apps::V1::DeploymentStrategy < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/deployment_strategy.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def rolling_update(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def rolling_update_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/deployment_strategy.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/replica_set.rb#7
class KubeDSL::DSL::Apps::V1::ReplicaSet < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/replica_set.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/replica_set.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def status(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/replica_set_condition.rb#7
class KubeDSL::DSL::Apps::V1::ReplicaSetCondition < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/replica_set_condition.rb#30
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def last_transition_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/replica_set_condition.rb#20
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def status(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/replica_set_list.rb#7
class KubeDSL::DSL::Apps::V1::ReplicaSetList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/replica_set_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/replica_set_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/replica_set_spec.rb#7
class KubeDSL::DSL::Apps::V1::ReplicaSetSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/replica_set_spec.rb#27
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def min_ready_seconds(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def selector_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/replica_set_spec.rb#18
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def template(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def template_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/replica_set_status.rb#7
class KubeDSL::DSL::Apps::V1::ReplicaSetStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def available_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def condition(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def conditions; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def fully_labeled_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/replica_set_status.rb#33
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def observed_generation(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def ready_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/replica_set_status.rb#22
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/rolling_update_daemon_set.rb#7
class KubeDSL::DSL::Apps::V1::RollingUpdateDaemonSet < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/rolling_update_daemon_set.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def max_surge(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def max_unavailable(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/rolling_update_daemon_set.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/rolling_update_deployment.rb#7
class KubeDSL::DSL::Apps::V1::RollingUpdateDeployment < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/rolling_update_deployment.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def max_surge(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def max_unavailable(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/rolling_update_deployment.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/rolling_update_stateful_set_strategy.rb#7
class KubeDSL::DSL::Apps::V1::RollingUpdateStatefulSetStrategy < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/rolling_update_stateful_set_strategy.rb#18
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def partition(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/rolling_update_stateful_set_strategy.rb#12
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/stateful_set.rb#7
class KubeDSL::DSL::Apps::V1::StatefulSet < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/stateful_set.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/stateful_set.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def status(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/stateful_set_condition.rb#7
class KubeDSL::DSL::Apps::V1::StatefulSetCondition < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/stateful_set_condition.rb#30
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def last_transition_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/stateful_set_condition.rb#20
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def status(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/stateful_set_list.rb#7
class KubeDSL::DSL::Apps::V1::StatefulSetList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/stateful_set_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/stateful_set_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/stateful_set_persistent_volume_claim_retention_policy.rb#7
class KubeDSL::DSL::Apps::V1::StatefulSetPersistentVolumeClaimRetentionPolicy < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/stateful_set_persistent_volume_claim_retention_policy.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/stateful_set_persistent_volume_claim_retention_policy.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def when_deleted(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def when_scaled(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/stateful_set_spec.rb#7
class KubeDSL::DSL::Apps::V1::StatefulSetSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/stateful_set_spec.rb#45
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def min_ready_seconds(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def persistent_volume_claim_retention_policy(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def persistent_volume_claim_retention_policy_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def pod_management_policy(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def revision_history_limit(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def selector_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/stateful_set_spec.rb#30
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def service_name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def template(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def template_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def update_strategy(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def update_strategy_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def volume_claim_template(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def volume_claim_templates; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/stateful_set_status.rb#7
class KubeDSL::DSL::Apps::V1::StatefulSetStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def available_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def collision_count(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def condition(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def conditions; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def current_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def current_revision(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/stateful_set_status.rb#45
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def observed_generation(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def ready_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/stateful_set_status.rb#30
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def update_revision(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def updated_replicas(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/stateful_set_update_strategy.rb#7
class KubeDSL::DSL::Apps::V1::StatefulSetUpdateStrategy < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/stateful_set_update_strategy.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def rolling_update(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def rolling_update_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/stateful_set_update_strategy.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/authentication.rb#1
module KubeDSL::DSL::Authentication; end

# source://kube-dsl//lib/kube-dsl/dsl/authentication/v1.rb#1
module KubeDSL::DSL::Authentication::V1; end

# source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/bound_object_reference.rb#7
class KubeDSL::DSL::Authentication::V1::BoundObjectReference < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def api_version(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def kind(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/bound_object_reference.rb#27
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/bound_object_reference.rb#18
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def uid(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/token_request.rb#7
class KubeDSL::DSL::Authentication::V1::TokenRequest < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/token_request.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/token_request.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def status(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/token_request_spec.rb#7
class KubeDSL::DSL::Authentication::V1::TokenRequestSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def audiences(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def bound_object_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def bound_object_ref_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def expiration_seconds(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/token_request_spec.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/token_request_spec.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/token_request_status.rb#7
class KubeDSL::DSL::Authentication::V1::TokenRequestStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def expiration_timestamp(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/token_request_status.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/token_request_status.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def token(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/token_review.rb#7
class KubeDSL::DSL::Authentication::V1::TokenReview < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/token_review.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/token_review.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def status(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/token_review_spec.rb#7
class KubeDSL::DSL::Authentication::V1::TokenReviewSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def audiences(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/token_review_spec.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/token_review_spec.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def token(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/token_review_status.rb#7
class KubeDSL::DSL::Authentication::V1::TokenReviewStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def audiences(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def authenticated(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def error(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/token_review_status.rb#27
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/token_review_status.rb#18
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def user(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def user_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/user_info.rb#7
class KubeDSL::DSL::Authentication::V1::UserInfo < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.void)).returns(::KubeDSL::KeyValueFields) }
  def extra(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def groups(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/user_info.rb#27
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/user_info.rb#18
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def uid(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def username(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/authorization.rb#1
module KubeDSL::DSL::Authorization; end

# source://kube-dsl//lib/kube-dsl/dsl/authorization/v1.rb#1
module KubeDSL::DSL::Authorization::V1; end

# source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/local_subject_access_review.rb#7
class KubeDSL::DSL::Authorization::V1::LocalSubjectAccessReview < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/local_subject_access_review.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/local_subject_access_review.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def status(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/non_resource_attributes.rb#7
class KubeDSL::DSL::Authorization::V1::NonResourceAttributes < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/non_resource_attributes.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def path(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/non_resource_attributes.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def verb(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/non_resource_rule.rb#7
class KubeDSL::DSL::Authorization::V1::NonResourceRule < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/non_resource_rule.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def non_resource_ur_ls(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/non_resource_rule.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def verbs(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/resource_attributes.rb#7
class KubeDSL::DSL::Authorization::V1::ResourceAttributes < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def group(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/resource_attributes.rb#36
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def namespace(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def resource(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/resource_attributes.rb#24
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def subresource(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def verb(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def version(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/resource_rule.rb#7
class KubeDSL::DSL::Authorization::V1::ResourceRule < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def api_groups(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/resource_rule.rb#27
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def resource_names(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def resources(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/resource_rule.rb#18
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def verbs(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/self_subject_access_review.rb#7
class KubeDSL::DSL::Authorization::V1::SelfSubjectAccessReview < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/self_subject_access_review.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/self_subject_access_review.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def status(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/self_subject_access_review_spec.rb#7
class KubeDSL::DSL::Authorization::V1::SelfSubjectAccessReviewSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/self_subject_access_review_spec.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def non_resource_attributes(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def non_resource_attributes_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def resource_attributes(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def resource_attributes_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/self_subject_access_review_spec.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/self_subject_rules_review.rb#7
class KubeDSL::DSL::Authorization::V1::SelfSubjectRulesReview < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/self_subject_rules_review.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/self_subject_rules_review.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def status(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/self_subject_rules_review_spec.rb#7
class KubeDSL::DSL::Authorization::V1::SelfSubjectRulesReviewSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/self_subject_rules_review_spec.rb#18
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def namespace(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/self_subject_rules_review_spec.rb#12
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/subject_access_review.rb#7
class KubeDSL::DSL::Authorization::V1::SubjectAccessReview < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/subject_access_review.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/subject_access_review.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def status(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/subject_access_review_spec.rb#7
class KubeDSL::DSL::Authorization::V1::SubjectAccessReviewSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.void)).returns(::KubeDSL::KeyValueFields) }
  def extra(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def groups(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/subject_access_review_spec.rb#33
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def non_resource_attributes(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def non_resource_attributes_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def resource_attributes(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def resource_attributes_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/subject_access_review_spec.rb#22
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def uid(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def user(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/subject_access_review_status.rb#7
class KubeDSL::DSL::Authorization::V1::SubjectAccessReviewStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def allowed(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def denied(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def evaluation_error(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/subject_access_review_status.rb#27
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/subject_access_review_status.rb#18
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/subject_rules_review_status.rb#7
class KubeDSL::DSL::Authorization::V1::SubjectRulesReviewStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def evaluation_error(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def incomplete(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/subject_rules_review_status.rb#27
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def non_resource_rule(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def non_resource_rules; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def resource_rule(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def resource_rules; end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/subject_rules_review_status.rb#18
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling.rb#1
module KubeDSL::DSL::Autoscaling; end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1.rb#1
module KubeDSL::DSL::Autoscaling::V1; end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/cross_version_object_reference.rb#7
class KubeDSL::DSL::Autoscaling::V1::CrossVersionObjectReference < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def api_version(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def kind(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/cross_version_object_reference.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/cross_version_object_reference.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/horizontal_pod_autoscaler.rb#7
class KubeDSL::DSL::Autoscaling::V1::HorizontalPodAutoscaler < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/horizontal_pod_autoscaler.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/horizontal_pod_autoscaler.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def status(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/horizontal_pod_autoscaler_list.rb#7
class KubeDSL::DSL::Autoscaling::V1::HorizontalPodAutoscalerList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/horizontal_pod_autoscaler_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/horizontal_pod_autoscaler_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/horizontal_pod_autoscaler_spec.rb#7
class KubeDSL::DSL::Autoscaling::V1::HorizontalPodAutoscalerSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/horizontal_pod_autoscaler_spec.rb#27
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def max_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def min_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def scale_target_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def scale_target_ref_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/horizontal_pod_autoscaler_spec.rb#18
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def target_cpu_utilization_percentage(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/horizontal_pod_autoscaler_status.rb#7
class KubeDSL::DSL::Autoscaling::V1::HorizontalPodAutoscalerStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def current_cpu_utilization_percentage(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def current_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def desired_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/horizontal_pod_autoscaler_status.rb#30
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def last_scale_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def observed_generation(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/horizontal_pod_autoscaler_status.rb#20
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/scale.rb#7
class KubeDSL::DSL::Autoscaling::V1::Scale < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/scale.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/scale.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def status(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/scale_spec.rb#7
class KubeDSL::DSL::Autoscaling::V1::ScaleSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/scale_spec.rb#18
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/scale_spec.rb#12
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/scale_status.rb#7
class KubeDSL::DSL::Autoscaling::V1::ScaleStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/scale_status.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def selector(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/scale_status.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2.rb#1
module KubeDSL::DSL::Autoscaling::V2; end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/container_resource_metric_source.rb#7
class KubeDSL::DSL::Autoscaling::V2::ContainerResourceMetricSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def container(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/container_resource_metric_source.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/container_resource_metric_source.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def target(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def target_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/container_resource_metric_status.rb#7
class KubeDSL::DSL::Autoscaling::V2::ContainerResourceMetricStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def container(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def current(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def current_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/container_resource_metric_status.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/container_resource_metric_status.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/cross_version_object_reference.rb#7
class KubeDSL::DSL::Autoscaling::V2::CrossVersionObjectReference < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def api_version(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def kind(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/cross_version_object_reference.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/cross_version_object_reference.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/external_metric_source.rb#7
class KubeDSL::DSL::Autoscaling::V2::ExternalMetricSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/external_metric_source.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metric(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metric_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/external_metric_source.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def target(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def target_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/external_metric_status.rb#7
class KubeDSL::DSL::Autoscaling::V2::ExternalMetricStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def current(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def current_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/external_metric_status.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metric(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metric_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/external_metric_status.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/hpa_scaling_policy.rb#7
class KubeDSL::DSL::Autoscaling::V2::HPAScalingPolicy < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/hpa_scaling_policy.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def period_seconds(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/hpa_scaling_policy.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def type(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def value(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/hpa_scaling_rules.rb#7
class KubeDSL::DSL::Autoscaling::V2::HPAScalingRules < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/hpa_scaling_rules.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def policies; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def policy(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def select_policy(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/hpa_scaling_rules.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def stabilization_window_seconds(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/horizontal_pod_autoscaler.rb#7
class KubeDSL::DSL::Autoscaling::V2::HorizontalPodAutoscaler < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/horizontal_pod_autoscaler.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/horizontal_pod_autoscaler.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def status(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/horizontal_pod_autoscaler_behavior.rb#7
class KubeDSL::DSL::Autoscaling::V2::HorizontalPodAutoscalerBehavior < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/horizontal_pod_autoscaler_behavior.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def scale_down(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def scale_down_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def scale_up(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def scale_up_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/horizontal_pod_autoscaler_behavior.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/horizontal_pod_autoscaler_condition.rb#7
class KubeDSL::DSL::Autoscaling::V2::HorizontalPodAutoscalerCondition < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/horizontal_pod_autoscaler_condition.rb#30
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def last_transition_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/horizontal_pod_autoscaler_condition.rb#20
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def status(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/horizontal_pod_autoscaler_list.rb#7
class KubeDSL::DSL::Autoscaling::V2::HorizontalPodAutoscalerList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/horizontal_pod_autoscaler_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/horizontal_pod_autoscaler_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/horizontal_pod_autoscaler_spec.rb#7
class KubeDSL::DSL::Autoscaling::V2::HorizontalPodAutoscalerSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def behavior(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def behavior_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/horizontal_pod_autoscaler_spec.rb#30
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def max_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def metric(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def metrics; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def min_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def scale_target_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def scale_target_ref_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/horizontal_pod_autoscaler_spec.rb#20
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/horizontal_pod_autoscaler_status.rb#7
class KubeDSL::DSL::Autoscaling::V2::HorizontalPodAutoscalerStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def condition(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def conditions; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def current_metric(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def current_metrics; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def current_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def desired_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/horizontal_pod_autoscaler_status.rb#33
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def last_scale_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def observed_generation(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/horizontal_pod_autoscaler_status.rb#22
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/metric_identifier.rb#7
class KubeDSL::DSL::Autoscaling::V2::MetricIdentifier < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/metric_identifier.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def selector_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/metric_identifier.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/metric_spec.rb#7
class KubeDSL::DSL::Autoscaling::V2::MetricSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def container_resource(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def container_resource_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def external(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def external_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/metric_spec.rb#33
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def object(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def object_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def pods(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def pods_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def resource(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def resource_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/metric_spec.rb#22
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/metric_status.rb#7
class KubeDSL::DSL::Autoscaling::V2::MetricStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def container_resource(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def container_resource_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def external(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def external_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/metric_status.rb#33
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def object(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def object_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def pods(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def pods_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def resource(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def resource_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/metric_status.rb#22
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/metric_target.rb#7
class KubeDSL::DSL::Autoscaling::V2::MetricTarget < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def average_utilization(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def average_value(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/metric_target.rb#27
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/metric_target.rb#18
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def type(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def value(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/metric_value_status.rb#7
class KubeDSL::DSL::Autoscaling::V2::MetricValueStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def average_utilization(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def average_value(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/metric_value_status.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/metric_value_status.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def value(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/object_metric_source.rb#7
class KubeDSL::DSL::Autoscaling::V2::ObjectMetricSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def described_object(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def described_object_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/object_metric_source.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metric(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metric_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/object_metric_source.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def target(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def target_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/object_metric_status.rb#7
class KubeDSL::DSL::Autoscaling::V2::ObjectMetricStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def current(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def current_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def described_object(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def described_object_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/object_metric_status.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metric(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metric_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/object_metric_status.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/pods_metric_source.rb#7
class KubeDSL::DSL::Autoscaling::V2::PodsMetricSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/pods_metric_source.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metric(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metric_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/pods_metric_source.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def target(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def target_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/pods_metric_status.rb#7
class KubeDSL::DSL::Autoscaling::V2::PodsMetricStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def current(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def current_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/pods_metric_status.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metric(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metric_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/pods_metric_status.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/resource_metric_source.rb#7
class KubeDSL::DSL::Autoscaling::V2::ResourceMetricSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/resource_metric_source.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/resource_metric_source.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def target(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def target_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/resource_metric_status.rb#7
class KubeDSL::DSL::Autoscaling::V2::ResourceMetricStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def current(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def current_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/resource_metric_status.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2/resource_metric_status.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1.rb#1
module KubeDSL::DSL::Autoscaling::V2beta1; end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/container_resource_metric_source.rb#7
class KubeDSL::DSL::Autoscaling::V2beta1::ContainerResourceMetricSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def container(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/container_resource_metric_source.rb#27
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/container_resource_metric_source.rb#18
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def target_average_utilization(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def target_average_value(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/container_resource_metric_status.rb#7
class KubeDSL::DSL::Autoscaling::V2beta1::ContainerResourceMetricStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def container(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def current_average_utilization(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def current_average_value(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/container_resource_metric_status.rb#27
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/container_resource_metric_status.rb#18
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/cross_version_object_reference.rb#7
class KubeDSL::DSL::Autoscaling::V2beta1::CrossVersionObjectReference < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def api_version(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def kind(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/cross_version_object_reference.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/cross_version_object_reference.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/external_metric_source.rb#7
class KubeDSL::DSL::Autoscaling::V2beta1::ExternalMetricSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/external_metric_source.rb#27
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def metric_name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metric_selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metric_selector_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/external_metric_source.rb#18
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def target_average_value(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def target_value(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/external_metric_status.rb#7
class KubeDSL::DSL::Autoscaling::V2beta1::ExternalMetricStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def current_average_value(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def current_value(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/external_metric_status.rb#27
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def metric_name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metric_selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metric_selector_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/external_metric_status.rb#18
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/horizontal_pod_autoscaler.rb#7
class KubeDSL::DSL::Autoscaling::V2beta1::HorizontalPodAutoscaler < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/horizontal_pod_autoscaler.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/horizontal_pod_autoscaler.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def status(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/horizontal_pod_autoscaler_condition.rb#7
class KubeDSL::DSL::Autoscaling::V2beta1::HorizontalPodAutoscalerCondition < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/horizontal_pod_autoscaler_condition.rb#30
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def last_transition_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/horizontal_pod_autoscaler_condition.rb#20
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def status(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/horizontal_pod_autoscaler_list.rb#7
class KubeDSL::DSL::Autoscaling::V2beta1::HorizontalPodAutoscalerList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/horizontal_pod_autoscaler_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/horizontal_pod_autoscaler_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/horizontal_pod_autoscaler_spec.rb#7
class KubeDSL::DSL::Autoscaling::V2beta1::HorizontalPodAutoscalerSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/horizontal_pod_autoscaler_spec.rb#27
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def max_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def metric(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def metrics; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def min_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def scale_target_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def scale_target_ref_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/horizontal_pod_autoscaler_spec.rb#18
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/horizontal_pod_autoscaler_status.rb#7
class KubeDSL::DSL::Autoscaling::V2beta1::HorizontalPodAutoscalerStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def condition(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def conditions; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def current_metric(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def current_metrics; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def current_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def desired_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/horizontal_pod_autoscaler_status.rb#33
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def last_scale_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def observed_generation(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/horizontal_pod_autoscaler_status.rb#22
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/metric_spec.rb#7
class KubeDSL::DSL::Autoscaling::V2beta1::MetricSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def container_resource(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def container_resource_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def external(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def external_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/metric_spec.rb#33
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def object(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def object_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def pods(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def pods_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def resource(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def resource_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/metric_spec.rb#22
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/metric_status.rb#7
class KubeDSL::DSL::Autoscaling::V2beta1::MetricStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def container_resource(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def container_resource_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def external(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def external_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/metric_status.rb#33
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def object(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def object_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def pods(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def pods_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def resource(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def resource_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/metric_status.rb#22
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/object_metric_source.rb#7
class KubeDSL::DSL::Autoscaling::V2beta1::ObjectMetricSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def average_value(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/object_metric_source.rb#30
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def metric_name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def selector_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/object_metric_source.rb#20
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def target(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def target_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def target_value(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/object_metric_status.rb#7
class KubeDSL::DSL::Autoscaling::V2beta1::ObjectMetricStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def average_value(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def current_value(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/object_metric_status.rb#30
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def metric_name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def selector_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/object_metric_status.rb#20
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def target(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def target_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/pods_metric_source.rb#7
class KubeDSL::DSL::Autoscaling::V2beta1::PodsMetricSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/pods_metric_source.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def metric_name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def selector_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/pods_metric_source.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def target_average_value(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/pods_metric_status.rb#7
class KubeDSL::DSL::Autoscaling::V2beta1::PodsMetricStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def current_average_value(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/pods_metric_status.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def metric_name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def selector_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/pods_metric_status.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/resource_metric_source.rb#7
class KubeDSL::DSL::Autoscaling::V2beta1::ResourceMetricSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/resource_metric_source.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/resource_metric_source.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def target_average_utilization(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def target_average_value(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/resource_metric_status.rb#7
class KubeDSL::DSL::Autoscaling::V2beta1::ResourceMetricStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def current_average_utilization(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def current_average_value(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/resource_metric_status.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/resource_metric_status.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2.rb#1
module KubeDSL::DSL::Autoscaling::V2beta2; end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/container_resource_metric_source.rb#7
class KubeDSL::DSL::Autoscaling::V2beta2::ContainerResourceMetricSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def container(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/container_resource_metric_source.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/container_resource_metric_source.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def target(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def target_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/container_resource_metric_status.rb#7
class KubeDSL::DSL::Autoscaling::V2beta2::ContainerResourceMetricStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def container(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def current(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def current_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/container_resource_metric_status.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/container_resource_metric_status.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/cross_version_object_reference.rb#7
class KubeDSL::DSL::Autoscaling::V2beta2::CrossVersionObjectReference < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def api_version(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def kind(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/cross_version_object_reference.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/cross_version_object_reference.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/external_metric_source.rb#7
class KubeDSL::DSL::Autoscaling::V2beta2::ExternalMetricSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/external_metric_source.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metric(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metric_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/external_metric_source.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def target(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def target_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/external_metric_status.rb#7
class KubeDSL::DSL::Autoscaling::V2beta2::ExternalMetricStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def current(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def current_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/external_metric_status.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metric(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metric_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/external_metric_status.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/hpa_scaling_policy.rb#7
class KubeDSL::DSL::Autoscaling::V2beta2::HPAScalingPolicy < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/hpa_scaling_policy.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def period_seconds(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/hpa_scaling_policy.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def type(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def value(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/hpa_scaling_rules.rb#7
class KubeDSL::DSL::Autoscaling::V2beta2::HPAScalingRules < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/hpa_scaling_rules.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def policies; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def policy(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def select_policy(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/hpa_scaling_rules.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def stabilization_window_seconds(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/horizontal_pod_autoscaler.rb#7
class KubeDSL::DSL::Autoscaling::V2beta2::HorizontalPodAutoscaler < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/horizontal_pod_autoscaler.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/horizontal_pod_autoscaler.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def status(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/horizontal_pod_autoscaler_behavior.rb#7
class KubeDSL::DSL::Autoscaling::V2beta2::HorizontalPodAutoscalerBehavior < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/horizontal_pod_autoscaler_behavior.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def scale_down(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def scale_down_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def scale_up(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def scale_up_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/horizontal_pod_autoscaler_behavior.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/horizontal_pod_autoscaler_condition.rb#7
class KubeDSL::DSL::Autoscaling::V2beta2::HorizontalPodAutoscalerCondition < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/horizontal_pod_autoscaler_condition.rb#30
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def last_transition_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/horizontal_pod_autoscaler_condition.rb#20
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def status(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/horizontal_pod_autoscaler_list.rb#7
class KubeDSL::DSL::Autoscaling::V2beta2::HorizontalPodAutoscalerList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/horizontal_pod_autoscaler_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/horizontal_pod_autoscaler_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/horizontal_pod_autoscaler_spec.rb#7
class KubeDSL::DSL::Autoscaling::V2beta2::HorizontalPodAutoscalerSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def behavior(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def behavior_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/horizontal_pod_autoscaler_spec.rb#30
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def max_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def metric(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def metrics; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def min_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def scale_target_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def scale_target_ref_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/horizontal_pod_autoscaler_spec.rb#20
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/horizontal_pod_autoscaler_status.rb#7
class KubeDSL::DSL::Autoscaling::V2beta2::HorizontalPodAutoscalerStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def condition(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def conditions; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def current_metric(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def current_metrics; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def current_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def desired_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/horizontal_pod_autoscaler_status.rb#33
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def last_scale_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def observed_generation(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/horizontal_pod_autoscaler_status.rb#22
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/metric_identifier.rb#7
class KubeDSL::DSL::Autoscaling::V2beta2::MetricIdentifier < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/metric_identifier.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def selector_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/metric_identifier.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/metric_spec.rb#7
class KubeDSL::DSL::Autoscaling::V2beta2::MetricSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def container_resource(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def container_resource_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def external(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def external_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/metric_spec.rb#33
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def object(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def object_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def pods(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def pods_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def resource(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def resource_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/metric_spec.rb#22
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/metric_status.rb#7
class KubeDSL::DSL::Autoscaling::V2beta2::MetricStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def container_resource(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def container_resource_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def external(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def external_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/metric_status.rb#33
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def object(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def object_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def pods(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def pods_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def resource(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def resource_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/metric_status.rb#22
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/metric_target.rb#7
class KubeDSL::DSL::Autoscaling::V2beta2::MetricTarget < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def average_utilization(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def average_value(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/metric_target.rb#27
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/metric_target.rb#18
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def type(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def value(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/metric_value_status.rb#7
class KubeDSL::DSL::Autoscaling::V2beta2::MetricValueStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def average_utilization(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def average_value(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/metric_value_status.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/metric_value_status.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def value(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/object_metric_source.rb#7
class KubeDSL::DSL::Autoscaling::V2beta2::ObjectMetricSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def described_object(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def described_object_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/object_metric_source.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metric(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metric_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/object_metric_source.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def target(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def target_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/object_metric_status.rb#7
class KubeDSL::DSL::Autoscaling::V2beta2::ObjectMetricStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def current(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def current_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def described_object(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def described_object_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/object_metric_status.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metric(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metric_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/object_metric_status.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/pods_metric_source.rb#7
class KubeDSL::DSL::Autoscaling::V2beta2::PodsMetricSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/pods_metric_source.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metric(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metric_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/pods_metric_source.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def target(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def target_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/pods_metric_status.rb#7
class KubeDSL::DSL::Autoscaling::V2beta2::PodsMetricStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def current(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def current_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/pods_metric_status.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metric(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metric_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/pods_metric_status.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/resource_metric_source.rb#7
class KubeDSL::DSL::Autoscaling::V2beta2::ResourceMetricSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/resource_metric_source.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/resource_metric_source.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def target(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def target_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/resource_metric_status.rb#7
class KubeDSL::DSL::Autoscaling::V2beta2::ResourceMetricStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def current(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def current_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/resource_metric_status.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/resource_metric_status.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/batch.rb#1
module KubeDSL::DSL::Batch; end

# source://kube-dsl//lib/kube-dsl/dsl/batch/v1.rb#1
module KubeDSL::DSL::Batch::V1; end

# source://kube-dsl//lib/kube-dsl/dsl/batch/v1/cron_job.rb#7
class KubeDSL::DSL::Batch::V1::CronJob < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1/cron_job.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1/cron_job.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def status(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/batch/v1/cron_job_list.rb#7
class KubeDSL::DSL::Batch::V1::CronJobList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1/cron_job_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1/cron_job_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/batch/v1/cron_job_spec.rb#7
class KubeDSL::DSL::Batch::V1::CronJobSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def concurrency_policy(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def failed_jobs_history_limit(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def job_template(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def job_template_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1/cron_job_spec.rb#36
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def schedule(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1/cron_job_spec.rb#24
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def starting_deadline_seconds(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def successful_jobs_history_limit(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def suspend(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/batch/v1/cron_job_status.rb#7
class KubeDSL::DSL::Batch::V1::CronJobStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def active(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def actives; end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1/cron_job_status.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def last_schedule_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def last_successful_time(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1/cron_job_status.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/batch/v1/job.rb#7
class KubeDSL::DSL::Batch::V1::Job < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1/job.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1/job.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def status(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/batch/v1/job_condition.rb#7
class KubeDSL::DSL::Batch::V1::JobCondition < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1/job_condition.rb#33
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def last_probe_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def last_transition_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1/job_condition.rb#22
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def status(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/batch/v1/job_list.rb#7
class KubeDSL::DSL::Batch::V1::JobList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1/job_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1/job_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/batch/v1/job_spec.rb#7
class KubeDSL::DSL::Batch::V1::JobSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def active_deadline_seconds(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def backoff_limit(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def completion_mode(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def completions(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1/job_spec.rb#45
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def manual_selector(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def parallelism(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def selector_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1/job_spec.rb#30
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def suspend(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def template(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def template_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def ttl_seconds_after_finished(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/batch/v1/job_status.rb#7
class KubeDSL::DSL::Batch::V1::JobStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def active(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def completed_indexes(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def completion_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def condition(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def conditions; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def failed(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1/job_status.rb#42
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def ready(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1/job_status.rb#28
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def start_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def succeeded(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def uncounted_terminated_pods(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def uncounted_terminated_pods_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/batch/v1/job_template_spec.rb#7
class KubeDSL::DSL::Batch::V1::JobTemplateSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1/job_template_spec.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1/job_template_spec.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/batch/v1/uncounted_terminated_pods.rb#7
class KubeDSL::DSL::Batch::V1::UncountedTerminatedPods < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def failed(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1/uncounted_terminated_pods.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1/uncounted_terminated_pods.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def succeeded(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/batch/v1beta1.rb#1
module KubeDSL::DSL::Batch::V1beta1; end

# source://kube-dsl//lib/kube-dsl/dsl/batch/v1beta1/cron_job.rb#7
class KubeDSL::DSL::Batch::V1beta1::CronJob < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1beta1/cron_job.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1beta1/cron_job.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def status(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/batch/v1beta1/cron_job_list.rb#7
class KubeDSL::DSL::Batch::V1beta1::CronJobList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1beta1/cron_job_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1beta1/cron_job_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/batch/v1beta1/cron_job_spec.rb#7
class KubeDSL::DSL::Batch::V1beta1::CronJobSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def concurrency_policy(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def failed_jobs_history_limit(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def job_template(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def job_template_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1beta1/cron_job_spec.rb#36
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def schedule(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1beta1/cron_job_spec.rb#24
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def starting_deadline_seconds(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def successful_jobs_history_limit(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def suspend(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/batch/v1beta1/cron_job_status.rb#7
class KubeDSL::DSL::Batch::V1beta1::CronJobStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def active(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def actives; end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1beta1/cron_job_status.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def last_schedule_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def last_successful_time(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1beta1/cron_job_status.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/batch/v1beta1/job_template_spec.rb#7
class KubeDSL::DSL::Batch::V1beta1::JobTemplateSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1beta1/job_template_spec.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1beta1/job_template_spec.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/certificates.rb#1
module KubeDSL::DSL::Certificates; end

# source://kube-dsl//lib/kube-dsl/dsl/certificates/v1.rb#1
module KubeDSL::DSL::Certificates::V1; end

# source://kube-dsl//lib/kube-dsl/dsl/certificates/v1/certificate_signing_request.rb#7
class KubeDSL::DSL::Certificates::V1::CertificateSigningRequest < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/certificates/v1/certificate_signing_request.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/certificates/v1/certificate_signing_request.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def status(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/certificates/v1/certificate_signing_request_condition.rb#7
class KubeDSL::DSL::Certificates::V1::CertificateSigningRequestCondition < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/certificates/v1/certificate_signing_request_condition.rb#33
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def last_transition_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def last_update_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/certificates/v1/certificate_signing_request_condition.rb#22
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def status(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/certificates/v1/certificate_signing_request_list.rb#7
class KubeDSL::DSL::Certificates::V1::CertificateSigningRequestList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/certificates/v1/certificate_signing_request_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/certificates/v1/certificate_signing_request_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/certificates/v1/certificate_signing_request_spec.rb#7
class KubeDSL::DSL::Certificates::V1::CertificateSigningRequestSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def expiration_seconds(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.void)).returns(::KubeDSL::KeyValueFields) }
  def extra(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def groups(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/certificates/v1/certificate_signing_request_spec.rb#39
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def request(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/certificates/v1/certificate_signing_request_spec.rb#26
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def signer_name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def uid(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def usages(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def username(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/certificates/v1/certificate_signing_request_status.rb#7
class KubeDSL::DSL::Certificates::V1::CertificateSigningRequestStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def certificate(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def condition(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def conditions; end

  # source://kube-dsl//lib/kube-dsl/dsl/certificates/v1/certificate_signing_request_status.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/certificates/v1/certificate_signing_request_status.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/coordination.rb#1
module KubeDSL::DSL::Coordination; end

# source://kube-dsl//lib/kube-dsl/dsl/coordination/v1.rb#1
module KubeDSL::DSL::Coordination::V1; end

# source://kube-dsl//lib/kube-dsl/dsl/coordination/v1/lease.rb#7
class KubeDSL::DSL::Coordination::V1::Lease < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/coordination/v1/lease.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/coordination/v1/lease.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/coordination/v1/lease_list.rb#7
class KubeDSL::DSL::Coordination::V1::LeaseList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/coordination/v1/lease_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/coordination/v1/lease_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/coordination/v1/lease_spec.rb#7
class KubeDSL::DSL::Coordination::V1::LeaseSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def acquire_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def holder_identity(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/coordination/v1/lease_spec.rb#30
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def lease_duration_seconds(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def lease_transitions(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def renew_time(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/coordination/v1/lease_spec.rb#20
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/discovery.rb#1
module KubeDSL::DSL::Discovery; end

# source://kube-dsl//lib/kube-dsl/dsl/discovery/v1.rb#1
module KubeDSL::DSL::Discovery::V1; end

# source://kube-dsl//lib/kube-dsl/dsl/discovery/v1/endpoint.rb#7
class KubeDSL::DSL::Discovery::V1::Endpoint < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def addresses(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def conditions(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def conditions_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.void)).returns(::KubeDSL::KeyValueFields) }
  def deprecated_topology(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def hints(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def hints_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def hostname(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/discovery/v1/endpoint.rb#39
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def node_name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/discovery/v1/endpoint.rb#26
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def target_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def target_ref_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def zone(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/discovery/v1/endpoint_conditions.rb#7
class KubeDSL::DSL::Discovery::V1::EndpointConditions < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/discovery/v1/endpoint_conditions.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def ready(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/discovery/v1/endpoint_conditions.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def serving(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def terminating(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/discovery/v1/endpoint_hints.rb#7
class KubeDSL::DSL::Discovery::V1::EndpointHints < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def for_zone(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def for_zones; end

  # source://kube-dsl//lib/kube-dsl/dsl/discovery/v1/endpoint_hints.rb#18
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/discovery/v1/endpoint_hints.rb#12
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/discovery/v1/endpoint_port.rb#7
class KubeDSL::DSL::Discovery::V1::EndpointPort < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def app_protocol(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/discovery/v1/endpoint_port.rb#27
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def port(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def protocol(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/discovery/v1/endpoint_port.rb#18
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/discovery/v1/endpoint_slice.rb#7
class KubeDSL::DSL::Discovery::V1::EndpointSlice < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def address_type(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def endpoint(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def endpoints; end

  # source://kube-dsl//lib/kube-dsl/dsl/discovery/v1/endpoint_slice.rb#29
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def port(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def ports; end

  # source://kube-dsl//lib/kube-dsl/dsl/discovery/v1/endpoint_slice.rb#18
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/discovery/v1/endpoint_slice_list.rb#7
class KubeDSL::DSL::Discovery::V1::EndpointSliceList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/discovery/v1/endpoint_slice_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/discovery/v1/endpoint_slice_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/discovery/v1/for_zone.rb#7
class KubeDSL::DSL::Discovery::V1::ForZone < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/discovery/v1/for_zone.rb#18
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/discovery/v1/for_zone.rb#12
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/discovery/v1beta1.rb#1
module KubeDSL::DSL::Discovery::V1beta1; end

# source://kube-dsl//lib/kube-dsl/dsl/discovery/v1beta1/endpoint.rb#7
class KubeDSL::DSL::Discovery::V1beta1::Endpoint < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def addresses(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def conditions(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def conditions_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def hints(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def hints_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def hostname(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/discovery/v1beta1/endpoint.rb#36
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def node_name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/discovery/v1beta1/endpoint.rb#24
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def target_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def target_ref_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.void)).returns(::KubeDSL::KeyValueFields) }
  def topology(&block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/discovery/v1beta1/endpoint_conditions.rb#7
class KubeDSL::DSL::Discovery::V1beta1::EndpointConditions < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/discovery/v1beta1/endpoint_conditions.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def ready(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/discovery/v1beta1/endpoint_conditions.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def serving(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def terminating(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/discovery/v1beta1/endpoint_hints.rb#7
class KubeDSL::DSL::Discovery::V1beta1::EndpointHints < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def for_zone(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def for_zones; end

  # source://kube-dsl//lib/kube-dsl/dsl/discovery/v1beta1/endpoint_hints.rb#18
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/discovery/v1beta1/endpoint_hints.rb#12
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/discovery/v1beta1/endpoint_port.rb#7
class KubeDSL::DSL::Discovery::V1beta1::EndpointPort < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def app_protocol(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/discovery/v1beta1/endpoint_port.rb#27
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def port(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def protocol(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/discovery/v1beta1/endpoint_port.rb#18
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/discovery/v1beta1/endpoint_slice.rb#7
class KubeDSL::DSL::Discovery::V1beta1::EndpointSlice < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def address_type(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def endpoint(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def endpoints; end

  # source://kube-dsl//lib/kube-dsl/dsl/discovery/v1beta1/endpoint_slice.rb#29
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def port(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def ports; end

  # source://kube-dsl//lib/kube-dsl/dsl/discovery/v1beta1/endpoint_slice.rb#18
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/discovery/v1beta1/endpoint_slice_list.rb#7
class KubeDSL::DSL::Discovery::V1beta1::EndpointSliceList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/discovery/v1beta1/endpoint_slice_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/discovery/v1beta1/endpoint_slice_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/discovery/v1beta1/for_zone.rb#7
class KubeDSL::DSL::Discovery::V1beta1::ForZone < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/discovery/v1beta1/for_zone.rb#18
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/discovery/v1beta1/for_zone.rb#12
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/events.rb#1
module KubeDSL::DSL::Events; end

# source://kube-dsl//lib/kube-dsl/dsl/events/v1.rb#1
module KubeDSL::DSL::Events::V1; end

# source://kube-dsl//lib/kube-dsl/dsl/events/v1/event.rb#7
class KubeDSL::DSL::Events::V1::Event < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def action(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def deprecated_count(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def deprecated_first_timestamp(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def deprecated_last_timestamp(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def deprecated_source(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def deprecated_source_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def event_time(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/events/v1/event.rb#62
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def note(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def regarding(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def regarding_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def related(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def related_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def reporting_controller(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def reporting_instance(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/events/v1/event.rb#40
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def series(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def series_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/events/v1/event_list.rb#7
class KubeDSL::DSL::Events::V1::EventList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/events/v1/event_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/events/v1/event_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/events/v1/event_series.rb#7
class KubeDSL::DSL::Events::V1::EventSeries < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def count(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/events/v1/event_series.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def last_observed_time(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/events/v1/event_series.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/events/v1beta1.rb#1
module KubeDSL::DSL::Events::V1beta1; end

# source://kube-dsl//lib/kube-dsl/dsl/events/v1beta1/event.rb#7
class KubeDSL::DSL::Events::V1beta1::Event < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def action(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def deprecated_count(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def deprecated_first_timestamp(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def deprecated_last_timestamp(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def deprecated_source(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def deprecated_source_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def event_time(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/events/v1beta1/event.rb#62
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def note(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def regarding(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def regarding_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def related(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def related_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def reporting_controller(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def reporting_instance(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/events/v1beta1/event.rb#40
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def series(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def series_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/events/v1beta1/event_list.rb#7
class KubeDSL::DSL::Events::V1beta1::EventList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/events/v1beta1/event_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/events/v1beta1/event_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/events/v1beta1/event_series.rb#7
class KubeDSL::DSL::Events::V1beta1::EventSeries < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def count(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/events/v1beta1/event_series.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def last_observed_time(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/events/v1beta1/event_series.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol.rb#1
module KubeDSL::DSL::Flowcontrol; end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1.rb#1
module KubeDSL::DSL::Flowcontrol::V1beta1; end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/flow_distinguisher_method.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta1::FlowDistinguisherMethod < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/flow_distinguisher_method.rb#18
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/flow_distinguisher_method.rb#12
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/flow_schema.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta1::FlowSchema < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/flow_schema.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/flow_schema.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def status(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/flow_schema_condition.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta1::FlowSchemaCondition < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/flow_schema_condition.rb#30
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def last_transition_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/flow_schema_condition.rb#20
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def status(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/flow_schema_list.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta1::FlowSchemaList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/flow_schema_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/flow_schema_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/flow_schema_spec.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta1::FlowSchemaSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def distinguisher_method(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def distinguisher_method_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/flow_schema_spec.rb#27
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def matching_precedence(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def priority_level_configuration(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def priority_level_configuration_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def rule(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def rules; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/flow_schema_spec.rb#18
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/flow_schema_status.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta1::FlowSchemaStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def condition(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def conditions; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/flow_schema_status.rb#18
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/flow_schema_status.rb#12
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/group_subject.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta1::GroupSubject < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/group_subject.rb#18
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/group_subject.rb#12
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/limit_response.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta1::LimitResponse < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/limit_response.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def queuing(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def queuing_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/limit_response.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/limited_priority_level_configuration.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta1::LimitedPriorityLevelConfiguration < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def assured_concurrency_shares(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/limited_priority_level_configuration.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def limit_response(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def limit_response_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/limited_priority_level_configuration.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/non_resource_policy_rule.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta1::NonResourcePolicyRule < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/non_resource_policy_rule.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def non_resource_ur_ls(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/non_resource_policy_rule.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def verbs(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/policy_rules_with_subjects.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta1::PolicyRulesWithSubjects < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/policy_rules_with_subjects.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def non_resource_rule(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def non_resource_rules; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def resource_rule(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def resource_rules; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/policy_rules_with_subjects.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def subject(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def subjects; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/priority_level_configuration.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta1::PriorityLevelConfiguration < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/priority_level_configuration.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/priority_level_configuration.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def status(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/priority_level_configuration_condition.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta1::PriorityLevelConfigurationCondition < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/priority_level_configuration_condition.rb#30
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def last_transition_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/priority_level_configuration_condition.rb#20
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def status(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/priority_level_configuration_list.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta1::PriorityLevelConfigurationList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/priority_level_configuration_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/priority_level_configuration_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/priority_level_configuration_reference.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta1::PriorityLevelConfigurationReference < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/priority_level_configuration_reference.rb#18
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/priority_level_configuration_reference.rb#12
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/priority_level_configuration_spec.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta1::PriorityLevelConfigurationSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/priority_level_configuration_spec.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def limited(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def limited_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/priority_level_configuration_spec.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/priority_level_configuration_status.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta1::PriorityLevelConfigurationStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def condition(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def conditions; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/priority_level_configuration_status.rb#18
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/priority_level_configuration_status.rb#12
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/queuing_configuration.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta1::QueuingConfiguration < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def hand_size(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/queuing_configuration.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def queue_length_limit(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def queues(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/queuing_configuration.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/resource_policy_rule.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta1::ResourcePolicyRule < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def api_groups(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def cluster_scope(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/resource_policy_rule.rb#30
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def namespaces(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def resources(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/resource_policy_rule.rb#20
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def verbs(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/service_account_subject.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta1::ServiceAccountSubject < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/service_account_subject.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def namespace(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/service_account_subject.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/subject.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta1::Subject < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def group(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def group_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def kind(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/subject.rb#27
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/subject.rb#18
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def service_account(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def service_account_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def user(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def user_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/user_subject.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta1::UserSubject < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/user_subject.rb#18
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta1/user_subject.rb#12
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2.rb#1
module KubeDSL::DSL::Flowcontrol::V1beta2; end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/flow_distinguisher_method.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta2::FlowDistinguisherMethod < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/flow_distinguisher_method.rb#18
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/flow_distinguisher_method.rb#12
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/flow_schema.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta2::FlowSchema < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/flow_schema.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/flow_schema.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def status(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/flow_schema_condition.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta2::FlowSchemaCondition < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/flow_schema_condition.rb#30
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def last_transition_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/flow_schema_condition.rb#20
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def status(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/flow_schema_list.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta2::FlowSchemaList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/flow_schema_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/flow_schema_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/flow_schema_spec.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta2::FlowSchemaSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def distinguisher_method(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def distinguisher_method_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/flow_schema_spec.rb#27
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def matching_precedence(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def priority_level_configuration(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def priority_level_configuration_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def rule(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def rules; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/flow_schema_spec.rb#18
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/flow_schema_status.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta2::FlowSchemaStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def condition(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def conditions; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/flow_schema_status.rb#18
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/flow_schema_status.rb#12
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/group_subject.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta2::GroupSubject < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/group_subject.rb#18
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/group_subject.rb#12
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/limit_response.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta2::LimitResponse < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/limit_response.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def queuing(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def queuing_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/limit_response.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/limited_priority_level_configuration.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta2::LimitedPriorityLevelConfiguration < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def assured_concurrency_shares(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/limited_priority_level_configuration.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def limit_response(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def limit_response_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/limited_priority_level_configuration.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/non_resource_policy_rule.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta2::NonResourcePolicyRule < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/non_resource_policy_rule.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def non_resource_ur_ls(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/non_resource_policy_rule.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def verbs(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/policy_rules_with_subjects.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta2::PolicyRulesWithSubjects < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/policy_rules_with_subjects.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def non_resource_rule(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def non_resource_rules; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def resource_rule(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def resource_rules; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/policy_rules_with_subjects.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def subject(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def subjects; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/priority_level_configuration.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta2::PriorityLevelConfiguration < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/priority_level_configuration.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/priority_level_configuration.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def status(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/priority_level_configuration_condition.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta2::PriorityLevelConfigurationCondition < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/priority_level_configuration_condition.rb#30
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def last_transition_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/priority_level_configuration_condition.rb#20
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def status(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/priority_level_configuration_list.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta2::PriorityLevelConfigurationList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/priority_level_configuration_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/priority_level_configuration_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/priority_level_configuration_reference.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta2::PriorityLevelConfigurationReference < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/priority_level_configuration_reference.rb#18
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/priority_level_configuration_reference.rb#12
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/priority_level_configuration_spec.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta2::PriorityLevelConfigurationSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/priority_level_configuration_spec.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def limited(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def limited_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/priority_level_configuration_spec.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/priority_level_configuration_status.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta2::PriorityLevelConfigurationStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def condition(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def conditions; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/priority_level_configuration_status.rb#18
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/priority_level_configuration_status.rb#12
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/queuing_configuration.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta2::QueuingConfiguration < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def hand_size(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/queuing_configuration.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def queue_length_limit(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def queues(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/queuing_configuration.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/resource_policy_rule.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta2::ResourcePolicyRule < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def api_groups(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def cluster_scope(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/resource_policy_rule.rb#30
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def namespaces(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def resources(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/resource_policy_rule.rb#20
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def verbs(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/service_account_subject.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta2::ServiceAccountSubject < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/service_account_subject.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def namespace(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/service_account_subject.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/subject.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta2::Subject < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def group(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def group_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def kind(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/subject.rb#27
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/subject.rb#18
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def service_account(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def service_account_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def user(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def user_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/user_subject.rb#7
class KubeDSL::DSL::Flowcontrol::V1beta2::UserSubject < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/user_subject.rb#18
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1beta2/user_subject.rb#12
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/meta.rb#1
module KubeDSL::DSL::Meta; end

# source://kube-dsl//lib/kube-dsl/dsl/meta/v1.rb#1
module KubeDSL::DSL::Meta::V1; end

# source://kube-dsl//lib/kube-dsl/dsl/meta/v1/api_group.rb#7
class KubeDSL::DSL::Meta::V1::APIGroup < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/api_group.rb#29
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def preferred_version(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def preferred_version_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/api_group.rb#18
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def server_address_by_client_cidr(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def server_address_by_client_cidrs; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def version(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def versions; end
end

# source://kube-dsl//lib/kube-dsl/dsl/meta/v1/api_group_list.rb#7
class KubeDSL::DSL::Meta::V1::APIGroupList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def group(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def groups; end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/api_group_list.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/api_group_list.rb#12
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/meta/v1/api_resource.rb#7
class KubeDSL::DSL::Meta::V1::APIResource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def categories(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def group(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def kind(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/api_resource.rb#45
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def namespaced(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/api_resource.rb#30
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def short_names(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def singular_name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def storage_version_hash(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def verbs(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def version(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/meta/v1/api_resource_list.rb#7
class KubeDSL::DSL::Meta::V1::APIResourceList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def group_version(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/api_resource_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def resource(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def resources; end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/api_resource_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/meta/v1/api_versions.rb#7
class KubeDSL::DSL::Meta::V1::APIVersions < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/api_versions.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/api_versions.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def server_address_by_client_cidr(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def server_address_by_client_cidrs; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def versions(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/meta/v1/condition.rb#7
class KubeDSL::DSL::Meta::V1::Condition < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/condition.rb#33
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def last_transition_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def observed_generation(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/condition.rb#22
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def status(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/meta/v1/delete_options.rb#7
class KubeDSL::DSL::Meta::V1::DeleteOptions < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def api_version(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def dry_run(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def grace_period_seconds(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/delete_options.rb#34
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def orphan_dependents(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def preconditions(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def preconditions_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def propagation_policy(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/delete_options.rb#22
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/meta/v1/group_version_for_discovery.rb#7
class KubeDSL::DSL::Meta::V1::GroupVersionForDiscovery < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def group_version(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/group_version_for_discovery.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/group_version_for_discovery.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def version(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/meta/v1/label_selector.rb#7
class KubeDSL::DSL::Meta::V1::LabelSelector < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/label_selector.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def match_expression(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def match_expressions; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.void)).returns(::KubeDSL::KeyValueFields) }
  def match_labels(&block); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/label_selector.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/meta/v1/label_selector_requirement.rb#7
class KubeDSL::DSL::Meta::V1::LabelSelectorRequirement < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def key(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/label_selector_requirement.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def operator(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/label_selector_requirement.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def values(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/meta/v1/list_meta.rb#7
class KubeDSL::DSL::Meta::V1::ListMeta < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def continue(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/list_meta.rb#27
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def remaining_item_count(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def resource_version(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def self_link(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/list_meta.rb#18
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/meta/v1/managed_fields_entry.rb#7
class KubeDSL::DSL::Meta::V1::ManagedFieldsEntry < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def api_version(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def fields_type(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def fields_v1(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/managed_fields_entry.rb#36
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def manager(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def operation(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/managed_fields_entry.rb#24
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def subresource(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def time(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/meta/v1/object_meta.rb#7
class KubeDSL::DSL::Meta::V1::ObjectMeta < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.void)).returns(::KubeDSL::KeyValueFields) }
  def annotations(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def cluster_name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def creation_timestamp(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def deletion_grace_period_seconds(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def deletion_timestamp(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def finalizers(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def generate_name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def generation(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/object_meta.rb#63
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.void)).returns(::KubeDSL::KeyValueFields) }
  def labels(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def managed_field(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def managed_fields; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def namespace(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def owner_reference(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def owner_references; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def resource_version(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def self_link(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/object_meta.rb#42
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def uid(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/meta/v1/owner_reference.rb#7
class KubeDSL::DSL::Meta::V1::OwnerReference < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def api_version(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def block_owner_deletion(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def controller(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def kind(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/owner_reference.rb#33
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/owner_reference.rb#22
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def uid(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/meta/v1/preconditions.rb#7
class KubeDSL::DSL::Meta::V1::Preconditions < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/preconditions.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def resource_version(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/preconditions.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def uid(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/meta/v1/server_address_by_client_cidr.rb#7
class KubeDSL::DSL::Meta::V1::ServerAddressByClientCIDR < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def client_cidr(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/server_address_by_client_cidr.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/server_address_by_client_cidr.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def server_address(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/meta/v1/status.rb#7
class KubeDSL::DSL::Meta::V1::Status < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def code(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def details(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def details_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/status.rb#35
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/status.rb#22
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def status(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/meta/v1/status_cause.rb#7
class KubeDSL::DSL::Meta::V1::StatusCause < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def field(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/status_cause.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/status_cause.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/meta/v1/status_details.rb#7
class KubeDSL::DSL::Meta::V1::StatusDetails < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def cause(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def causes; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def group(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def kind(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/status_details.rb#33
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def retry_after_seconds(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/status_details.rb#22
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def uid(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/meta/v1/watch_event.rb#7
class KubeDSL::DSL::Meta::V1::WatchEvent < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/watch_event.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def object(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/watch_event.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/networking.rb#1
module KubeDSL::DSL::Networking; end

# source://kube-dsl//lib/kube-dsl/dsl/networking/v1.rb#1
module KubeDSL::DSL::Networking::V1; end

# source://kube-dsl//lib/kube-dsl/dsl/networking/v1/http_ingress_path.rb#7
class KubeDSL::DSL::Networking::V1::HTTPIngressPath < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def backend(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def backend_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/http_ingress_path.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def path(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def path_type(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/http_ingress_path.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/networking/v1/http_ingress_rule_value.rb#7
class KubeDSL::DSL::Networking::V1::HTTPIngressRuleValue < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/http_ingress_rule_value.rb#18
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def path(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def paths; end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/http_ingress_rule_value.rb#12
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ip_block.rb#7
class KubeDSL::DSL::Networking::V1::IPBlock < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def cidr(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def except(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ip_block.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ip_block.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress.rb#7
class KubeDSL::DSL::Networking::V1::Ingress < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def status(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress_backend.rb#7
class KubeDSL::DSL::Networking::V1::IngressBackend < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress_backend.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def resource(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def resource_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress_backend.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def service(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def service_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress_class.rb#7
class KubeDSL::DSL::Networking::V1::IngressClass < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress_class.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress_class.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress_class_list.rb#7
class KubeDSL::DSL::Networking::V1::IngressClassList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress_class_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress_class_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress_class_parameters_reference.rb#7
class KubeDSL::DSL::Networking::V1::IngressClassParametersReference < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def api_group(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def kind(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress_class_parameters_reference.rb#30
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def namespace(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def scope(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress_class_parameters_reference.rb#20
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress_class_spec.rb#7
class KubeDSL::DSL::Networking::V1::IngressClassSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def controller(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress_class_spec.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def parameters(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def parameters_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress_class_spec.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress_list.rb#7
class KubeDSL::DSL::Networking::V1::IngressList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress_rule.rb#7
class KubeDSL::DSL::Networking::V1::IngressRule < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def host(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def http(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def http_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress_rule.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress_rule.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress_service_backend.rb#7
class KubeDSL::DSL::Networking::V1::IngressServiceBackend < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress_service_backend.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def port(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def port_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress_service_backend.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress_spec.rb#7
class KubeDSL::DSL::Networking::V1::IngressSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def default_backend(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def default_backend_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def ingress_class_name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress_spec.rb#27
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def rule(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def rules; end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress_spec.rb#18
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def tls(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def tlses; end
end

# source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress_status.rb#7
class KubeDSL::DSL::Networking::V1::IngressStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress_status.rb#18
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def load_balancer(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def load_balancer_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress_status.rb#12
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress_tls.rb#7
class KubeDSL::DSL::Networking::V1::IngressTLS < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def hosts(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress_tls.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def secret_name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ingress_tls.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/networking/v1/network_policy.rb#7
class KubeDSL::DSL::Networking::V1::NetworkPolicy < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/network_policy.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/network_policy.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/networking/v1/network_policy_egress_rule.rb#7
class KubeDSL::DSL::Networking::V1::NetworkPolicyEgressRule < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/network_policy_egress_rule.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def port(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def ports; end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/network_policy_egress_rule.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def to(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def tos; end
end

# source://kube-dsl//lib/kube-dsl/dsl/networking/v1/network_policy_ingress_rule.rb#7
class KubeDSL::DSL::Networking::V1::NetworkPolicyIngressRule < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def from(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def froms; end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/network_policy_ingress_rule.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def port(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def ports; end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/network_policy_ingress_rule.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/networking/v1/network_policy_list.rb#7
class KubeDSL::DSL::Networking::V1::NetworkPolicyList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/network_policy_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/network_policy_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/networking/v1/network_policy_peer.rb#7
class KubeDSL::DSL::Networking::V1::NetworkPolicyPeer < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def ip_block(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def ip_block_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/network_policy_peer.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def namespace_selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def namespace_selector_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def pod_selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def pod_selector_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/network_policy_peer.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/networking/v1/network_policy_port.rb#7
class KubeDSL::DSL::Networking::V1::NetworkPolicyPort < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def end_port(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/network_policy_port.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def port(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def protocol(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/network_policy_port.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/networking/v1/network_policy_spec.rb#7
class KubeDSL::DSL::Networking::V1::NetworkPolicySpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def egress(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def egresses; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def ingress(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def ingresses; end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/network_policy_spec.rb#27
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def pod_selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def pod_selector_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def policy_types(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/network_policy_spec.rb#18
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/networking/v1/service_backend_port.rb#7
class KubeDSL::DSL::Networking::V1::ServiceBackendPort < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/service_backend_port.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def number(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/service_backend_port.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/node.rb#1
module KubeDSL::DSL::Node; end

# source://kube-dsl//lib/kube-dsl/dsl/node/v1.rb#1
module KubeDSL::DSL::Node::V1; end

# source://kube-dsl//lib/kube-dsl/dsl/node/v1/overhead.rb#7
class KubeDSL::DSL::Node::V1::Overhead < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/node/v1/overhead.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/node/v1/overhead.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def status(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/node/v1/runtime_class.rb#7
class KubeDSL::DSL::Node::V1::RuntimeClass < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/node/v1/runtime_class.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/node/v1/runtime_class.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def status(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/node/v1/runtime_class_list.rb#7
class KubeDSL::DSL::Node::V1::RuntimeClassList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/node/v1/runtime_class_list.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/node/v1/runtime_class_list.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def status(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/node/v1/scheduling.rb#7
class KubeDSL::DSL::Node::V1::Scheduling < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/node/v1/scheduling.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/node/v1/scheduling.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def status(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/node/v1alpha1.rb#1
module KubeDSL::DSL::Node::V1alpha1; end

# source://kube-dsl//lib/kube-dsl/dsl/node/v1alpha1/overhead.rb#7
class KubeDSL::DSL::Node::V1alpha1::Overhead < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/node/v1alpha1/overhead.rb#18
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.void)).returns(::KubeDSL::KeyValueFields) }
  def pod_fixed(&block); end

  # source://kube-dsl//lib/kube-dsl/dsl/node/v1alpha1/overhead.rb#12
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/node/v1alpha1/runtime_class.rb#7
class KubeDSL::DSL::Node::V1alpha1::RuntimeClass < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/node/v1alpha1/runtime_class.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/node/v1alpha1/runtime_class.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/node/v1alpha1/runtime_class_list.rb#7
class KubeDSL::DSL::Node::V1alpha1::RuntimeClassList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/node/v1alpha1/runtime_class_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/node/v1alpha1/runtime_class_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/node/v1alpha1/runtime_class_spec.rb#7
class KubeDSL::DSL::Node::V1alpha1::RuntimeClassSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/node/v1alpha1/runtime_class_spec.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def overhead(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def overhead_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def runtime_handler(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def scheduling(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def scheduling_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/node/v1alpha1/runtime_class_spec.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/node/v1alpha1/scheduling.rb#7
class KubeDSL::DSL::Node::V1alpha1::Scheduling < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/node/v1alpha1/scheduling.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.void)).returns(::KubeDSL::KeyValueFields) }
  def node_selector(&block); end

  # source://kube-dsl//lib/kube-dsl/dsl/node/v1alpha1/scheduling.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def toleration(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def tolerations; end
end

# source://kube-dsl//lib/kube-dsl/dsl/node/v1beta1.rb#1
module KubeDSL::DSL::Node::V1beta1; end

# source://kube-dsl//lib/kube-dsl/dsl/node/v1beta1/overhead.rb#7
class KubeDSL::DSL::Node::V1beta1::Overhead < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/node/v1beta1/overhead.rb#18
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.void)).returns(::KubeDSL::KeyValueFields) }
  def pod_fixed(&block); end

  # source://kube-dsl//lib/kube-dsl/dsl/node/v1beta1/overhead.rb#12
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/node/v1beta1/runtime_class.rb#7
class KubeDSL::DSL::Node::V1beta1::RuntimeClass < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def handler(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/node/v1beta1/runtime_class.rb#29
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def overhead(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def overhead_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def scheduling(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def scheduling_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/node/v1beta1/runtime_class.rb#18
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/node/v1beta1/runtime_class_list.rb#7
class KubeDSL::DSL::Node::V1beta1::RuntimeClassList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/node/v1beta1/runtime_class_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/node/v1beta1/runtime_class_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/node/v1beta1/scheduling.rb#7
class KubeDSL::DSL::Node::V1beta1::Scheduling < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/node/v1beta1/scheduling.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.void)).returns(::KubeDSL::KeyValueFields) }
  def node_selector(&block); end

  # source://kube-dsl//lib/kube-dsl/dsl/node/v1beta1/scheduling.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def toleration(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def tolerations; end
end

# source://kube-dsl//lib/kube-dsl/dsl/pkg.rb#1
module KubeDSL::DSL::Pkg; end

# source://kube-dsl//lib/kube-dsl/dsl/pkg/version.rb#1
module KubeDSL::DSL::Pkg::Version; end

# source://kube-dsl//lib/kube-dsl/dsl/pkg/version/info.rb#7
class KubeDSL::DSL::Pkg::Version::Info < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def build_date(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def compiler(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def git_commit(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def git_tree_state(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def git_version(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def go_version(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/pkg/version/info.rb#42
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def major(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def minor(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def platform(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/pkg/version/info.rb#28
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/policy.rb#1
module KubeDSL::DSL::Policy; end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1.rb#1
module KubeDSL::DSL::Policy::V1; end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1/eviction.rb#7
class KubeDSL::DSL::Policy::V1::Eviction < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def delete_options(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def delete_options_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1/eviction.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1/eviction.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1/pod_disruption_budget.rb#7
class KubeDSL::DSL::Policy::V1::PodDisruptionBudget < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1/pod_disruption_budget.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1/pod_disruption_budget.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def status(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1/pod_disruption_budget_list.rb#7
class KubeDSL::DSL::Policy::V1::PodDisruptionBudgetList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1/pod_disruption_budget_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1/pod_disruption_budget_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1/pod_disruption_budget_spec.rb#7
class KubeDSL::DSL::Policy::V1::PodDisruptionBudgetSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1/pod_disruption_budget_spec.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def max_unavailable(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def min_available(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def selector_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1/pod_disruption_budget_spec.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1/pod_disruption_budget_status.rb#7
class KubeDSL::DSL::Policy::V1::PodDisruptionBudgetStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def condition(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def conditions; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def current_healthy(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def desired_healthy(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.void)).returns(::KubeDSL::KeyValueFields) }
  def disrupted_pods(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def disruptions_allowed(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def expected_pods(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1/pod_disruption_budget_status.rb#36
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def observed_generation(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1/pod_disruption_budget_status.rb#24
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1.rb#1
module KubeDSL::DSL::Policy::V1beta1; end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/allowed_csi_driver.rb#7
class KubeDSL::DSL::Policy::V1beta1::AllowedCSIDriver < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/allowed_csi_driver.rb#18
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/allowed_csi_driver.rb#12
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/allowed_flex_volume.rb#7
class KubeDSL::DSL::Policy::V1beta1::AllowedFlexVolume < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def driver(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/allowed_flex_volume.rb#18
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/allowed_flex_volume.rb#12
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/allowed_host_path.rb#7
class KubeDSL::DSL::Policy::V1beta1::AllowedHostPath < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/allowed_host_path.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def path_prefix(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def read_only(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/allowed_host_path.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/fs_group_strategy_options.rb#7
class KubeDSL::DSL::Policy::V1beta1::FSGroupStrategyOptions < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/fs_group_strategy_options.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def range(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def ranges; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def rule(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/fs_group_strategy_options.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/host_port_range.rb#7
class KubeDSL::DSL::Policy::V1beta1::HostPortRange < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/host_port_range.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def max(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def min(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/host_port_range.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/id_range.rb#7
class KubeDSL::DSL::Policy::V1beta1::IDRange < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/id_range.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def max(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def min(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/id_range.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/pod_disruption_budget.rb#7
class KubeDSL::DSL::Policy::V1beta1::PodDisruptionBudget < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/pod_disruption_budget.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/pod_disruption_budget.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def status(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/pod_disruption_budget_list.rb#7
class KubeDSL::DSL::Policy::V1beta1::PodDisruptionBudgetList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/pod_disruption_budget_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/pod_disruption_budget_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/pod_disruption_budget_spec.rb#7
class KubeDSL::DSL::Policy::V1beta1::PodDisruptionBudgetSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/pod_disruption_budget_spec.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def max_unavailable(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def min_available(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def selector_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/pod_disruption_budget_spec.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/pod_disruption_budget_status.rb#7
class KubeDSL::DSL::Policy::V1beta1::PodDisruptionBudgetStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def condition(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def conditions; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def current_healthy(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def desired_healthy(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.void)).returns(::KubeDSL::KeyValueFields) }
  def disrupted_pods(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def disruptions_allowed(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def expected_pods(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/pod_disruption_budget_status.rb#36
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def observed_generation(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/pod_disruption_budget_status.rb#24
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/pod_security_policy.rb#7
class KubeDSL::DSL::Policy::V1beta1::PodSecurityPolicy < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/pod_security_policy.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/pod_security_policy.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/pod_security_policy_list.rb#7
class KubeDSL::DSL::Policy::V1beta1::PodSecurityPolicyList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/pod_security_policy_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/pod_security_policy_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/pod_security_policy_spec.rb#7
class KubeDSL::DSL::Policy::V1beta1::PodSecurityPolicySpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def allow_privilege_escalation(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def allowed_capabilities(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def allowed_csi_driver(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def allowed_csi_drivers; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def allowed_flex_volume(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def allowed_flex_volumes; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def allowed_host_path(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def allowed_host_paths; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def allowed_proc_mount_types(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def allowed_unsafe_sysctls(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def default_add_capabilities(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def default_allow_privilege_escalation(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def forbidden_sysctls(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def fs_group(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def fs_group_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def host_ipc(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def host_network(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def host_pid(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def host_port(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def host_ports; end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/pod_security_policy_spec.rb#87
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def privileged(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def read_only_root_filesystem(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def required_drop_capabilities(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def run_as_group(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def run_as_group_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def run_as_user(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def run_as_user_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def runtime_class(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def runtime_class_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def se_linux(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def se_linux_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/pod_security_policy_spec.rb#58
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def supplemental_groups(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def supplemental_groups_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def volumes(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/run_as_group_strategy_options.rb#7
class KubeDSL::DSL::Policy::V1beta1::RunAsGroupStrategyOptions < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/run_as_group_strategy_options.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def range(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def ranges; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def rule(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/run_as_group_strategy_options.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/run_as_user_strategy_options.rb#7
class KubeDSL::DSL::Policy::V1beta1::RunAsUserStrategyOptions < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/run_as_user_strategy_options.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def range(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def ranges; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def rule(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/run_as_user_strategy_options.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/runtime_class_strategy_options.rb#7
class KubeDSL::DSL::Policy::V1beta1::RuntimeClassStrategyOptions < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def allowed_runtime_class_names(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def default_runtime_class_name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/runtime_class_strategy_options.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/runtime_class_strategy_options.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/se_linux_strategy_options.rb#7
class KubeDSL::DSL::Policy::V1beta1::SELinuxStrategyOptions < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/se_linux_strategy_options.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def rule(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def se_linux_options(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def se_linux_options_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/se_linux_strategy_options.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/supplemental_groups_strategy_options.rb#7
class KubeDSL::DSL::Policy::V1beta1::SupplementalGroupsStrategyOptions < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/supplemental_groups_strategy_options.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def range(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def ranges; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def rule(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/supplemental_groups_strategy_options.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/rbac.rb#1
module KubeDSL::DSL::Rbac; end

# source://kube-dsl//lib/kube-dsl/dsl/rbac/v1.rb#1
module KubeDSL::DSL::Rbac::V1; end

# source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/aggregation_rule.rb#7
class KubeDSL::DSL::Rbac::V1::AggregationRule < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def cluster_role_selector(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def cluster_role_selectors; end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/aggregation_rule.rb#18
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/aggregation_rule.rb#12
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/cluster_role.rb#7
class KubeDSL::DSL::Rbac::V1::ClusterRole < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def aggregation_rule(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def aggregation_rule_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/cluster_role.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def rule(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def rules; end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/cluster_role.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/cluster_role_binding.rb#7
class KubeDSL::DSL::Rbac::V1::ClusterRoleBinding < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/cluster_role_binding.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def role_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def role_ref_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/cluster_role_binding.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def subject(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def subjects; end
end

# source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/cluster_role_binding_list.rb#7
class KubeDSL::DSL::Rbac::V1::ClusterRoleBindingList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/cluster_role_binding_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/cluster_role_binding_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/cluster_role_list.rb#7
class KubeDSL::DSL::Rbac::V1::ClusterRoleList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/cluster_role_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/cluster_role_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/policy_rule.rb#7
class KubeDSL::DSL::Rbac::V1::PolicyRule < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def api_groups(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/policy_rule.rb#30
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def non_resource_ur_ls(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def resource_names(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def resources(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/policy_rule.rb#20
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def verbs(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/role.rb#7
class KubeDSL::DSL::Rbac::V1::Role < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/role.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def rule(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def rules; end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/role.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/role_binding.rb#7
class KubeDSL::DSL::Rbac::V1::RoleBinding < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/role_binding.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def role_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def role_ref_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/role_binding.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def subject(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def subjects; end
end

# source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/role_binding_list.rb#7
class KubeDSL::DSL::Rbac::V1::RoleBindingList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/role_binding_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/role_binding_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/role_list.rb#7
class KubeDSL::DSL::Rbac::V1::RoleList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/role_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/role_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/role_ref.rb#7
class KubeDSL::DSL::Rbac::V1::RoleRef < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def api_group(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def kind(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/role_ref.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/role_ref.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/subject.rb#7
class KubeDSL::DSL::Rbac::V1::Subject < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def api_group(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def kind(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/subject.rb#27
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def namespace(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/subject.rb#18
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/scheduling.rb#1
module KubeDSL::DSL::Scheduling; end

# source://kube-dsl//lib/kube-dsl/dsl/scheduling/v1.rb#1
module KubeDSL::DSL::Scheduling::V1; end

# source://kube-dsl//lib/kube-dsl/dsl/scheduling/v1/priority_class.rb#7
class KubeDSL::DSL::Scheduling::V1::PriorityClass < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def description(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def global_default(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/scheduling/v1/priority_class.rb#32
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def preemption_policy(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/scheduling/v1/priority_class.rb#20
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def value(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/scheduling/v1/priority_class_list.rb#7
class KubeDSL::DSL::Scheduling::V1::PriorityClassList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/scheduling/v1/priority_class_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/scheduling/v1/priority_class_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage.rb#1
module KubeDSL::DSL::Storage; end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1.rb#1
module KubeDSL::DSL::Storage::V1; end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1/csi_driver.rb#7
class KubeDSL::DSL::Storage::V1::CSIDriver < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/csi_driver.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/csi_driver.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1/csi_driver_list.rb#7
class KubeDSL::DSL::Storage::V1::CSIDriverList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/csi_driver_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/csi_driver_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1/csi_driver_spec.rb#7
class KubeDSL::DSL::Storage::V1::CSIDriverSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def attach_required(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def fs_group_policy(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/csi_driver_spec.rb#36
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def pod_info_on_mount(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def requires_republish(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/csi_driver_spec.rb#24
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def storage_capacity(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def token_request(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def token_requests; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def volume_lifecycle_modes(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1/csi_node.rb#7
class KubeDSL::DSL::Storage::V1::CSINode < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/csi_node.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/csi_node.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1/csi_node_driver.rb#7
class KubeDSL::DSL::Storage::V1::CSINodeDriver < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def allocatable(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def allocatable_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/csi_node_driver.rb#27
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def node_id(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/csi_node_driver.rb#18
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def topology_keys(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1/csi_node_list.rb#7
class KubeDSL::DSL::Storage::V1::CSINodeList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/csi_node_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/csi_node_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1/csi_node_spec.rb#7
class KubeDSL::DSL::Storage::V1::CSINodeSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def driver(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def drivers; end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/csi_node_spec.rb#18
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/csi_node_spec.rb#12
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1/storage_class.rb#7
class KubeDSL::DSL::Storage::V1::StorageClass < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def allow_volume_expansion(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def allowed_topologies; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def allowed_topology(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/storage_class.rb#41
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def mount_options(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.void)).returns(::KubeDSL::KeyValueFields) }
  def parameters(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def provisioner(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def reclaim_policy(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/storage_class.rb#26
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def volume_binding_mode(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1/storage_class_list.rb#7
class KubeDSL::DSL::Storage::V1::StorageClassList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/storage_class_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/storage_class_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1/token_request.rb#7
class KubeDSL::DSL::Storage::V1::TokenRequest < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def audience(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def expiration_seconds(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/token_request.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/token_request.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1/volume_attachment.rb#7
class KubeDSL::DSL::Storage::V1::VolumeAttachment < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/volume_attachment.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/volume_attachment.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def status(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1/volume_attachment_list.rb#7
class KubeDSL::DSL::Storage::V1::VolumeAttachmentList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/volume_attachment_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/volume_attachment_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1/volume_attachment_source.rb#7
class KubeDSL::DSL::Storage::V1::VolumeAttachmentSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def inline_volume_spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def inline_volume_spec_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/volume_attachment_source.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def persistent_volume_name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/volume_attachment_source.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1/volume_attachment_spec.rb#7
class KubeDSL::DSL::Storage::V1::VolumeAttachmentSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def attacher(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/volume_attachment_spec.rb#24
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def node_name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/volume_attachment_spec.rb#16
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def source(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def source_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1/volume_attachment_status.rb#7
class KubeDSL::DSL::Storage::V1::VolumeAttachmentStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def attach_error(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def attach_error_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def attached(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.void)).returns(::KubeDSL::KeyValueFields) }
  def attachment_metadata(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def detach_error(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def detach_error_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/volume_attachment_status.rb#27
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/volume_attachment_status.rb#18
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1/volume_error.rb#7
class KubeDSL::DSL::Storage::V1::VolumeError < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/volume_error.rb#21
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/volume_error.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def time(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1/volume_node_resources.rb#7
class KubeDSL::DSL::Storage::V1::VolumeNodeResources < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def count(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/volume_node_resources.rb#18
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/volume_node_resources.rb#12
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1alpha1.rb#1
module KubeDSL::DSL::Storage::V1alpha1; end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1alpha1/csi_storage_capacity.rb#7
class KubeDSL::DSL::Storage::V1alpha1::CSIStorageCapacity < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def capacity(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1alpha1/csi_storage_capacity.rb#32
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def maximum_volume_size(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def node_topology(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def node_topology_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1alpha1/csi_storage_capacity.rb#20
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def storage_class_name(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1alpha1/csi_storage_capacity_list.rb#7
class KubeDSL::DSL::Storage::V1alpha1::CSIStorageCapacityList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1alpha1/csi_storage_capacity_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1alpha1/csi_storage_capacity_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1beta1.rb#1
module KubeDSL::DSL::Storage::V1beta1; end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1beta1/csi_storage_capacity.rb#7
class KubeDSL::DSL::Storage::V1beta1::CSIStorageCapacity < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def capacity(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1beta1/csi_storage_capacity.rb#32
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def maximum_volume_size(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def node_topology(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def node_topology_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1beta1/csi_storage_capacity.rb#20
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def storage_class_name(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1beta1/csi_storage_capacity_list.rb#7
class KubeDSL::DSL::Storage::V1beta1::CSIStorageCapacityList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1beta1/csi_storage_capacity_list.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1beta1/csi_storage_capacity_list.rb#14
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1.rb#1
module KubeDSL::DSL::V1; end

# source://kube-dsl//lib/kube-dsl/dsl/v1/aws_elastic_block_store_volume_source.rb#6
class KubeDSL::DSL::V1::AWSElasticBlockStoreVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def fs_type(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/aws_elastic_block_store_volume_source.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def partition(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def read_only(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/aws_elastic_block_store_volume_source.rb#17
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def volume_id(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/affinity.rb#6
class KubeDSL::DSL::V1::Affinity < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/affinity.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def node_affinity(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def node_affinity_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def pod_affinity(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def pod_affinity_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def pod_anti_affinity(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def pod_anti_affinity_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/affinity.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/attached_volume.rb#6
class KubeDSL::DSL::V1::AttachedVolume < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def device_path(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/attached_volume.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/attached_volume.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/azure_disk_volume_source.rb#6
class KubeDSL::DSL::V1::AzureDiskVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def caching_mode(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def disk_name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def disk_uri(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def fs_type(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def kind(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/azure_disk_volume_source.rb#32
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def read_only(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/azure_disk_volume_source.rb#21
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/azure_file_persistent_volume_source.rb#6
class KubeDSL::DSL::V1::AzureFilePersistentVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/azure_file_persistent_volume_source.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def read_only(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def secret_name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def secret_namespace(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/azure_file_persistent_volume_source.rb#17
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def share_name(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/azure_file_volume_source.rb#6
class KubeDSL::DSL::V1::AzureFileVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/azure_file_volume_source.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def read_only(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def secret_name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/azure_file_volume_source.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def share_name(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/binding.rb#6
class KubeDSL::DSL::V1::Binding < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/binding.rb#22
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/binding.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def target(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def target_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/csi_persistent_volume_source.rb#6
class KubeDSL::DSL::V1::CSIPersistentVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def controller_expand_secret_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def controller_expand_secret_ref_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def controller_publish_secret_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def controller_publish_secret_ref_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def driver(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def fs_type(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/csi_persistent_volume_source.rb#41
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def node_publish_secret_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def node_publish_secret_ref_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def node_stage_secret_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def node_stage_secret_ref_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def read_only(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/csi_persistent_volume_source.rb#27
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.void)).returns(::KubeDSL::KeyValueFields) }
  def volume_attributes(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def volume_handle(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/csi_volume_source.rb#6
class KubeDSL::DSL::V1::CSIVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def driver(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def fs_type(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/csi_volume_source.rb#29
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def node_publish_secret_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def node_publish_secret_ref_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def read_only(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/csi_volume_source.rb#19
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.void)).returns(::KubeDSL::KeyValueFields) }
  def volume_attributes(&block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/capabilities.rb#6
class KubeDSL::DSL::V1::Capabilities < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def add(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def drop(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/capabilities.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/capabilities.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/ceph_fs_persistent_volume_source.rb#6
class KubeDSL::DSL::V1::CephFSPersistentVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/ceph_fs_persistent_volume_source.rb#32
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def monitors(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def path(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def read_only(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def secret_file(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def secret_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def secret_ref_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/ceph_fs_persistent_volume_source.rb#21
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def user(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/ceph_fs_volume_source.rb#6
class KubeDSL::DSL::V1::CephFSVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/ceph_fs_volume_source.rb#32
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def monitors(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def path(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def read_only(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def secret_file(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def secret_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def secret_ref_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/ceph_fs_volume_source.rb#21
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def user(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/cinder_persistent_volume_source.rb#6
class KubeDSL::DSL::V1::CinderPersistentVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def fs_type(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/cinder_persistent_volume_source.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def read_only(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def secret_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def secret_ref_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/cinder_persistent_volume_source.rb#17
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def volume_id(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/cinder_volume_source.rb#6
class KubeDSL::DSL::V1::CinderVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def fs_type(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/cinder_volume_source.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def read_only(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def secret_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def secret_ref_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/cinder_volume_source.rb#17
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def volume_id(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/client_ip_config.rb#6
class KubeDSL::DSL::V1::ClientIPConfig < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/client_ip_config.rb#17
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/client_ip_config.rb#11
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def timeout_seconds(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/component_condition.rb#6
class KubeDSL::DSL::V1::ComponentCondition < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def error(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/component_condition.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/component_condition.rb#17
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def status(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/component_status.rb#6
class KubeDSL::DSL::V1::ComponentStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def condition(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def conditions; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/component_status.rb#22
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/component_status.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/component_status_list.rb#6
class KubeDSL::DSL::V1::ComponentStatusList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/component_status_list.rb#22
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/component_status_list.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/config_map.rb#6
class KubeDSL::DSL::V1::ConfigMap < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.void)).returns(::KubeDSL::KeyValueFields) }
  def binary_data(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.void)).returns(::KubeDSL::KeyValueFields) }
  def data(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def immutable(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/config_map.rb#28
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/config_map.rb#17
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/config_map_env_source.rb#6
class KubeDSL::DSL::V1::ConfigMapEnvSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/config_map_env_source.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def optional(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/config_map_env_source.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/config_map_key_selector.rb#6
class KubeDSL::DSL::V1::ConfigMapKeySelector < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def key(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/config_map_key_selector.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def optional(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/config_map_key_selector.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/config_map_list.rb#6
class KubeDSL::DSL::V1::ConfigMapList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/config_map_list.rb#22
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/config_map_list.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/config_map_node_config_source.rb#6
class KubeDSL::DSL::V1::ConfigMapNodeConfigSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/config_map_node_config_source.rb#29
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def kubelet_config_key(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def namespace(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def resource_version(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/config_map_node_config_source.rb#19
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def uid(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/config_map_projection.rb#6
class KubeDSL::DSL::V1::ConfigMapProjection < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/config_map_projection.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def optional(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/config_map_projection.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/config_map_volume_source.rb#6
class KubeDSL::DSL::V1::ConfigMapVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def default_mode(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/config_map_volume_source.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def optional(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/config_map_volume_source.rb#17
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/container.rb#6
class KubeDSL::DSL::V1::Container < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def args(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def command(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def env(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def env_from(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def env_froms; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def envs; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def image(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def image_pull_policy(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/container.rb#80
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def lifecycle(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def lifecycle_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def liveness_probe(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def liveness_probe_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def port(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def ports; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def readiness_probe(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def readiness_probe_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def resources(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def resources_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def security_context(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def security_context_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/container.rb#53
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def startup_probe(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def startup_probe_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def stdin(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def stdin_once(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def termination_message_path(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def termination_message_policy(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def tty(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def volume_device(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def volume_devices; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def volume_mount(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def volume_mounts; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def working_dir(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/container_image.rb#6
class KubeDSL::DSL::V1::ContainerImage < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/container_image.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def names(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/container_image.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def size_bytes(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/container_port.rb#6
class KubeDSL::DSL::V1::ContainerPort < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def container_port(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def host_ip(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def host_port(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/container_port.rb#29
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def protocol(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/container_port.rb#19
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/container_state.rb#6
class KubeDSL::DSL::V1::ContainerState < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/container_state.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def running(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def running_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/container_state.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def terminated(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def terminated_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def waiting(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def waiting_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/container_state_running.rb#6
class KubeDSL::DSL::V1::ContainerStateRunning < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/container_state_running.rb#17
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/container_state_running.rb#11
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def started_at(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/container_state_terminated.rb#6
class KubeDSL::DSL::V1::ContainerStateTerminated < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def container_id(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def exit_code(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def finished_at(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/container_state_terminated.rb#35
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/container_state_terminated.rb#23
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def signal(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def started_at(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/container_state_waiting.rb#6
class KubeDSL::DSL::V1::ContainerStateWaiting < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/container_state_waiting.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/container_state_waiting.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/container_status.rb#6
class KubeDSL::DSL::V1::ContainerStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def container_id(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def image(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def image_id(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/container_status.rb#41
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def last_state(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def last_state_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def ready(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def restart_count(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/container_status.rb#27
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def started(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def state(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def state_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/daemon_endpoint.rb#6
class KubeDSL::DSL::V1::DaemonEndpoint < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/daemon_endpoint.rb#17
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def port(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/daemon_endpoint.rb#11
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/downward_api_projection.rb#6
class KubeDSL::DSL::V1::DownwardAPIProjection < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/downward_api_projection.rb#17
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/downward_api_projection.rb#11
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/downward_api_volume_file.rb#6
class KubeDSL::DSL::V1::DownwardAPIVolumeFile < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def field_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def field_ref_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/downward_api_volume_file.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def mode(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def path(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def resource_field_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def resource_field_ref_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/downward_api_volume_file.rb#17
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/downward_api_volume_source.rb#6
class KubeDSL::DSL::V1::DownwardAPIVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def default_mode(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/downward_api_volume_source.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/downward_api_volume_source.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/empty_dir_volume_source.rb#6
class KubeDSL::DSL::V1::EmptyDirVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/empty_dir_volume_source.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def medium(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/empty_dir_volume_source.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def size_limit(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/endpoint_address.rb#6
class KubeDSL::DSL::V1::EndpointAddress < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def hostname(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def ip(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/endpoint_address.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def node_name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/endpoint_address.rb#17
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def target_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def target_ref_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/endpoint_port.rb#6
class KubeDSL::DSL::V1::EndpointPort < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def app_protocol(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/endpoint_port.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def port(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def protocol(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/endpoint_port.rb#17
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/endpoint_subset.rb#6
class KubeDSL::DSL::V1::EndpointSubset < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def address(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def addresses; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/endpoint_subset.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def not_ready_address(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def not_ready_addresses; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def port(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def ports; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/endpoint_subset.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/endpoints.rb#6
class KubeDSL::DSL::V1::Endpoints < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/endpoints.rb#22
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/endpoints.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def subset(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def subsets; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/endpoints_list.rb#6
class KubeDSL::DSL::V1::EndpointsList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/endpoints_list.rb#22
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/endpoints_list.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/env_from_source.rb#6
class KubeDSL::DSL::V1::EnvFromSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def config_map_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def config_map_ref_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/env_from_source.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def prefix(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def secret_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def secret_ref_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/env_from_source.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/env_var.rb#6
class KubeDSL::DSL::V1::EnvVar < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/env_var.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/env_var.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def value(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def value_from(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def value_from_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/env_var_source.rb#6
class KubeDSL::DSL::V1::EnvVarSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def config_map_key_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def config_map_key_ref_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def field_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def field_ref_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/env_var_source.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def resource_field_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def resource_field_ref_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def secret_key_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def secret_key_ref_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/env_var_source.rb#17
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/ephemeral_container.rb#6
class KubeDSL::DSL::V1::EphemeralContainer < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def args(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def command(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def env(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def env_from(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def env_froms; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def envs; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def image(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def image_pull_policy(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/ephemeral_container.rb#83
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def lifecycle(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def lifecycle_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def liveness_probe(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def liveness_probe_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def port(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def ports; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def readiness_probe(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def readiness_probe_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def resources(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def resources_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def security_context(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def security_context_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/ephemeral_container.rb#55
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def startup_probe(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def startup_probe_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def stdin(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def stdin_once(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def target_container_name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def termination_message_path(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def termination_message_policy(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def tty(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def volume_device(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def volume_devices; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def volume_mount(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def volume_mounts; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def working_dir(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/ephemeral_volume_source.rb#6
class KubeDSL::DSL::V1::EphemeralVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/ephemeral_volume_source.rb#17
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/ephemeral_volume_source.rb#11
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def volume_claim_template(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def volume_claim_template_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/event.rb#6
class KubeDSL::DSL::V1::Event < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def action(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def count(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def event_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def first_timestamp(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def involved_object(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def involved_object_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/event.rb#61
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def last_timestamp(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def related(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def related_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def reporting_component(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def reporting_instance(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/event.rb#39
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def series(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def series_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def source(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def source_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/event_list.rb#6
class KubeDSL::DSL::V1::EventList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/event_list.rb#22
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/event_list.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/event_series.rb#6
class KubeDSL::DSL::V1::EventSeries < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def count(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/event_series.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def last_observed_time(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/event_series.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/event_source.rb#6
class KubeDSL::DSL::V1::EventSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def component(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def host(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/event_source.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/event_source.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/exec_action.rb#6
class KubeDSL::DSL::V1::ExecAction < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def command(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/exec_action.rb#17
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/exec_action.rb#11
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/fc_volume_source.rb#6
class KubeDSL::DSL::V1::FCVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def fs_type(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/fc_volume_source.rb#29
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def lun(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def read_only(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/fc_volume_source.rb#19
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def target_ww_ns(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def wwids(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/flex_persistent_volume_source.rb#6
class KubeDSL::DSL::V1::FlexPersistentVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def driver(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def fs_type(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/flex_persistent_volume_source.rb#29
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.void)).returns(::KubeDSL::KeyValueFields) }
  def options(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def read_only(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def secret_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def secret_ref_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/flex_persistent_volume_source.rb#19
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/flex_volume_source.rb#6
class KubeDSL::DSL::V1::FlexVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def driver(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def fs_type(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/flex_volume_source.rb#29
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.void)).returns(::KubeDSL::KeyValueFields) }
  def options(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def read_only(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def secret_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def secret_ref_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/flex_volume_source.rb#19
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/flocker_volume_source.rb#6
class KubeDSL::DSL::V1::FlockerVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def dataset_name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def dataset_uuid(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/flocker_volume_source.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/flocker_volume_source.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/gce_persistent_disk_volume_source.rb#6
class KubeDSL::DSL::V1::GCEPersistentDiskVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def fs_type(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/gce_persistent_disk_volume_source.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def partition(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def pd_name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def read_only(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/gce_persistent_disk_volume_source.rb#17
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/grpc_action.rb#6
class KubeDSL::DSL::V1::GRPCAction < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/grpc_action.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def port(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/grpc_action.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def service(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/git_repo_volume_source.rb#6
class KubeDSL::DSL::V1::GitRepoVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def directory(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/git_repo_volume_source.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def repository(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def revision(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/git_repo_volume_source.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/glusterfs_persistent_volume_source.rb#6
class KubeDSL::DSL::V1::GlusterfsPersistentVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def endpoints(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def endpoints_namespace(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/glusterfs_persistent_volume_source.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def path(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def read_only(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/glusterfs_persistent_volume_source.rb#17
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/glusterfs_volume_source.rb#6
class KubeDSL::DSL::V1::GlusterfsVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def endpoints(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/glusterfs_volume_source.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def path(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def read_only(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/glusterfs_volume_source.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/http_get_action.rb#6
class KubeDSL::DSL::V1::HTTPGetAction < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def host(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def http_header(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def http_headers; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/http_get_action.rb#29
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def path(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def port(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def scheme(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/http_get_action.rb#19
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/http_header.rb#6
class KubeDSL::DSL::V1::HTTPHeader < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/http_header.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/http_header.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def value(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/host_alias.rb#6
class KubeDSL::DSL::V1::HostAlias < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def hostnames(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def ip(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/host_alias.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/host_alias.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/host_path_volume_source.rb#6
class KubeDSL::DSL::V1::HostPathVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/host_path_volume_source.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def path(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/host_path_volume_source.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/iscsi_persistent_volume_source.rb#6
class KubeDSL::DSL::V1::ISCSIPersistentVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def chap_auth_discovery(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def chap_auth_session(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def fs_type(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def initiator_name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def iqn(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def iscsi_interface(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/iscsi_persistent_volume_source.rb#47
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def lun(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def portals(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def read_only(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def secret_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def secret_ref_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/iscsi_persistent_volume_source.rb#31
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def target_portal(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/iscsi_volume_source.rb#6
class KubeDSL::DSL::V1::ISCSIVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def chap_auth_discovery(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def chap_auth_session(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def fs_type(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def initiator_name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def iqn(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def iscsi_interface(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/iscsi_volume_source.rb#47
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def lun(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def portals(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def read_only(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def secret_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def secret_ref_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/iscsi_volume_source.rb#31
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def target_portal(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/key_to_path.rb#6
class KubeDSL::DSL::V1::KeyToPath < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def key(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/key_to_path.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def mode(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def path(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/key_to_path.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/lifecycle.rb#6
class KubeDSL::DSL::V1::Lifecycle < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/lifecycle.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def post_start(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def post_start_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def pre_stop(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def pre_stop_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/lifecycle.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/lifecycle_handler.rb#6
class KubeDSL::DSL::V1::LifecycleHandler < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def exec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def exec_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def http_get(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def http_get_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/lifecycle_handler.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/lifecycle_handler.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def tcp_socket(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def tcp_socket_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/limit_range.rb#6
class KubeDSL::DSL::V1::LimitRange < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/limit_range.rb#22
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/limit_range.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/limit_range_item.rb#6
class KubeDSL::DSL::V1::LimitRangeItem < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.void)).returns(::KubeDSL::KeyValueFields) }
  def default(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.void)).returns(::KubeDSL::KeyValueFields) }
  def default_request(&block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/limit_range_item.rb#32
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.void)).returns(::KubeDSL::KeyValueFields) }
  def max(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.void)).returns(::KubeDSL::KeyValueFields) }
  def max_limit_request_ratio(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.void)).returns(::KubeDSL::KeyValueFields) }
  def min(&block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/limit_range_item.rb#21
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/limit_range_list.rb#6
class KubeDSL::DSL::V1::LimitRangeList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/limit_range_list.rb#22
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/limit_range_list.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/limit_range_spec.rb#6
class KubeDSL::DSL::V1::LimitRangeSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/limit_range_spec.rb#17
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def limit(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def limits; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/limit_range_spec.rb#11
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/load_balancer_ingress.rb#6
class KubeDSL::DSL::V1::LoadBalancerIngress < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def hostname(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def ip(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/load_balancer_ingress.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def port(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def ports; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/load_balancer_ingress.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/load_balancer_status.rb#6
class KubeDSL::DSL::V1::LoadBalancerStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def ingress(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def ingresses; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/load_balancer_status.rb#17
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/load_balancer_status.rb#11
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/local_object_reference.rb#6
class KubeDSL::DSL::V1::LocalObjectReference < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/local_object_reference.rb#17
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/local_object_reference.rb#11
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/local_volume_source.rb#6
class KubeDSL::DSL::V1::LocalVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def fs_type(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/local_volume_source.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def path(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/local_volume_source.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/nfs_volume_source.rb#6
class KubeDSL::DSL::V1::NFSVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/nfs_volume_source.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def path(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def read_only(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/nfs_volume_source.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def server(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/namespace.rb#6
class KubeDSL::DSL::V1::Namespace < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/namespace.rb#25
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/namespace.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def status(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/namespace_condition.rb#6
class KubeDSL::DSL::V1::NamespaceCondition < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/namespace_condition.rb#29
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def last_transition_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/namespace_condition.rb#19
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def status(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/namespace_list.rb#6
class KubeDSL::DSL::V1::NamespaceList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/namespace_list.rb#22
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/namespace_list.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/namespace_spec.rb#6
class KubeDSL::DSL::V1::NamespaceSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def finalizers(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/namespace_spec.rb#17
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/namespace_spec.rb#11
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/namespace_status.rb#6
class KubeDSL::DSL::V1::NamespaceStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def condition(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def conditions; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/namespace_status.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def phase(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/namespace_status.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/node.rb#6
class KubeDSL::DSL::V1::Node < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node.rb#25
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def status(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/node_address.rb#6
class KubeDSL::DSL::V1::NodeAddress < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def address(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_address.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_address.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/node_affinity.rb#6
class KubeDSL::DSL::V1::NodeAffinity < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_affinity.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def preferred_during_scheduling_ignored_during_execution(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def preferred_during_scheduling_ignored_during_executions; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def required_during_scheduling_ignored_during_execution(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def required_during_scheduling_ignored_during_execution_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_affinity.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/node_condition.rb#6
class KubeDSL::DSL::V1::NodeCondition < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_condition.rb#32
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def last_heartbeat_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def last_transition_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_condition.rb#21
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def status(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/node_config_source.rb#6
class KubeDSL::DSL::V1::NodeConfigSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def config_map(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def config_map_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_config_source.rb#17
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_config_source.rb#11
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/node_config_status.rb#6
class KubeDSL::DSL::V1::NodeConfigStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def active(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def active_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def assigned(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def assigned_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def error(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_config_status.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def last_known_good(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def last_known_good_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_config_status.rb#17
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/node_daemon_endpoints.rb#6
class KubeDSL::DSL::V1::NodeDaemonEndpoints < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_daemon_endpoints.rb#17
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def kubelet_endpoint(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def kubelet_endpoint_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_daemon_endpoints.rb#11
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/node_list.rb#6
class KubeDSL::DSL::V1::NodeList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_list.rb#22
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_list.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/node_selector.rb#6
class KubeDSL::DSL::V1::NodeSelector < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_selector.rb#17
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def node_selector_term(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def node_selector_terms; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_selector.rb#11
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/node_selector_requirement.rb#6
class KubeDSL::DSL::V1::NodeSelectorRequirement < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def key(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_selector_requirement.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def operator(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_selector_requirement.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def values(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/node_selector_term.rb#6
class KubeDSL::DSL::V1::NodeSelectorTerm < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_selector_term.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def match_expression(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def match_expressions; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def match_field(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def match_fields; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_selector_term.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/node_spec.rb#6
class KubeDSL::DSL::V1::NodeSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def config_source(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def config_source_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def external_id(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_spec.rb#35
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def pod_cid_rs(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def pod_cidr(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def provider_id(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_spec.rb#23
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def taint(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def taints; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def unschedulable(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/node_status.rb#6
class KubeDSL::DSL::V1::NodeStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def address(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def addresses; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.void)).returns(::KubeDSL::KeyValueFields) }
  def allocatable(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.void)).returns(::KubeDSL::KeyValueFields) }
  def capacity(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def condition(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def conditions; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def config(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def config_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def daemon_endpoints(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def daemon_endpoints_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def image(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def images; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_status.rb#47
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def node_info(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def node_info_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def phase(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_status.rb#31
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def volumes_attached(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def volumes_attacheds; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def volumes_in_use(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/node_system_info.rb#6
class KubeDSL::DSL::V1::NodeSystemInfo < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def architecture(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def boot_id(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def container_runtime_version(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def kernel_version(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_system_info.rb#44
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def kube_proxy_version(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def kubelet_version(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def machine_id(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def operating_system(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def os_image(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_system_info.rb#29
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def system_uuid(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/object_field_selector.rb#6
class KubeDSL::DSL::V1::ObjectFieldSelector < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def api_version(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def field_path(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/object_field_selector.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/object_field_selector.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/object_reference.rb#6
class KubeDSL::DSL::V1::ObjectReference < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def api_version(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def field_path(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def kind(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/object_reference.rb#35
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def namespace(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def resource_version(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/object_reference.rb#23
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def uid(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume.rb#6
class KubeDSL::DSL::V1::PersistentVolume < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume.rb#25
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def status(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_claim.rb#6
class KubeDSL::DSL::V1::PersistentVolumeClaim < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_claim.rb#25
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_claim.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def status(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_claim_condition.rb#6
class KubeDSL::DSL::V1::PersistentVolumeClaimCondition < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_claim_condition.rb#32
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def last_probe_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def last_transition_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_claim_condition.rb#21
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def status(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_claim_list.rb#6
class KubeDSL::DSL::V1::PersistentVolumeClaimList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_claim_list.rb#22
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_claim_list.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_claim_spec.rb#6
class KubeDSL::DSL::V1::PersistentVolumeClaimSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def access_modes(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def data_source(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def data_source_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def data_source_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def data_source_ref_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_claim_spec.rb#38
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def resources(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def resources_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def selector_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_claim_spec.rb#25
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def storage_class_name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def volume_mode(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def volume_name(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_claim_status.rb#6
class KubeDSL::DSL::V1::PersistentVolumeClaimStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def access_modes(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.void)).returns(::KubeDSL::KeyValueFields) }
  def allocated_resources(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.void)).returns(::KubeDSL::KeyValueFields) }
  def capacity(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def condition(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def conditions; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_claim_status.rb#32
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def phase(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def resize_status(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_claim_status.rb#21
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_claim_template.rb#6
class KubeDSL::DSL::V1::PersistentVolumeClaimTemplate < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_claim_template.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_claim_template.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_claim_volume_source.rb#6
class KubeDSL::DSL::V1::PersistentVolumeClaimVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def claim_name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_claim_volume_source.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def read_only(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_claim_volume_source.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_list.rb#6
class KubeDSL::DSL::V1::PersistentVolumeList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_list.rb#22
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_list.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_spec.rb#6
class KubeDSL::DSL::V1::PersistentVolumeSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def access_modes(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def aws_elastic_block_store(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def aws_elastic_block_store_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def azure_disk(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def azure_disk_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def azure_file(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def azure_file_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.void)).returns(::KubeDSL::KeyValueFields) }
  def capacity(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def cephfs(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def cephfs_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def cinder(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def cinder_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def claim_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def claim_ref_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def csi(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def csi_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def fc(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def fc_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def flex_volume(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def flex_volume_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def flocker(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def flocker_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def gce_persistent_disk(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def gce_persistent_disk_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def glusterfs(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def glusterfs_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def host_path(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def host_path_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def iscsi(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def iscsi_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_spec.rb#104
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def local(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def local_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def mount_options(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def nfs(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def nfs_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def node_affinity(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def node_affinity_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def persistent_volume_reclaim_policy(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def photon_persistent_disk(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def photon_persistent_disk_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def portworx_volume(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def portworx_volume_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def quobyte(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def quobyte_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def rbd(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def rbd_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def scale_io(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def scale_io_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_spec.rb#69
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def storage_class_name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def storageos(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def storageos_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def volume_mode(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def vsphere_volume(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def vsphere_volume_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_status.rb#6
class KubeDSL::DSL::V1::PersistentVolumeStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_status.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def phase(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_status.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/photon_persistent_disk_volume_source.rb#6
class KubeDSL::DSL::V1::PhotonPersistentDiskVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def fs_type(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/photon_persistent_disk_volume_source.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def pd_id(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/photon_persistent_disk_volume_source.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/pod.rb#6
class KubeDSL::DSL::V1::Pod < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod.rb#25
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def status(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/pod_affinity.rb#6
class KubeDSL::DSL::V1::PodAffinity < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_affinity.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def preferred_during_scheduling_ignored_during_execution(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def preferred_during_scheduling_ignored_during_executions; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def required_during_scheduling_ignored_during_execution(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def required_during_scheduling_ignored_during_executions; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_affinity.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/pod_affinity_term.rb#6
class KubeDSL::DSL::V1::PodAffinityTerm < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_affinity_term.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def label_selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def label_selector_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def namespace_selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def namespace_selector_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def namespaces(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_affinity_term.rb#17
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def topology_key(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/pod_anti_affinity.rb#6
class KubeDSL::DSL::V1::PodAntiAffinity < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_anti_affinity.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def preferred_during_scheduling_ignored_during_execution(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def preferred_during_scheduling_ignored_during_executions; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def required_during_scheduling_ignored_during_execution(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def required_during_scheduling_ignored_during_executions; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_anti_affinity.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/pod_condition.rb#6
class KubeDSL::DSL::V1::PodCondition < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_condition.rb#32
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def last_probe_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def last_transition_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_condition.rb#21
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def status(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/pod_dns_config.rb#6
class KubeDSL::DSL::V1::PodDNSConfig < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_dns_config.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def nameservers(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def option(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def options; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def searches(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_dns_config.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/pod_dns_config_option.rb#6
class KubeDSL::DSL::V1::PodDNSConfigOption < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_dns_config_option.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_dns_config_option.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def value(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/pod_ip.rb#6
class KubeDSL::DSL::V1::PodIP < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def ip(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_ip.rb#17
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_ip.rb#11
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/pod_list.rb#6
class KubeDSL::DSL::V1::PodList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_list.rb#22
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_list.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/pod_os.rb#6
class KubeDSL::DSL::V1::PodOS < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_os.rb#17
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_os.rb#11
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/pod_readiness_gate.rb#6
class KubeDSL::DSL::V1::PodReadinessGate < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def condition_type(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_readiness_gate.rb#17
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_readiness_gate.rb#11
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/pod_security_context.rb#6
class KubeDSL::DSL::V1::PodSecurityContext < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def fs_group(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def fs_group_change_policy(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_security_context.rb#44
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def run_as_group(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def run_as_non_root(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def run_as_user(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def se_linux_options(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def se_linux_options_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def seccomp_profile(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def seccomp_profile_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_security_context.rb#29
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def supplemental_groups(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def sysctls(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def sysctlses; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def windows_options(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def windows_options_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/pod_spec.rb#6
class KubeDSL::DSL::V1::PodSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def active_deadline_seconds(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def affinity(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def affinity_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def automount_service_account_token(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def container(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def containers; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def dns_config(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def dns_config_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def dns_policy(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def enable_service_links(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def ephemeral_container(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def ephemeral_containers; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def host_alias(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def host_aliases; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def host_ipc(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def host_network(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def host_pid(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def hostname(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def image_pull_secret(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def image_pull_secrets; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def init_container(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def init_containers; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_spec.rb#122
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def node_name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.void)).returns(::KubeDSL::KeyValueFields) }
  def node_selector(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def os(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def os_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.void)).returns(::KubeDSL::KeyValueFields) }
  def overhead(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def preemption_policy(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def priority(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def priority_class_name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def readiness_gate(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def readiness_gates; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def restart_policy(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def runtime_class_name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def scheduler_name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def security_context(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def security_context_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_spec.rb#81
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def service_account(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def service_account_name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def set_hostname_as_fqdn(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def share_process_namespace(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def subdomain(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def termination_grace_period_seconds(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def toleration(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def tolerations; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def topology_spread_constraint(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def topology_spread_constraints; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def volume(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def volumes; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/pod_status.rb#6
class KubeDSL::DSL::V1::PodStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def condition(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def conditions; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def container_status(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def container_statuses; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def ephemeral_container_status(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def ephemeral_container_statuses; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def host_ip(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def init_container_status(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def init_container_statuses; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_status.rb#53
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def nominated_node_name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def phase(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def pod_ip(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def pod_ips; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def qos_class(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_status.rb#35
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def start_time(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/pod_template.rb#6
class KubeDSL::DSL::V1::PodTemplate < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_template.rb#22
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_template.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def template(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def template_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/pod_template_list.rb#6
class KubeDSL::DSL::V1::PodTemplateList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_template_list.rb#22
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_template_list.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/pod_template_spec.rb#6
class KubeDSL::DSL::V1::PodTemplateSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_template_spec.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_template_spec.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/port_status.rb#6
class KubeDSL::DSL::V1::PortStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def error(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/port_status.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def port(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def protocol(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/port_status.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/portworx_volume_source.rb#6
class KubeDSL::DSL::V1::PortworxVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def fs_type(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/portworx_volume_source.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def read_only(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/portworx_volume_source.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def volume_id(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/preferred_scheduling_term.rb#6
class KubeDSL::DSL::V1::PreferredSchedulingTerm < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/preferred_scheduling_term.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def preference(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def preference_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/preferred_scheduling_term.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def weight(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/probe.rb#6
class KubeDSL::DSL::V1::Probe < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def exec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def exec_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def failure_threshold(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def grpc(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def grpc_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def http_get(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def http_get_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def initial_delay_seconds(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/probe.rb#44
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def period_seconds(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/probe.rb#29
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def success_threshold(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def tcp_socket(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def tcp_socket_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def termination_grace_period_seconds(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def timeout_seconds(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/projected_volume_source.rb#6
class KubeDSL::DSL::V1::ProjectedVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def default_mode(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/projected_volume_source.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/projected_volume_source.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def source(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def sources; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/quobyte_volume_source.rb#6
class KubeDSL::DSL::V1::QuobyteVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def group(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/quobyte_volume_source.rb#32
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def read_only(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def registry(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/quobyte_volume_source.rb#21
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def tenant(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def user(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def volume(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/rbd_persistent_volume_source.rb#6
class KubeDSL::DSL::V1::RBDPersistentVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def fs_type(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def image(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def keyring(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/rbd_persistent_volume_source.rb#38
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def monitors(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def pool(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def read_only(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def secret_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def secret_ref_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/rbd_persistent_volume_source.rb#25
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def user(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/rbd_volume_source.rb#6
class KubeDSL::DSL::V1::RBDVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def fs_type(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def image(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def keyring(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/rbd_volume_source.rb#38
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def monitors(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def pool(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def read_only(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def secret_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def secret_ref_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/rbd_volume_source.rb#25
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def user(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/replication_controller.rb#6
class KubeDSL::DSL::V1::ReplicationController < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/replication_controller.rb#25
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/replication_controller.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def status(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/replication_controller_condition.rb#6
class KubeDSL::DSL::V1::ReplicationControllerCondition < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/replication_controller_condition.rb#29
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def last_transition_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/replication_controller_condition.rb#19
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def status(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/replication_controller_list.rb#6
class KubeDSL::DSL::V1::ReplicationControllerList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/replication_controller_list.rb#22
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/replication_controller_list.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/replication_controller_spec.rb#6
class KubeDSL::DSL::V1::ReplicationControllerSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/replication_controller_spec.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def min_ready_seconds(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.void)).returns(::KubeDSL::KeyValueFields) }
  def selector(&block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/replication_controller_spec.rb#17
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def template(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def template_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/replication_controller_status.rb#6
class KubeDSL::DSL::V1::ReplicationControllerStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def available_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def condition(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def conditions; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def fully_labeled_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/replication_controller_status.rb#32
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def observed_generation(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def ready_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/replication_controller_status.rb#21
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/resource_field_selector.rb#6
class KubeDSL::DSL::V1::ResourceFieldSelector < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def container_name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def divisor(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/resource_field_selector.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def resource(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/resource_field_selector.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/resource_quota.rb#6
class KubeDSL::DSL::V1::ResourceQuota < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/resource_quota.rb#25
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/resource_quota.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def status(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/resource_quota_list.rb#6
class KubeDSL::DSL::V1::ResourceQuotaList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/resource_quota_list.rb#22
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/resource_quota_list.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/resource_quota_spec.rb#6
class KubeDSL::DSL::V1::ResourceQuotaSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.void)).returns(::KubeDSL::KeyValueFields) }
  def hard(&block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/resource_quota_spec.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def scope_selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def scope_selector_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def scopes(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/resource_quota_spec.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/resource_quota_status.rb#6
class KubeDSL::DSL::V1::ResourceQuotaStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.void)).returns(::KubeDSL::KeyValueFields) }
  def hard(&block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/resource_quota_status.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/resource_quota_status.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.void)).returns(::KubeDSL::KeyValueFields) }
  def used(&block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/resource_requirements.rb#6
class KubeDSL::DSL::V1::ResourceRequirements < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/resource_requirements.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.void)).returns(::KubeDSL::KeyValueFields) }
  def limits(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.void)).returns(::KubeDSL::KeyValueFields) }
  def requests(&block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/resource_requirements.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/se_linux_options.rb#6
class KubeDSL::DSL::V1::SELinuxOptions < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/se_linux_options.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def level(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def role(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/se_linux_options.rb#17
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def type(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def user(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/scale_io_persistent_volume_source.rb#6
class KubeDSL::DSL::V1::ScaleIOPersistentVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def fs_type(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def gateway(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/scale_io_persistent_volume_source.rb#44
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def protection_domain(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def read_only(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def secret_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def secret_ref_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/scale_io_persistent_volume_source.rb#29
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def ssl_enabled(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def storage_mode(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def storage_pool(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def system(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def volume_name(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/scale_io_volume_source.rb#6
class KubeDSL::DSL::V1::ScaleIOVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def fs_type(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def gateway(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/scale_io_volume_source.rb#44
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def protection_domain(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def read_only(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def secret_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def secret_ref_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/scale_io_volume_source.rb#29
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def ssl_enabled(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def storage_mode(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def storage_pool(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def system(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def volume_name(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/scope_selector.rb#6
class KubeDSL::DSL::V1::ScopeSelector < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/scope_selector.rb#17
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def match_expression(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def match_expressions; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/scope_selector.rb#11
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/scoped_resource_selector_requirement.rb#6
class KubeDSL::DSL::V1::ScopedResourceSelectorRequirement < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/scoped_resource_selector_requirement.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def operator(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def scope_name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/scoped_resource_selector_requirement.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def values(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/seccomp_profile.rb#6
class KubeDSL::DSL::V1::SeccompProfile < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/seccomp_profile.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def localhost_profile(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/seccomp_profile.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/secret.rb#6
class KubeDSL::DSL::V1::Secret < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.void)).returns(::KubeDSL::KeyValueFields) }
  def data(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def immutable(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/secret.rb#31
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/secret.rb#19
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.void)).returns(::KubeDSL::KeyValueFields) }
  def string_data(&block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/secret_env_source.rb#6
class KubeDSL::DSL::V1::SecretEnvSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/secret_env_source.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def optional(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/secret_env_source.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/secret_key_selector.rb#6
class KubeDSL::DSL::V1::SecretKeySelector < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def key(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/secret_key_selector.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def optional(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/secret_key_selector.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/secret_list.rb#6
class KubeDSL::DSL::V1::SecretList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/secret_list.rb#22
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/secret_list.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/secret_projection.rb#6
class KubeDSL::DSL::V1::SecretProjection < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/secret_projection.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def optional(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/secret_projection.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/secret_reference.rb#6
class KubeDSL::DSL::V1::SecretReference < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/secret_reference.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def namespace(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/secret_reference.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/secret_volume_source.rb#6
class KubeDSL::DSL::V1::SecretVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def default_mode(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/secret_volume_source.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def optional(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def secret_name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/secret_volume_source.rb#17
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/security_context.rb#6
class KubeDSL::DSL::V1::SecurityContext < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def allow_privilege_escalation(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def capabilities(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def capabilities_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/security_context.rb#47
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def privileged(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def proc_mount(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def read_only_root_filesystem(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def run_as_group(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def run_as_non_root(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def run_as_user(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def se_linux_options(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def se_linux_options_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def seccomp_profile(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def seccomp_profile_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/security_context.rb#31
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def windows_options(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def windows_options_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/service.rb#6
class KubeDSL::DSL::V1::Service < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/service.rb#25
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/service.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def spec_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def status(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def status_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/service_account.rb#6
class KubeDSL::DSL::V1::ServiceAccount < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def automount_service_account_token(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def image_pull_secret(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def image_pull_secrets; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/service_account.rb#28
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def secret(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def secrets; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/service_account.rb#17
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/service_account_list.rb#6
class KubeDSL::DSL::V1::ServiceAccountList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/service_account_list.rb#22
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/service_account_list.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/service_account_token_projection.rb#6
class KubeDSL::DSL::V1::ServiceAccountTokenProjection < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def audience(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def expiration_seconds(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/service_account_token_projection.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def path(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/service_account_token_projection.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/service_list.rb#6
class KubeDSL::DSL::V1::ServiceList < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/service_list.rb#22
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def metadata_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/service_list.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/service_port.rb#6
class KubeDSL::DSL::V1::ServicePort < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def app_protocol(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/service_port.rb#32
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def node_port(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def port(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def protocol(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/service_port.rb#21
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def target_port(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/service_spec.rb#6
class KubeDSL::DSL::V1::ServiceSpec < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def allocate_load_balancer_node_ports(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def cluster_i_ps(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def cluster_ip(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def external_i_ps(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def external_name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def external_traffic_policy(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def health_check_node_port(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def internal_traffic_policy(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def ip_families(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def ip_family_policy(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/service_spec.rb#71
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def load_balancer_class(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def load_balancer_ip(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def load_balancer_source_ranges(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def port(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def ports; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def publish_not_ready_addresses(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#52
  sig { params(block: T.nilable(T.proc.void)).returns(::KubeDSL::KeyValueFields) }
  def selector(&block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/service_spec.rb#47
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def session_affinity(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def session_affinity_config(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def session_affinity_config_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/service_status.rb#6
class KubeDSL::DSL::V1::ServiceStatus < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def condition(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def conditions; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/service_status.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def load_balancer(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def load_balancer_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/service_status.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/session_affinity_config.rb#6
class KubeDSL::DSL::V1::SessionAffinityConfig < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def client_ip(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def client_ip_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/session_affinity_config.rb#17
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/session_affinity_config.rb#11
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/storage_os_persistent_volume_source.rb#6
class KubeDSL::DSL::V1::StorageOSPersistentVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def fs_type(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/storage_os_persistent_volume_source.rb#29
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def read_only(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def secret_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def secret_ref_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/storage_os_persistent_volume_source.rb#19
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def volume_name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def volume_namespace(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/storage_os_volume_source.rb#6
class KubeDSL::DSL::V1::StorageOSVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def fs_type(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/storage_os_volume_source.rb#29
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def read_only(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def secret_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def secret_ref_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/storage_os_volume_source.rb#19
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def volume_name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def volume_namespace(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/sysctl.rb#6
class KubeDSL::DSL::V1::Sysctl < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/sysctl.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/sysctl.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def value(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/tcp_socket_action.rb#6
class KubeDSL::DSL::V1::TCPSocketAction < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def host(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/tcp_socket_action.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def port(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/tcp_socket_action.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/taint.rb#6
class KubeDSL::DSL::V1::Taint < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def effect(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def key(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/taint.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/taint.rb#17
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def time_added(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def value(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/toleration.rb#6
class KubeDSL::DSL::V1::Toleration < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def effect(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def key(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/toleration.rb#29
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def operator(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/toleration.rb#19
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def toleration_seconds(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def value(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/topology_selector_label_requirement.rb#6
class KubeDSL::DSL::V1::TopologySelectorLabelRequirement < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def key(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/topology_selector_label_requirement.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/topology_selector_label_requirement.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def values(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/topology_selector_term.rb#6
class KubeDSL::DSL::V1::TopologySelectorTerm < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/topology_selector_term.rb#17
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#71
  def match_label_expression(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#97
  def match_label_expressions; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/topology_selector_term.rb#11
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/topology_spread_constraint.rb#6
class KubeDSL::DSL::V1::TopologySpreadConstraint < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/topology_spread_constraint.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def label_selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def label_selector_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def max_skew(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/topology_spread_constraint.rb#17
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def topology_key(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def when_unsatisfiable(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/typed_local_object_reference.rb#6
class KubeDSL::DSL::V1::TypedLocalObjectReference < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def api_group(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def kind(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/typed_local_object_reference.rb#23
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/typed_local_object_reference.rb#15
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/volume.rb#6
class KubeDSL::DSL::V1::Volume < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def aws_elastic_block_store(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def aws_elastic_block_store_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def azure_disk(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def azure_disk_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def azure_file(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def azure_file_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def cephfs(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def cephfs_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def cinder(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def cinder_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def config_map(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def config_map_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def csi(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def csi_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def downward_api(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def downward_api_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def empty_dir(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def empty_dir_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def ephemeral(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def ephemeral_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def fc(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def fc_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def flex_volume(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def flex_volume_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def flocker(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def flocker_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def gce_persistent_disk(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def gce_persistent_disk_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def git_repo(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def git_repo_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def glusterfs(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def glusterfs_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def host_path(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def host_path_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def iscsi(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def iscsi_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/volume.rb#104
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def nfs(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def nfs_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def persistent_volume_claim(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def persistent_volume_claim_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def photon_persistent_disk(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def photon_persistent_disk_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def portworx_volume(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def portworx_volume_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def projected(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def projected_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def quobyte(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def quobyte_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def rbd(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def rbd_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def scale_io(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def scale_io_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def secret(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def secret_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/volume.rb#69
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def storageos(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def storageos_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def vsphere_volume(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def vsphere_volume_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/volume_device.rb#6
class KubeDSL::DSL::V1::VolumeDevice < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def device_path(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/volume_device.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/volume_device.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/volume_mount.rb#6
class KubeDSL::DSL::V1::VolumeMount < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/volume_mount.rb#32
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def mount_path(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def mount_propagation(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def read_only(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/volume_mount.rb#21
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def sub_path(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def sub_path_expr(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/volume_node_affinity.rb#6
class KubeDSL::DSL::V1::VolumeNodeAffinity < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/volume_node_affinity.rb#17
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def required(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def required_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/volume_node_affinity.rb#11
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/volume_projection.rb#6
class KubeDSL::DSL::V1::VolumeProjection < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def config_map(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def config_map_present?; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def downward_api(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def downward_api_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/volume_projection.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def secret(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def secret_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/volume_projection.rb#17
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def service_account_token(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def service_account_token_present?; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/vsphere_virtual_disk_volume_source.rb#6
class KubeDSL::DSL::V1::VsphereVirtualDiskVolumeSource < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def fs_type(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/vsphere_virtual_disk_volume_source.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/vsphere_virtual_disk_volume_source.rb#17
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def storage_policy_id(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def storage_policy_name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def volume_path(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/weighted_pod_affinity_term.rb#6
class KubeDSL::DSL::V1::WeightedPodAffinityTerm < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/dsl/v1/weighted_pod_affinity_term.rb#20
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#32
  def pod_affinity_term(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#44
  sig { returns(T::Boolean) }
  def pod_affinity_term_present?; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/weighted_pod_affinity_term.rb#13
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def weight(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/windows_security_context_options.rb#6
class KubeDSL::DSL::V1::WindowsSecurityContextOptions < ::KubeDSL::DSLObject
  include KubeDSL::ValueFields::InstanceMethods
  extend KubeDSL::ValueFields::ClassMethods
  extend KubeDSL::Validations::ClassMethods

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def gmsa_credential_spec(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def gmsa_credential_spec_name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def host_process(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/windows_security_context_options.rb#26
  sig { returns(Symbol) }
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#17
  def run_as_user_name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/windows_security_context_options.rb#17
  sig do
    returns(T::Hash[Symbol, T.any(String, Integer, Float, T::Boolean, T::Array[T.untyped], T::Hash[Symbol, T.untyped])])
  end
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl_object.rb#4
class KubeDSL::DSLObject
  include ::KubeDSL::ValueFields::InstanceMethods
  include ::KubeDSL::Validations::InstanceMethods
  extend ::KubeDSL::ValueFields
  extend ::KubeDSL::ValueFields::ClassMethods
  extend ::KubeDSL::Validations
  extend ::KubeDSL::Validations::ClassMethods
  extend T::Sig

  # T::Sig::WithoutRuntime.sig { params(block: T.nilable(T.proc.void)).void }
  #
  # @return [DSLObject] a new instance of DSLObject
  #
  # source://kube-dsl//lib/kube-dsl/dsl_object.rb#11
  sig { params(block: T.nilable(T.proc.void)).void }
  def initialize(&block); end

  # T::Sig::WithoutRuntime.sig { returns(T.any(String, T::Array[T.untyped], T::Hash[T.untyped, T.untyped])) }
  #
  # @raise [NotImplementedError]
  #
  # source://kube-dsl//lib/kube-dsl/dsl_object.rb#21
  sig { returns(T.any(String, T::Array[T.untyped], T::Hash[T.untyped, T.untyped])) }
  def serialize; end

  # T::Sig::WithoutRuntime.sig { returns(::KubeDSL::Resource) }
  #
  # source://kube-dsl//lib/kube-dsl/dsl_object.rb#16
  sig { returns(::KubeDSL::Resource) }
  def to_resource; end
end

# source://kube-dsl//lib/kube-dsl/default_field_res.rb#5
class KubeDSL::DefaultFieldRes
  include ::KubeDSL::StringHelpers

  # @return [DefaultFieldRes] a new instance of DefaultFieldRes
  #
  # source://kube-dsl//lib/kube-dsl/default_field_res.rb#10
  def initialize(name, res, allowed_values); end

  # Returns the value of attribute allowed_values.
  #
  # source://kube-dsl//lib/kube-dsl/default_field_res.rb#8
  def allowed_values; end

  # source://kube-dsl//lib/kube-dsl/default_field_res.rb#20
  def fields_to_rbi(_inflector); end

  # source://kube-dsl//lib/kube-dsl/default_field_res.rb#16
  def fields_to_ruby(_inflector); end

  # Returns the value of attribute name.
  #
  # source://kube-dsl//lib/kube-dsl/default_field_res.rb#8
  def name; end

  # Returns the value of attribute res.
  #
  # source://kube-dsl//lib/kube-dsl/default_field_res.rb#8
  def res; end

  # source://kube-dsl//lib/kube-dsl/default_field_res.rb#28
  def serialize_call(_inflector); end

  # source://kube-dsl//lib/kube-dsl/default_field_res.rb#24
  def validations(_inflector); end
end

# source://kube-dsl//lib/kube-dsl/entrypoint.rb#4
module KubeDSL::Entrypoint
  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#21
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Admissionregistration::V1::ServiceReference) }
  def admissionregistration_v1_service_reference(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#37
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Admissionregistration::V1::WebhookClientConfig) }
  def admissionregistration_v1_webhook_client_config(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#449
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::Affinity) }
  def affinity(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1373
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Rbac::V1::AggregationRule) }
  def aggregation_rule(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1569
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Meta::V1::APIGroup) }
  def api_group(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1573
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Meta::V1::APIGroupList) }
  def api_group_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1577
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Meta::V1::APIResource) }
  def api_resource(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1581
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Meta::V1::APIResourceList) }
  def api_resource_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1653
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Apiregistration::V1::APIService) }
  def api_service(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1657
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Apiregistration::V1::APIServiceCondition) }
  def api_service_condition(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1661
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Apiregistration::V1::APIServiceList) }
  def api_service_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1665
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Apiregistration::V1::APIServiceSpec) }
  def api_service_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1669
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Apiregistration::V1::APIServiceStatus) }
  def api_service_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1585
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Meta::V1::APIVersions) }
  def api_versions(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1553
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Apiextensions::V1::ServiceReference) }
  def apiextensions_v1_service_reference(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1561
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Apiextensions::V1::WebhookClientConfig) }
  def apiextensions_v1_webhook_client_config(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1673
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Apiregistration::V1::ServiceReference) }
  def apiregistration_v1_service_reference(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#453
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::AttachedVolume) }
  def attached_volume(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#161
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Authentication::V1::TokenRequest) }
  def authentication_v1_token_request(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#241
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Autoscaling::V1::CrossVersionObjectReference) }
  def autoscaling_v1_cross_version_object_reference(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#245
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Autoscaling::V1::HorizontalPodAutoscaler) }
  def autoscaling_v1_horizontal_pod_autoscaler(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#249
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Autoscaling::V1::HorizontalPodAutoscalerList) }
  def autoscaling_v1_horizontal_pod_autoscaler_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#253
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Autoscaling::V1::HorizontalPodAutoscalerSpec) }
  def autoscaling_v1_horizontal_pod_autoscaler_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#257
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Autoscaling::V1::HorizontalPodAutoscalerStatus) }
  def autoscaling_v1_horizontal_pod_autoscaler_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#281
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Autoscaling::V2::CrossVersionObjectReference) }
  def autoscaling_v2_cross_version_object_reference(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#301
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Autoscaling::V2::HorizontalPodAutoscaler) }
  def autoscaling_v2_horizontal_pod_autoscaler(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#313
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Autoscaling::V2::HorizontalPodAutoscalerList) }
  def autoscaling_v2_horizontal_pod_autoscaler_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#317
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Autoscaling::V2::HorizontalPodAutoscalerSpec) }
  def autoscaling_v2_horizontal_pod_autoscaler_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#321
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Autoscaling::V2::HorizontalPodAutoscalerStatus) }
  def autoscaling_v2_horizontal_pod_autoscaler_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#445
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::AWSElasticBlockStoreVolumeSource) }
  def aws_elastic_block_store_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#457
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::AzureDiskVolumeSource) }
  def azure_disk_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#461
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::AzureFilePersistentVolumeSource) }
  def azure_file_persistent_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#465
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::AzureFileVolumeSource) }
  def azure_file_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#469
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::Binding) }
  def binding(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#157
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Authentication::V1::BoundObjectReference) }
  def bound_object_reference(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#481
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::Capabilities) }
  def capabilities(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#485
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::CephFSPersistentVolumeSource) }
  def ceph_fs_persistent_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#489
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::CephFSVolumeSource) }
  def ceph_fs_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#413
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Certificates::V1::CertificateSigningRequest) }
  def certificate_signing_request(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#417
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Certificates::V1::CertificateSigningRequestCondition) }
  def certificate_signing_request_condition(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#421
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Certificates::V1::CertificateSigningRequestList) }
  def certificate_signing_request_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#425
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Certificates::V1::CertificateSigningRequestSpec) }
  def certificate_signing_request_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#429
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Certificates::V1::CertificateSigningRequestStatus) }
  def certificate_signing_request_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#493
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::CinderPersistentVolumeSource) }
  def cinder_persistent_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#497
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::CinderVolumeSource) }
  def cinder_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#501
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::ClientIPConfig) }
  def client_ip_config(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1377
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Rbac::V1::ClusterRole) }
  def cluster_role(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1381
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Rbac::V1::ClusterRoleBinding) }
  def cluster_role_binding(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1385
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Rbac::V1::ClusterRoleBindingList) }
  def cluster_role_binding_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1389
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Rbac::V1::ClusterRoleList) }
  def cluster_role_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#505
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::ComponentCondition) }
  def component_condition(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#509
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::ComponentStatus) }
  def component_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#513
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::ComponentStatusList) }
  def component_status_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1589
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Meta::V1::Condition) }
  def condition(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#517
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::ConfigMap) }
  def config_map(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#521
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::ConfigMapEnvSource) }
  def config_map_env_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#525
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::ConfigMapKeySelector) }
  def config_map_key_selector(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#529
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::ConfigMapList) }
  def config_map_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#533
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::ConfigMapNodeConfigSource) }
  def config_map_node_config_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#537
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::ConfigMapProjection) }
  def config_map_projection(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#541
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::ConfigMapVolumeSource) }
  def config_map_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#545
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::Container) }
  def container(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#549
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::ContainerImage) }
  def container_image(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#553
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::ContainerPort) }
  def container_port(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#273
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Autoscaling::V2::ContainerResourceMetricSource) }
  def container_resource_metric_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#277
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Autoscaling::V2::ContainerResourceMetricStatus) }
  def container_resource_metric_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#557
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::ContainerState) }
  def container_state(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#561
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::ContainerStateRunning) }
  def container_state_running(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#565
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::ContainerStateTerminated) }
  def container_state_terminated(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#569
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::ContainerStateWaiting) }
  def container_state_waiting(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#573
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::ContainerStatus) }
  def container_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#41
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Apps::V1::ControllerRevision) }
  def controller_revision(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#45
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Apps::V1::ControllerRevisionList) }
  def controller_revision_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#369
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Batch::V1::CronJob) }
  def cron_job(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#373
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Batch::V1::CronJobList) }
  def cron_job_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#377
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Batch::V1::CronJobSpec) }
  def cron_job_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#381
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Batch::V1::CronJobStatus) }
  def cron_job_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1429
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Storage::V1::CSIDriver) }
  def csi_driver(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1433
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Storage::V1::CSIDriverList) }
  def csi_driver_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1437
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Storage::V1::CSIDriverSpec) }
  def csi_driver_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1441
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Storage::V1::CSINode) }
  def csi_node(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1445
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Storage::V1::CSINodeDriver) }
  def csi_node_driver(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1449
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Storage::V1::CSINodeList) }
  def csi_node_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1453
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Storage::V1::CSINodeSpec) }
  def csi_node_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#473
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::CSIPersistentVolumeSource) }
  def csi_persistent_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#477
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::CSIVolumeSource) }
  def csi_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1497
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Apiextensions::V1::CustomResourceColumnDefinition) }
  def custom_resource_column_definition(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1501
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Apiextensions::V1::CustomResourceConversion) }
  def custom_resource_conversion(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1505
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Apiextensions::V1::CustomResourceDefinition) }
  def custom_resource_definition(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1509
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Apiextensions::V1::CustomResourceDefinitionCondition) }
  def custom_resource_definition_condition(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1513
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Apiextensions::V1::CustomResourceDefinitionList) }
  def custom_resource_definition_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1517
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Apiextensions::V1::CustomResourceDefinitionNames) }
  def custom_resource_definition_names(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1521
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Apiextensions::V1::CustomResourceDefinitionSpec) }
  def custom_resource_definition_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1525
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Apiextensions::V1::CustomResourceDefinitionStatus) }
  def custom_resource_definition_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1529
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Apiextensions::V1::CustomResourceDefinitionVersion) }
  def custom_resource_definition_version(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1533
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Apiextensions::V1::CustomResourceSubresourceScale) }
  def custom_resource_subresource_scale(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1537
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Apiextensions::V1::CustomResourceSubresources) }
  def custom_resource_subresources(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1541
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Apiextensions::V1::CustomResourceValidation) }
  def custom_resource_validation(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#577
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::DaemonEndpoint) }
  def daemon_endpoint(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#49
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Apps::V1::DaemonSet) }
  def daemon_set(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#53
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Apps::V1::DaemonSetCondition) }
  def daemon_set_condition(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#57
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Apps::V1::DaemonSetList) }
  def daemon_set_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#61
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Apps::V1::DaemonSetSpec) }
  def daemon_set_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#65
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Apps::V1::DaemonSetStatus) }
  def daemon_set_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#69
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Apps::V1::DaemonSetUpdateStrategy) }
  def daemon_set_update_strategy(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1593
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Meta::V1::DeleteOptions) }
  def delete_options(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#73
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Apps::V1::Deployment) }
  def deployment(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#77
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Apps::V1::DeploymentCondition) }
  def deployment_condition(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#81
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Apps::V1::DeploymentList) }
  def deployment_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#85
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Apps::V1::DeploymentSpec) }
  def deployment_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#89
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Apps::V1::DeploymentStatus) }
  def deployment_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#93
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Apps::V1::DeploymentStrategy) }
  def deployment_strategy(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1217
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Discovery::V1::EndpointPort) }
  def discovery_v1_endpoint_port(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#581
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::DownwardAPIProjection) }
  def downward_api_projection(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#585
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::DownwardAPIVolumeFile) }
  def downward_api_volume_file(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#589
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::DownwardAPIVolumeSource) }
  def downward_api_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#593
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::EmptyDirVolumeSource) }
  def empty_dir_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1205
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Discovery::V1::Endpoint) }
  def endpoint(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#597
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::EndpointAddress) }
  def endpoint_address(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1209
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Discovery::V1::EndpointConditions) }
  def endpoint_conditions(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1213
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Discovery::V1::EndpointHints) }
  def endpoint_hints(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1221
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Discovery::V1::EndpointSlice) }
  def endpoint_slice(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1225
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Discovery::V1::EndpointSliceList) }
  def endpoint_slice_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#605
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::EndpointSubset) }
  def endpoint_subset(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#609
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::Endpoints) }
  def endpoints(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#613
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::EndpointsList) }
  def endpoints_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#617
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::EnvFromSource) }
  def env_from_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#621
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::EnvVar) }
  def env_var(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#625
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::EnvVarSource) }
  def env_var_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#629
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::EphemeralContainer) }
  def ephemeral_container(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#633
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::EphemeralVolumeSource) }
  def ephemeral_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#649
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::EventSource) }
  def event_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1233
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Events::V1::Event) }
  def events_v1_event(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1237
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Events::V1::EventList) }
  def events_v1_event_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1241
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Events::V1::EventSeries) }
  def events_v1_event_series(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1353
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Policy::V1::Eviction) }
  def eviction(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#653
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::ExecAction) }
  def exec_action(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1545
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Apiextensions::V1::ExternalDocumentation) }
  def external_documentation(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#285
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Autoscaling::V2::ExternalMetricSource) }
  def external_metric_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#289
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Autoscaling::V2::ExternalMetricStatus) }
  def external_metric_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#657
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::FCVolumeSource) }
  def fc_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#661
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::FlexPersistentVolumeSource) }
  def flex_persistent_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#665
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::FlexVolumeSource) }
  def flex_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#669
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::FlockerVolumeSource) }
  def flocker_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1229
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Discovery::V1::ForZone) }
  def for_zone(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#673
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::GCEPersistentDiskVolumeSource) }
  def gce_persistent_disk_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#681
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::GitRepoVolumeSource) }
  def git_repo_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#685
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::GlusterfsPersistentVolumeSource) }
  def glusterfs_persistent_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#689
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::GlusterfsVolumeSource) }
  def glusterfs_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1597
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Meta::V1::GroupVersionForDiscovery) }
  def group_version_for_discovery(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#677
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::GRPCAction) }
  def grpc_action(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#305
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Autoscaling::V2::HorizontalPodAutoscalerBehavior) }
  def horizontal_pod_autoscaler_behavior(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#309
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Autoscaling::V2::HorizontalPodAutoscalerCondition) }
  def horizontal_pod_autoscaler_condition(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#701
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::HostAlias) }
  def host_alias(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#705
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::HostPathVolumeSource) }
  def host_path_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#293
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Autoscaling::V2::HPAScalingPolicy) }
  def hpa_scaling_policy(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#297
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Autoscaling::V2::HPAScalingRules) }
  def hpa_scaling_rules(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#693
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::HTTPGetAction) }
  def http_get_action(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#697
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::HTTPHeader) }
  def http_header(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1245
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Networking::V1::HTTPIngressPath) }
  def http_ingress_path(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1249
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Networking::V1::HTTPIngressRuleValue) }
  def http_ingress_rule_value(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1649
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Pkg::Version::Info) }
  def info(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1257
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Networking::V1::Ingress) }
  def ingress(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1261
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Networking::V1::IngressBackend) }
  def ingress_backend(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1265
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Networking::V1::IngressClass) }
  def ingress_class(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1269
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Networking::V1::IngressClassList) }
  def ingress_class_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1273
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Networking::V1::IngressClassParametersReference) }
  def ingress_class_parameters_reference(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1277
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Networking::V1::IngressClassSpec) }
  def ingress_class_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1281
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Networking::V1::IngressList) }
  def ingress_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1285
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Networking::V1::IngressRule) }
  def ingress_rule(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1289
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Networking::V1::IngressServiceBackend) }
  def ingress_service_backend(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1293
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Networking::V1::IngressSpec) }
  def ingress_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1297
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Networking::V1::IngressStatus) }
  def ingress_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1301
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Networking::V1::IngressTLS) }
  def ingress_tls(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1253
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Networking::V1::IPBlock) }
  def ip_block(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#709
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::ISCSIPersistentVolumeSource) }
  def iscsi_persistent_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#713
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::ISCSIVolumeSource) }
  def iscsi_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#385
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Batch::V1::Job) }
  def job(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#389
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Batch::V1::JobCondition) }
  def job_condition(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#393
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Batch::V1::JobList) }
  def job_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#397
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Batch::V1::JobSpec) }
  def job_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#401
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Batch::V1::JobStatus) }
  def job_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#405
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Batch::V1::JobTemplateSpec) }
  def job_template_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1549
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Apiextensions::V1::JSONSchemaProps) }
  def json_schema_props(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#717
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::KeyToPath) }
  def key_to_path(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1601
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Meta::V1::LabelSelector) }
  def label_selector(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1605
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Meta::V1::LabelSelectorRequirement) }
  def label_selector_requirement(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#433
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Coordination::V1::Lease) }
  def lease(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#437
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Coordination::V1::LeaseList) }
  def lease_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#441
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Coordination::V1::LeaseSpec) }
  def lease_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#721
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::Lifecycle) }
  def lifecycle(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#725
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::LifecycleHandler) }
  def lifecycle_handler(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#729
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::LimitRange) }
  def limit_range(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#733
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::LimitRangeItem) }
  def limit_range_item(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#737
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::LimitRangeList) }
  def limit_range_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#741
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::LimitRangeSpec) }
  def limit_range_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1609
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Meta::V1::ListMeta) }
  def list_meta(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#745
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::LoadBalancerIngress) }
  def load_balancer_ingress(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#749
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::LoadBalancerStatus) }
  def load_balancer_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#753
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::LocalObjectReference) }
  def local_object_reference(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#189
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Authorization::V1::LocalSubjectAccessReview) }
  def local_subject_access_review(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#757
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::LocalVolumeSource) }
  def local_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1613
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Meta::V1::ManagedFieldsEntry) }
  def managed_fields_entry(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#325
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Autoscaling::V2::MetricIdentifier) }
  def metric_identifier(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#329
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Autoscaling::V2::MetricSpec) }
  def metric_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#333
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Autoscaling::V2::MetricStatus) }
  def metric_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#337
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Autoscaling::V2::MetricTarget) }
  def metric_target(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#341
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Autoscaling::V2::MetricValueStatus) }
  def metric_value_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#5
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Admissionregistration::V1::MutatingWebhook) }
  def mutating_webhook(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#9
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Admissionregistration::V1::MutatingWebhookConfiguration) }
  def mutating_webhook_configuration(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#13
  sig do
    params(
      block: T.proc.void
    ).returns(::KubeDSL::DSL::Admissionregistration::V1::MutatingWebhookConfigurationList)
  end
  def mutating_webhook_configuration_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#765
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::Namespace) }
  def namespace(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#769
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::NamespaceCondition) }
  def namespace_condition(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#773
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::NamespaceList) }
  def namespace_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#777
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::NamespaceSpec) }
  def namespace_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#781
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::NamespaceStatus) }
  def namespace_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1305
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Networking::V1::NetworkPolicy) }
  def network_policy(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1309
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Networking::V1::NetworkPolicyEgressRule) }
  def network_policy_egress_rule(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1313
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Networking::V1::NetworkPolicyIngressRule) }
  def network_policy_ingress_rule(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1317
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Networking::V1::NetworkPolicyList) }
  def network_policy_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1321
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Networking::V1::NetworkPolicyPeer) }
  def network_policy_peer(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1325
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Networking::V1::NetworkPolicyPort) }
  def network_policy_port(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1329
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Networking::V1::NetworkPolicySpec) }
  def network_policy_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#761
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::NFSVolumeSource) }
  def nfs_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#785
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::Node) }
  def node(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#789
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::NodeAddress) }
  def node_address(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#793
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::NodeAffinity) }
  def node_affinity(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#797
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::NodeCondition) }
  def node_condition(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#801
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::NodeConfigSource) }
  def node_config_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#805
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::NodeConfigStatus) }
  def node_config_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#809
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::NodeDaemonEndpoints) }
  def node_daemon_endpoints(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#813
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::NodeList) }
  def node_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#817
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::NodeSelector) }
  def node_selector(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#821
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::NodeSelectorRequirement) }
  def node_selector_requirement(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#825
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::NodeSelectorTerm) }
  def node_selector_term(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#829
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::NodeSpec) }
  def node_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#833
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::NodeStatus) }
  def node_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#837
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::NodeSystemInfo) }
  def node_system_info(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#193
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Authorization::V1::NonResourceAttributes) }
  def non_resource_attributes(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#197
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Authorization::V1::NonResourceRule) }
  def non_resource_rule(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#841
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::ObjectFieldSelector) }
  def object_field_selector(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1617
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Meta::V1::ObjectMeta) }
  def object_meta(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#345
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Autoscaling::V2::ObjectMetricSource) }
  def object_metric_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#349
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Autoscaling::V2::ObjectMetricStatus) }
  def object_metric_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#845
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::ObjectReference) }
  def object_reference(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1337
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Node::V1::Overhead) }
  def overhead(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1621
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Meta::V1::OwnerReference) }
  def owner_reference(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#849
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::PersistentVolume) }
  def persistent_volume(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#853
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::PersistentVolumeClaim) }
  def persistent_volume_claim(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#857
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::PersistentVolumeClaimCondition) }
  def persistent_volume_claim_condition(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#861
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::PersistentVolumeClaimList) }
  def persistent_volume_claim_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#865
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::PersistentVolumeClaimSpec) }
  def persistent_volume_claim_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#869
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::PersistentVolumeClaimStatus) }
  def persistent_volume_claim_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#873
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::PersistentVolumeClaimTemplate) }
  def persistent_volume_claim_template(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#877
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::PersistentVolumeClaimVolumeSource) }
  def persistent_volume_claim_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#881
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::PersistentVolumeList) }
  def persistent_volume_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#885
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::PersistentVolumeSpec) }
  def persistent_volume_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#889
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::PersistentVolumeStatus) }
  def persistent_volume_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#893
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::PhotonPersistentDiskVolumeSource) }
  def photon_persistent_disk_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#897
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::Pod) }
  def pod(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#901
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::PodAffinity) }
  def pod_affinity(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#905
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::PodAffinityTerm) }
  def pod_affinity_term(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#909
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::PodAntiAffinity) }
  def pod_anti_affinity(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#913
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::PodCondition) }
  def pod_condition(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1357
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Policy::V1::PodDisruptionBudget) }
  def pod_disruption_budget(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1361
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Policy::V1::PodDisruptionBudgetList) }
  def pod_disruption_budget_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1365
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Policy::V1::PodDisruptionBudgetSpec) }
  def pod_disruption_budget_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1369
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Policy::V1::PodDisruptionBudgetStatus) }
  def pod_disruption_budget_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#917
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::PodDNSConfig) }
  def pod_dns_config(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#921
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::PodDNSConfigOption) }
  def pod_dns_config_option(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#925
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::PodIP) }
  def pod_ip(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#929
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::PodList) }
  def pod_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#933
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::PodOS) }
  def pod_os(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#937
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::PodReadinessGate) }
  def pod_readiness_gate(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#941
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::PodSecurityContext) }
  def pod_security_context(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#945
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::PodSpec) }
  def pod_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#949
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::PodStatus) }
  def pod_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#953
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::PodTemplate) }
  def pod_template(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#957
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::PodTemplateList) }
  def pod_template_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#961
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::PodTemplateSpec) }
  def pod_template_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#353
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Autoscaling::V2::PodsMetricSource) }
  def pods_metric_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#357
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Autoscaling::V2::PodsMetricStatus) }
  def pods_metric_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1393
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Rbac::V1::PolicyRule) }
  def policy_rule(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#965
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::PortStatus) }
  def port_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#969
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::PortworxVolumeSource) }
  def portworx_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1625
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Meta::V1::Preconditions) }
  def preconditions(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#973
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::PreferredSchedulingTerm) }
  def preferred_scheduling_term(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1421
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Scheduling::V1::PriorityClass) }
  def priority_class(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1425
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Scheduling::V1::PriorityClassList) }
  def priority_class_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#977
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::Probe) }
  def probe(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#981
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::ProjectedVolumeSource) }
  def projected_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#985
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::QuobyteVolumeSource) }
  def quobyte_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#989
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::RBDPersistentVolumeSource) }
  def rbd_persistent_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#993
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::RBDVolumeSource) }
  def rbd_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#97
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Apps::V1::ReplicaSet) }
  def replica_set(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#101
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Apps::V1::ReplicaSetCondition) }
  def replica_set_condition(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#105
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Apps::V1::ReplicaSetList) }
  def replica_set_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#109
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Apps::V1::ReplicaSetSpec) }
  def replica_set_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#113
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Apps::V1::ReplicaSetStatus) }
  def replica_set_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#997
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::ReplicationController) }
  def replication_controller(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1001
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::ReplicationControllerCondition) }
  def replication_controller_condition(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1005
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::ReplicationControllerList) }
  def replication_controller_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1009
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::ReplicationControllerSpec) }
  def replication_controller_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1013
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::ReplicationControllerStatus) }
  def replication_controller_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#201
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Authorization::V1::ResourceAttributes) }
  def resource_attributes(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1017
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::ResourceFieldSelector) }
  def resource_field_selector(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#361
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Autoscaling::V2::ResourceMetricSource) }
  def resource_metric_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#365
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Autoscaling::V2::ResourceMetricStatus) }
  def resource_metric_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1021
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::ResourceQuota) }
  def resource_quota(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1025
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::ResourceQuotaList) }
  def resource_quota_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1029
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::ResourceQuotaSpec) }
  def resource_quota_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1033
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::ResourceQuotaStatus) }
  def resource_quota_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1037
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::ResourceRequirements) }
  def resource_requirements(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#205
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Authorization::V1::ResourceRule) }
  def resource_rule(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1397
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Rbac::V1::Role) }
  def role(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1401
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Rbac::V1::RoleBinding) }
  def role_binding(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1405
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Rbac::V1::RoleBindingList) }
  def role_binding_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1409
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Rbac::V1::RoleList) }
  def role_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1413
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Rbac::V1::RoleRef) }
  def role_ref(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#117
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Apps::V1::RollingUpdateDaemonSet) }
  def rolling_update_daemon_set(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#121
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Apps::V1::RollingUpdateDeployment) }
  def rolling_update_deployment(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#125
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Apps::V1::RollingUpdateStatefulSetStrategy) }
  def rolling_update_stateful_set_strategy(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#17
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Admissionregistration::V1::RuleWithOperations) }
  def rule_with_operations(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1341
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Node::V1::RuntimeClass) }
  def runtime_class(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1345
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Node::V1::RuntimeClassList) }
  def runtime_class_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#261
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Autoscaling::V1::Scale) }
  def scale(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1045
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::ScaleIOPersistentVolumeSource) }
  def scale_io_persistent_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1049
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::ScaleIOVolumeSource) }
  def scale_io_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#265
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Autoscaling::V1::ScaleSpec) }
  def scale_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#269
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Autoscaling::V1::ScaleStatus) }
  def scale_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1349
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Node::V1::Scheduling) }
  def scheduling(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1053
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::ScopeSelector) }
  def scope_selector(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1057
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::ScopedResourceSelectorRequirement) }
  def scoped_resource_selector_requirement(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1041
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::SELinuxOptions) }
  def se_linux_options(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1061
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::SeccompProfile) }
  def seccomp_profile(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1065
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::Secret) }
  def secret(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1069
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::SecretEnvSource) }
  def secret_env_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1073
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::SecretKeySelector) }
  def secret_key_selector(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1077
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::SecretList) }
  def secret_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1081
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::SecretProjection) }
  def secret_projection(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1085
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::SecretReference) }
  def secret_reference(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1089
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::SecretVolumeSource) }
  def secret_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1093
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::SecurityContext) }
  def security_context(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#209
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Authorization::V1::SelfSubjectAccessReview) }
  def self_subject_access_review(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#213
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Authorization::V1::SelfSubjectAccessReviewSpec) }
  def self_subject_access_review_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#217
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Authorization::V1::SelfSubjectRulesReview) }
  def self_subject_rules_review(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#221
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Authorization::V1::SelfSubjectRulesReviewSpec) }
  def self_subject_rules_review_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1629
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Meta::V1::ServerAddressByClientCIDR) }
  def server_address_by_client_cidr(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1097
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::Service) }
  def service(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1101
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::ServiceAccount) }
  def service_account(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1105
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::ServiceAccountList) }
  def service_account_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1109
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::ServiceAccountTokenProjection) }
  def service_account_token_projection(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1333
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Networking::V1::ServiceBackendPort) }
  def service_backend_port(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1113
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::ServiceList) }
  def service_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1117
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::ServicePort) }
  def service_port(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1121
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::ServiceSpec) }
  def service_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1125
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::ServiceStatus) }
  def service_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1129
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::SessionAffinityConfig) }
  def session_affinity_config(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#129
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Apps::V1::StatefulSet) }
  def stateful_set(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#133
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Apps::V1::StatefulSetCondition) }
  def stateful_set_condition(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#137
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Apps::V1::StatefulSetList) }
  def stateful_set_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#141
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Apps::V1::StatefulSetPersistentVolumeClaimRetentionPolicy) }
  def stateful_set_persistent_volume_claim_retention_policy(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#145
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Apps::V1::StatefulSetSpec) }
  def stateful_set_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#149
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Apps::V1::StatefulSetStatus) }
  def stateful_set_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#153
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Apps::V1::StatefulSetUpdateStrategy) }
  def stateful_set_update_strategy(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1633
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Meta::V1::Status) }
  def status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1637
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Meta::V1::StatusCause) }
  def status_cause(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1641
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Meta::V1::StatusDetails) }
  def status_details(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1457
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Storage::V1::StorageClass) }
  def storage_class(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1461
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Storage::V1::StorageClassList) }
  def storage_class_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1133
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::StorageOSPersistentVolumeSource) }
  def storage_os_persistent_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1137
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::StorageOSVolumeSource) }
  def storage_os_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1465
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Storage::V1::TokenRequest) }
  def storage_v1_token_request(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1417
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Rbac::V1::Subject) }
  def subject(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#225
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Authorization::V1::SubjectAccessReview) }
  def subject_access_review(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#229
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Authorization::V1::SubjectAccessReviewSpec) }
  def subject_access_review_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#233
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Authorization::V1::SubjectAccessReviewStatus) }
  def subject_access_review_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#237
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Authorization::V1::SubjectRulesReviewStatus) }
  def subject_rules_review_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1141
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::Sysctl) }
  def sysctl(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1149
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::Taint) }
  def taint(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1145
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::TCPSocketAction) }
  def tcp_socket_action(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#165
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Authentication::V1::TokenRequestSpec) }
  def token_request_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#169
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Authentication::V1::TokenRequestStatus) }
  def token_request_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#173
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Authentication::V1::TokenReview) }
  def token_review(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#177
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Authentication::V1::TokenReviewSpec) }
  def token_review_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#181
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Authentication::V1::TokenReviewStatus) }
  def token_review_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1153
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::Toleration) }
  def toleration(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1157
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::TopologySelectorLabelRequirement) }
  def topology_selector_label_requirement(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1161
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::TopologySelectorTerm) }
  def topology_selector_term(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1165
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::TopologySpreadConstraint) }
  def topology_spread_constraint(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1169
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::TypedLocalObjectReference) }
  def typed_local_object_reference(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#409
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Batch::V1::UncountedTerminatedPods) }
  def uncounted_terminated_pods(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#185
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Authentication::V1::UserInfo) }
  def user_info(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#601
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::EndpointPort) }
  def v1_endpoint_port(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#637
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::Event) }
  def v1_event(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#641
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::EventList) }
  def v1_event_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#645
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::EventSeries) }
  def v1_event_series(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#25
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Admissionregistration::V1::ValidatingWebhook) }
  def validating_webhook(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#29
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Admissionregistration::V1::ValidatingWebhookConfiguration) }
  def validating_webhook_configuration(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#33
  sig do
    params(
      block: T.proc.void
    ).returns(::KubeDSL::DSL::Admissionregistration::V1::ValidatingWebhookConfigurationList)
  end
  def validating_webhook_configuration_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1557
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Apiextensions::V1::ValidationRule) }
  def validation_rule(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1173
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::Volume) }
  def volume(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1469
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Storage::V1::VolumeAttachment) }
  def volume_attachment(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1473
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Storage::V1::VolumeAttachmentList) }
  def volume_attachment_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1477
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Storage::V1::VolumeAttachmentSource) }
  def volume_attachment_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1481
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Storage::V1::VolumeAttachmentSpec) }
  def volume_attachment_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1485
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Storage::V1::VolumeAttachmentStatus) }
  def volume_attachment_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1177
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::VolumeDevice) }
  def volume_device(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1489
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Storage::V1::VolumeError) }
  def volume_error(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1181
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::VolumeMount) }
  def volume_mount(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1185
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::VolumeNodeAffinity) }
  def volume_node_affinity(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1493
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Storage::V1::VolumeNodeResources) }
  def volume_node_resources(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1189
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::VolumeProjection) }
  def volume_projection(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1193
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::VsphereVirtualDiskVolumeSource) }
  def vsphere_virtual_disk_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1645
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Meta::V1::WatchEvent) }
  def watch_event(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1565
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::Apiextensions::V1::WebhookConversion) }
  def webhook_conversion(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1197
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::WeightedPodAffinityTerm) }
  def weighted_pod_affinity_term(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1201
  sig { params(block: T.proc.void).returns(::KubeDSL::DSL::V1::WindowsSecurityContextOptions) }
  def windows_security_context_options(&block); end
end

# source://kube-dsl//lib/kube-dsl/entrypoint_builder.rb#4
class KubeDSL::EntrypointBuilder
  include ::KubeDSL::StringHelpers

  # @return [EntrypointBuilder] a new instance of EntrypointBuilder
  #
  # source://kube-dsl//lib/kube-dsl/entrypoint_builder.rb#9
  def initialize(builder, &block); end

  # Returns the value of attribute block.
  #
  # source://kube-dsl//lib/kube-dsl/entrypoint_builder.rb#7
  def block; end

  # Returns the value of attribute builder.
  #
  # source://kube-dsl//lib/kube-dsl/entrypoint_builder.rb#7
  def builder; end

  # source://kube-dsl//lib/kube-dsl/entrypoint_builder.rb#14
  def entrypoint; end

  # source://kube-dsl//lib/kube-dsl/entrypoint_builder.rb#37
  def entrypoint_rbi; end

  # source://kube-dsl//lib/kube-dsl/entrypoint_builder.rb#59
  def path; end

  # source://kube-dsl//lib/kube-dsl/entrypoint_builder.rb#63
  def rbi_path; end

  private

  # source://kube-dsl//lib/kube-dsl/entrypoint_builder.rb#81
  def ambiguous_kinds; end

  # source://kube-dsl//lib/kube-dsl/entrypoint_builder.rb#97
  def indent; end

  # source://kube-dsl//lib/kube-dsl/entrypoint_builder.rb#93
  def indent_level; end

  # source://kube-dsl//lib/kube-dsl/entrypoint_builder.rb#72
  def kinds; end

  # source://kube-dsl//lib/kube-dsl/entrypoint_builder.rb#101
  def method_name_for(resource); end

  # source://kube-dsl//lib/kube-dsl/entrypoint_builder.rb#87
  def module_namespace; end
end

# source://kube-dsl//lib/kube-dsl/external_ref.rb#3
class KubeDSL::ExternalRef < ::KubeDSL::Ref
  # source://kube-dsl//lib/kube-dsl/external_ref.rb#8
  def document; end

  # source://kube-dsl//lib/kube-dsl/external_ref.rb#4
  def meta; end

  # assume external refs are always object fields
  #
  # @return [Boolean]
  #
  # source://kube-dsl//lib/kube-dsl/external_ref.rb#13
  def object?; end
end

# source://kube-dsl//lib/kube-dsl/external_resource_meta.rb#3
class KubeDSL::ExternalResourceMeta
  # @return [ExternalResourceMeta] a new instance of ExternalResourceMeta
  #
  # source://kube-dsl//lib/kube-dsl/external_resource_meta.rb#6
  def initialize(ref); end

  # @return [Boolean]
  #
  # source://kube-dsl//lib/kube-dsl/external_resource_meta.rb#10
  def external?; end

  # Returns the value of attribute ref.
  #
  # source://kube-dsl//lib/kube-dsl/external_resource_meta.rb#4
  def ref; end
end

# source://kube-dsl//lib/kube-dsl/field_res.rb#3
class KubeDSL::FieldRes
  include ::KubeDSL::StringHelpers
  include ::KubeDSL::RbiHelpers

  # @return [FieldRes] a new instance of FieldRes
  #
  # source://kube-dsl//lib/kube-dsl/field_res.rb#11
  def initialize(name, type, required); end

  # source://kube-dsl//lib/kube-dsl/field_res.rb#21
  def fields_to_rbi(inflector); end

  # source://kube-dsl//lib/kube-dsl/field_res.rb#17
  def fields_to_ruby(_inflector); end

  # Returns the value of attribute name.
  #
  # source://kube-dsl//lib/kube-dsl/field_res.rb#7
  def name; end

  # Returns the value of attribute required.
  #
  # source://kube-dsl//lib/kube-dsl/field_res.rb#7
  def required; end

  # Returns the value of attribute required.
  #
  # source://kube-dsl//lib/kube-dsl/field_res.rb#7
  def required?; end

  # source://kube-dsl//lib/kube-dsl/field_res.rb#34
  def serialize_call(_inflector); end

  # Returns the value of attribute type.
  #
  # source://kube-dsl//lib/kube-dsl/field_res.rb#7
  def type; end

  # source://kube-dsl//lib/kube-dsl/field_res.rb#28
  def validations(_inflector); end

  private

  # source://kube-dsl//lib/kube-dsl/field_res.rb#40
  def ruby_safe_name; end
end

# source://kube-dsl//lib/kube-dsl/generator.rb#4
class KubeDSL::Generator
  # @return [Generator] a new instance of Generator
  #
  # source://kube-dsl//lib/kube-dsl/generator.rb#7
  def initialize(*args, **kwargs); end

  # Returns the value of attribute builder.
  #
  # source://kube-dsl//lib/kube-dsl/generator.rb#5
  def builder; end

  # source://kube-dsl//lib/kube-dsl/generator.rb#11
  def generate(include_rbi: T.unsafe(nil)); end

  # source://kube-dsl//lib/kube-dsl/generator.rb#43
  def generate_autoload_files; end

  # source://kube-dsl//lib/kube-dsl/generator.rb#54
  def generate_entrypoint_file(include_rbi: T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/generator.rb#17
  def generate_resource_files(include_rbi: T.unsafe(nil)); end
end

# source://kube-dsl//lib/kube-dsl/inflector.rb#6
class KubeDSL::Inflector
  include ::Singleton
  extend ::Singleton::SingletonClassMethods

  # source://kube-dsl//lib/kube-dsl/inflector.rb#19
  def inflector; end

  class << self
    # source://kube-dsl//lib/kube-dsl/inflector.rb#10
    def pluralize(*args); end

    # source://kube-dsl//lib/kube-dsl/inflector.rb#14
    def singularize(*args); end

    private

    def allocate; end
    def new(*_arg0); end
  end
end

# source://kube-dsl//lib/kube-dsl/inline_ref.rb#3
class KubeDSL::InlineRef
  # @return [InlineRef] a new instance of InlineRef
  #
  # source://kube-dsl//lib/kube-dsl/inline_ref.rb#6
  def initialize(name, document, parent_ref, serialize_handlers); end

  # Returns the value of attribute document.
  #
  # source://kube-dsl//lib/kube-dsl/inline_ref.rb#4
  def document; end

  # @return [Boolean]
  #
  # source://kube-dsl//lib/kube-dsl/inline_ref.rb#21
  def inline?; end

  # source://kube-dsl//lib/kube-dsl/inline_ref.rb#29
  def kind; end

  # source://kube-dsl//lib/kube-dsl/inline_ref.rb#25
  def meta; end

  # source://kube-dsl//lib/kube-dsl/inline_ref.rb#13
  def method_missing(method_name, *args, **kwargs, &block); end

  # Returns the value of attribute name.
  #
  # source://kube-dsl//lib/kube-dsl/inline_ref.rb#4
  def name; end

  # Returns the value of attribute parent_ref.
  #
  # source://kube-dsl//lib/kube-dsl/inline_ref.rb#4
  def parent_ref; end

  # source://kube-dsl//lib/kube-dsl/inline_ref.rb#47
  def ruby_autoload_path; end

  # Returns the value of attribute serialize_handlers.
  #
  # source://kube-dsl//lib/kube-dsl/inline_ref.rb#4
  def serialize_handlers; end

  # source://kube-dsl//lib/kube-dsl/inline_ref.rb#57
  def shorten(filename); end

  # source://kube-dsl//lib/kube-dsl/inline_ref.rb#43
  def str; end

  private

  # @return [Boolean]
  #
  # source://kube-dsl//lib/kube-dsl/inline_ref.rb#17
  def respond_to_missing?(method_name); end
end

# source://kube-dsl//lib/kube-dsl.rb#3
KubeDSL::KUBERNETES_VERSION = T.let(T.unsafe(nil), String)

# source://kube-dsl//lib/kube-dsl/key_value_field_res.rb#3
class KubeDSL::KeyValueFieldRes
  include ::KubeDSL::StringHelpers

  # @return [KeyValueFieldRes] a new instance of KeyValueFieldRes
  #
  # source://kube-dsl//lib/kube-dsl/key_value_field_res.rb#10
  def initialize(name, res, type, required); end

  # source://kube-dsl//lib/kube-dsl/key_value_field_res.rb#23
  def fields_to_rbi(_inflector); end

  # source://kube-dsl//lib/kube-dsl/key_value_field_res.rb#17
  def fields_to_ruby(_inflector); end

  # Returns the value of attribute name.
  #
  # source://kube-dsl//lib/kube-dsl/key_value_field_res.rb#6
  def name; end

  # Returns the value of attribute required.
  #
  # source://kube-dsl//lib/kube-dsl/key_value_field_res.rb#6
  def required; end

  # Returns the value of attribute required.
  #
  # source://kube-dsl//lib/kube-dsl/key_value_field_res.rb#6
  def required?; end

  # Returns the value of attribute res.
  #
  # source://kube-dsl//lib/kube-dsl/key_value_field_res.rb#6
  def res; end

  # source://kube-dsl//lib/kube-dsl/key_value_field_res.rb#36
  def serialize_call(_inflector); end

  # Returns the value of attribute type.
  #
  # source://kube-dsl//lib/kube-dsl/key_value_field_res.rb#6
  def type; end

  # source://kube-dsl//lib/kube-dsl/key_value_field_res.rb#30
  def validations(_inflector); end
end

# source://kube-dsl//lib/kube-dsl/key_value_fields.rb#6
class KubeDSL::KeyValueFields
  extend T::Sig

  # T::Sig::WithoutRuntime.sig { params(format: Symbol).void }
  #
  # @return [KeyValueFields] a new instance of KeyValueFields
  #
  # source://kube-dsl//lib/kube-dsl/key_value_fields.rb#16
  sig { params(format: Symbol).void }
  def initialize(format: T.unsafe(nil)); end

  # T::Sig::WithoutRuntime.sig { params(key: Symbol, value: String).void }
  #
  # source://kube-dsl//lib/kube-dsl/key_value_fields.rb#22
  sig { params(key: Symbol, value: String).void }
  def add(key, value); end

  # T::Sig::WithoutRuntime.sig { returns(Symbol) }
  #
  # source://kube-dsl//lib/kube-dsl/key_value_fields.rb#10
  def format; end

  # T::Sig::WithoutRuntime.sig { params(key: Symbol).returns(T.nilable(String)) }
  #
  # source://kube-dsl//lib/kube-dsl/key_value_fields.rb#32
  sig { params(key: Symbol).returns(T.nilable(String)) }
  def get(key); end

  # T::Sig::WithoutRuntime.sig { returns(T::Hash[Symbol, String]) }
  #
  # source://kube-dsl//lib/kube-dsl/key_value_fields.rb#13
  def kv_pairs; end

  # T::Sig::WithoutRuntime.sig { params(other: KubeDSL::KeyValueFields).void }
  #
  # source://kube-dsl//lib/kube-dsl/key_value_fields.rb#49
  sig { params(other: KubeDSL::KeyValueFields).void }
  def merge!(other); end

  # T::Sig::WithoutRuntime.sig { params(key: Symbol).void }
  #
  # source://kube-dsl//lib/kube-dsl/key_value_fields.rb#27
  sig { params(key: Symbol).void }
  def remove(key); end

  # T::Sig::WithoutRuntime.sig { returns(T::Hash[Symbol, String]) }
  #
  # source://kube-dsl//lib/kube-dsl/key_value_fields.rb#42
  sig { returns(T::Hash[Symbol, String]) }
  def serialize; end

  # T::Sig::WithoutRuntime.sig { params(key: Symbol, value: String).void }
  #
  # source://kube-dsl//lib/kube-dsl/key_value_fields.rb#37
  sig { params(key: Symbol, value: String).void }
  def set(key, value); end

  private

  # T::Sig::WithoutRuntime.sig { params(data: String).returns(String) }
  #
  # source://kube-dsl//lib/kube-dsl/key_value_fields.rb#56
  sig { params(data: String).returns(String) }
  def serialize_value(data); end
end

# source://kube-dsl//lib/kube-dsl/object_field_res.rb#3
class KubeDSL::ObjectFieldRes
  include ::KubeDSL::StringHelpers

  # @return [ObjectFieldRes] a new instance of ObjectFieldRes
  #
  # source://kube-dsl//lib/kube-dsl/object_field_res.rb#8
  def initialize(name, res); end

  # source://kube-dsl//lib/kube-dsl/object_field_res.rb#19
  def fields_to_rbi(_inflector); end

  # source://kube-dsl//lib/kube-dsl/object_field_res.rb#13
  def fields_to_ruby(_inflector); end

  # Returns the value of attribute name.
  #
  # source://kube-dsl//lib/kube-dsl/object_field_res.rb#6
  def name; end

  # Returns the value of attribute res.
  #
  # source://kube-dsl//lib/kube-dsl/object_field_res.rb#6
  def res; end

  # source://kube-dsl//lib/kube-dsl/object_field_res.rb#36
  def serialize_call(_inflector); end

  # source://kube-dsl//lib/kube-dsl/object_field_res.rb#29
  def validations(_inflector); end

  private

  # source://kube-dsl//lib/kube-dsl/object_field_res.rb#46
  def ruby_safe_name; end

  # source://kube-dsl//lib/kube-dsl/object_field_res.rb#42
  def ruby_type; end
end

# source://kube-dsl//lib/kube-dsl/rbi_helpers.rb#3
module KubeDSL::RbiHelpers
  include ::KubeDSL::StringHelpers

  # source://kube-dsl//lib/kube-dsl/rbi_helpers.rb#13
  def rbi_type_for(type_str); end
end

# source://kube-dsl//lib/kube-dsl/rbi_helpers.rb#6
KubeDSL::RbiHelpers::TYPE_MAP = T.let(T.unsafe(nil), Hash)

# source://kube-dsl//lib/kube-dsl/ref.rb#3
class KubeDSL::Ref
  include ::KubeDSL::StringHelpers

  # @return [Ref] a new instance of Ref
  #
  # source://kube-dsl//lib/kube-dsl/ref.rb#9
  def initialize(str, ruby_namespace_prefix, inflector, schema_dir, autoload_prefix, serialize_handlers); end

  # Returns the value of attribute autoload_prefix.
  #
  # source://kube-dsl//lib/kube-dsl/ref.rb#7
  def autoload_prefix; end

  # source://kube-dsl//lib/kube-dsl/ref.rb#39
  def document; end

  # Returns the value of attribute inflector.
  #
  # source://kube-dsl//lib/kube-dsl/ref.rb#6
  def inflector; end

  # @return [Boolean]
  #
  # source://kube-dsl//lib/kube-dsl/ref.rb#31
  def inline?; end

  # Returns the value of attribute kind.
  #
  # source://kube-dsl//lib/kube-dsl/ref.rb#6
  def kind; end

  # source://kube-dsl//lib/kube-dsl/ref.rb#35
  def meta; end

  # Returns the value of attribute namespace.
  #
  # source://kube-dsl//lib/kube-dsl/ref.rb#6
  def namespace; end

  # @return [Boolean]
  #
  # source://kube-dsl//lib/kube-dsl/ref.rb#43
  def object?; end

  # source://kube-dsl//lib/kube-dsl/ref.rb#59
  def ruby_autoload_path; end

  # source://kube-dsl//lib/kube-dsl/ref.rb#47
  def ruby_namespace; end

  # Returns the value of attribute ruby_namespace_prefix.
  #
  # source://kube-dsl//lib/kube-dsl/ref.rb#7
  def ruby_namespace_prefix; end

  # Returns the value of attribute schema_dir.
  #
  # source://kube-dsl//lib/kube-dsl/ref.rb#6
  def schema_dir; end

  # Returns the value of attribute serialize_handlers.
  #
  # source://kube-dsl//lib/kube-dsl/ref.rb#7
  def serialize_handlers; end

  # Returns the value of attribute str.
  #
  # source://kube-dsl//lib/kube-dsl/ref.rb#6
  def str; end

  # Returns the value of attribute version.
  #
  # source://kube-dsl//lib/kube-dsl/ref.rb#6
  def version; end

  private

  # source://kube-dsl//lib/kube-dsl/ref.rb#71
  def filename; end
end

# source://kube-dsl//lib/kube-dsl/resource.rb#4
class KubeDSL::Resource
  extend T::Sig

  # T::Sig::WithoutRuntime.sig { params(contents: T.any(String, T::Array[T.untyped], T::Hash[T.untyped, T.untyped])).void }
  #
  # @return [Resource] a new instance of Resource
  #
  # source://kube-dsl//lib/kube-dsl/resource.rb#11
  sig { params(contents: T.any(String, T::Array[T.untyped], T::Hash[T.untyped, T.untyped])).void }
  def initialize(contents); end

  # T::Sig::WithoutRuntime.sig { returns(T.any(String, T::Array[T.untyped], T::Hash[T.untyped, T.untyped])) }
  #
  # source://kube-dsl//lib/kube-dsl/resource.rb#8
  def contents; end

  # T::Sig::WithoutRuntime.sig { returns(T.nilable(T.any(String, T::Array[T.untyped], T::Hash[T.untyped, T.untyped]))) }
  #
  # source://kube-dsl//lib/kube-dsl/resource.rb#16
  sig { returns(T.nilable(T.any(String, T::Array[T.untyped], T::Hash[T.untyped, T.untyped]))) }
  def serialize; end

  # T::Sig::WithoutRuntime.sig { returns(KubeDSL::Resource) }
  #
  # source://kube-dsl//lib/kube-dsl/resource.rb#26
  sig { returns(KubeDSL::Resource) }
  def to_resource; end

  # T::Sig::WithoutRuntime.sig { returns(String) }
  #
  # source://kube-dsl//lib/kube-dsl/resource.rb#21
  sig { returns(String) }
  def to_yaml; end

  private

  # T::Sig::WithoutRuntime.sig {
  #   params(obj: T.any(String, KubeDSL::AllowBlank, T::Array[T.untyped], T::Hash[T.untyped, T.untyped]))
  #     .returns(T.nilable(T.any(String, T::Array[T.untyped], T::Hash[T.untyped, T.untyped])))
  # }
  #
  # source://kube-dsl//lib/kube-dsl/resource.rb#36
  sig do
    params(
      obj: T.any(String, KubeDSL::AllowBlank, T::Array[T.untyped], T::Hash[T.untyped, T.untyped])
    ).returns(T.nilable(T.any(String, T::Array[T.untyped], T::Hash[T.untyped, T.untyped])))
  end
  def cleanup(obj); end
end

# source://kube-dsl//lib/kube-dsl/resource_meta.rb#4
class KubeDSL::ResourceMeta
  include ::KubeDSL::StringHelpers

  # @return [ResourceMeta] a new instance of ResourceMeta
  #
  # source://kube-dsl//lib/kube-dsl/resource_meta.rb#9
  def initialize(ref, inflector, serialize_handlers); end

  # @return [Boolean]
  #
  # source://kube-dsl//lib/kube-dsl/resource_meta.rb#20
  def empty?; end

  # @return [Boolean]
  #
  # source://kube-dsl//lib/kube-dsl/resource_meta.rb#16
  def external?; end

  # Returns the value of attribute fields.
  #
  # source://kube-dsl//lib/kube-dsl/resource_meta.rb#7
  def fields; end

  # Returns the value of attribute inflector.
  #
  # source://kube-dsl//lib/kube-dsl/resource_meta.rb#7
  def inflector; end

  # Returns the value of attribute ref.
  #
  # source://kube-dsl//lib/kube-dsl/resource_meta.rb#7
  def ref; end

  # Returns the value of attribute serialize_handlers.
  #
  # source://kube-dsl//lib/kube-dsl/resource_meta.rb#7
  def serialize_handlers; end

  # source://kube-dsl//lib/kube-dsl/resource_meta.rb#51
  def to_rbi; end

  # source://kube-dsl//lib/kube-dsl/resource_meta.rb#24
  def to_ruby; end

  private

  # source://kube-dsl//lib/kube-dsl/resource_meta.rb#106
  def fields_to_rbi(level); end

  # source://kube-dsl//lib/kube-dsl/resource_meta.rb#97
  def fields_to_ruby(level); end

  # source://kube-dsl//lib/kube-dsl/resource_meta.rb#91
  def indent(*lines, level); end

  # source://kube-dsl//lib/kube-dsl/resource_meta.rb#150
  def quote_sym(sym_str); end

  # source://kube-dsl//lib/kube-dsl/resource_meta.rb#142
  def serialize_call_for(field); end

  # source://kube-dsl//lib/kube-dsl/resource_meta.rb#127
  def serialize_method(level); end

  # source://kube-dsl//lib/kube-dsl/resource_meta.rb#118
  def validations(level); end
end

# source://kube-dsl//lib/kube-dsl/serialize_handler.rb#4
class KubeDSL::SerializeHandler
  # @return [SerializeHandler] a new instance of SerializeHandler
  #
  # source://kube-dsl//lib/kube-dsl/serialize_handler.rb#7
  def initialize(namespace, version, kind, field, &block); end

  # Returns the value of attribute block.
  #
  # source://kube-dsl//lib/kube-dsl/serialize_handler.rb#5
  def block; end

  # Returns the value of attribute field.
  #
  # source://kube-dsl//lib/kube-dsl/serialize_handler.rb#5
  def field; end

  # source://kube-dsl//lib/kube-dsl/serialize_handler.rb#22
  def handle(res, inflector); end

  # Returns the value of attribute kind.
  #
  # source://kube-dsl//lib/kube-dsl/serialize_handler.rb#5
  def kind; end

  # @return [Boolean]
  #
  # source://kube-dsl//lib/kube-dsl/serialize_handler.rb#15
  def matches?(ref, field); end

  # Returns the value of attribute namespace.
  #
  # source://kube-dsl//lib/kube-dsl/serialize_handler.rb#5
  def namespace; end

  # Returns the value of attribute version.
  #
  # source://kube-dsl//lib/kube-dsl/serialize_handler.rb#5
  def version; end
end

# source://kube-dsl//lib/kube-dsl/string_helpers.rb#3
module KubeDSL::StringHelpers
  extend ::KubeDSL::StringHelpers

  # source://kube-dsl//lib/kube-dsl/string_helpers.rb#10
  def capitalize(str); end

  # source://kube-dsl//lib/kube-dsl/string_helpers.rb#14
  def underscore(str); end

  # source://kube-dsl//lib/kube-dsl/string_helpers.rb#22
  def unkeywordify(str); end
end

# source://kube-dsl//lib/kube-dsl/string_helpers.rb#4
KubeDSL::StringHelpers::RUBY_KEYWORDS = T.let(T.unsafe(nil), Array)

# source://kube-dsl//lib/kube-dsl/validations.rb#4
class KubeDSL::ValidationError < ::StandardError; end

# source://kube-dsl//lib/kube-dsl/validations.rb#6
module KubeDSL::Validations
  class << self
    # @private
    #
    # source://kube-dsl//lib/kube-dsl/validations.rb#225
    sig { params(base: T.untyped).returns(T.untyped) }
    def extended(base); end
  end
end

# source://kube-dsl//lib/kube-dsl/validations.rb#49
class KubeDSL::Validations::ArrayValidator
  # @return [ArrayValidator] a new instance of ArrayValidator
  #
  # source://kube-dsl//lib/kube-dsl/validations.rb#52
  sig { params(field_name: T.untyped, opts: T.untyped).void }
  def initialize(field_name, opts); end

  # Returns the value of attribute field_name.
  #
  # source://kube-dsl//lib/kube-dsl/validations.rb#50
  def field_name; end

  # Returns the value of attribute kind_of.
  #
  # source://kube-dsl//lib/kube-dsl/validations.rb#50
  def kind_of; end

  # source://kube-dsl//lib/kube-dsl/validations.rb#57
  sig { params(obj: T.untyped, errors: T.untyped, nesting: T.untyped).returns(T.untyped) }
  def validate(obj, errors, nesting); end
end

# source://kube-dsl//lib/kube-dsl/validations.rb#163
module KubeDSL::Validations::ClassMethods
  # source://kube-dsl//lib/kube-dsl/validations.rb#164
  sig { params(field_name: T.untyped, options: T.untyped).returns(T.untyped) }
  def validates(field_name, options); end

  # source://kube-dsl//lib/kube-dsl/validations.rb#187
  sig { returns(T.untyped) }
  def validators; end
end

# source://kube-dsl//lib/kube-dsl/validations.rb#99
class KubeDSL::Validations::FieldValidator
  # @return [FieldValidator] a new instance of FieldValidator
  #
  # source://kube-dsl//lib/kube-dsl/validations.rb#102
  sig { params(field_name: T.untyped, options: T.untyped).void }
  def initialize(field_name, options = T.unsafe(nil)); end

  # Returns the value of attribute field_name.
  #
  # source://kube-dsl//lib/kube-dsl/validations.rb#100
  def field_name; end

  # Returns the value of attribute format_validator.
  #
  # source://kube-dsl//lib/kube-dsl/validations.rb#100
  def format_validator; end

  # source://kube-dsl//lib/kube-dsl/validations.rb#107
  sig { params(obj: T.untyped, errors: T.untyped, nesting: T.untyped).returns(T.untyped) }
  def validate(obj, errors, nesting); end
end

# source://kube-dsl//lib/kube-dsl/validations.rb#74
class KubeDSL::Validations::FormatValidator
  # @return [FormatValidator] a new instance of FormatValidator
  #
  # source://kube-dsl//lib/kube-dsl/validations.rb#77
  sig { params(format: T.untyped).void }
  def initialize(format); end

  # Returns the value of attribute format.
  #
  # source://kube-dsl//lib/kube-dsl/validations.rb#75
  def format; end

  # source://kube-dsl//lib/kube-dsl/validations.rb#85
  sig { returns(T.untyped) }
  def klasses; end

  # @return [Boolean]
  #
  # source://kube-dsl//lib/kube-dsl/validations.rb#81
  sig { params(obj: T.untyped).returns(T.untyped) }
  def valid?(obj); end
end

# source://kube-dsl//lib/kube-dsl/validations.rb#148
class KubeDSL::Validations::InclusionValidator
  # @return [InclusionValidator] a new instance of InclusionValidator
  #
  # source://kube-dsl//lib/kube-dsl/validations.rb#151
  sig { params(field_name: T.untyped, opts: T.untyped).void }
  def initialize(field_name, opts); end

  # Returns the value of attribute field_name.
  #
  # source://kube-dsl//lib/kube-dsl/validations.rb#149
  def field_name; end

  # Returns the value of attribute list.
  #
  # source://kube-dsl//lib/kube-dsl/validations.rb#149
  def list; end

  # source://kube-dsl//lib/kube-dsl/validations.rb#156
  sig { params(obj: T.untyped, errors: T.untyped, nesting: T.untyped).returns(T.untyped) }
  def validate(obj, errors, nesting); end
end

# source://kube-dsl//lib/kube-dsl/validations.rb#192
module KubeDSL::Validations::InstanceMethods
  # @return [Boolean]
  #
  # source://kube-dsl//lib/kube-dsl/validations.rb#218
  sig { returns(T.untyped) }
  def valid?; end

  # source://kube-dsl//lib/kube-dsl/validations.rb#193
  sig { params(errors: T.untyped, nesting: T.untyped).returns(T.untyped) }
  def validate(errors = T.unsafe(nil), nesting = T.unsafe(nil)); end

  # source://kube-dsl//lib/kube-dsl/validations.rb#208
  sig { returns(T.untyped) }
  def validate!; end
end

# source://kube-dsl//lib/kube-dsl/validations.rb#129
class KubeDSL::Validations::KeyValueValidator
  # @return [KeyValueValidator] a new instance of KeyValueValidator
  #
  # source://kube-dsl//lib/kube-dsl/validations.rb#132
  sig { params(field_name: T.untyped, options: T.untyped).void }
  def initialize(field_name, options = T.unsafe(nil)); end

  # Returns the value of attribute field_name.
  #
  # source://kube-dsl//lib/kube-dsl/validations.rb#130
  def field_name; end

  # Returns the value of attribute format_validator.
  #
  # source://kube-dsl//lib/kube-dsl/validations.rb#130
  def format_validator; end

  # source://kube-dsl//lib/kube-dsl/validations.rb#137
  sig { params(obj: T.untyped, errors: T.untyped, nesting: T.untyped).returns(T.untyped) }
  def validate(obj, errors, nesting); end
end

# source://kube-dsl//lib/kube-dsl/validations.rb#114
class KubeDSL::Validations::ObjectValidator
  # @return [ObjectValidator] a new instance of ObjectValidator
  #
  # source://kube-dsl//lib/kube-dsl/validations.rb#117
  sig { params(field_name: T.untyped, opts: T.untyped).void }
  def initialize(field_name, opts); end

  # Returns the value of attribute field_name.
  #
  # source://kube-dsl//lib/kube-dsl/validations.rb#115
  def field_name; end

  # Returns the value of attribute kind_of.
  #
  # source://kube-dsl//lib/kube-dsl/validations.rb#115
  def kind_of; end

  # source://kube-dsl//lib/kube-dsl/validations.rb#122
  sig { params(obj: T.untyped, errors: T.untyped, nesting: T.untyped).returns(T.untyped) }
  def validate(obj, errors, nesting); end
end

# source://kube-dsl//lib/kube-dsl/validations.rb#24
class KubeDSL::Validations::PresenceValidator
  # @return [PresenceValidator] a new instance of PresenceValidator
  #
  # source://kube-dsl//lib/kube-dsl/validations.rb#27
  sig { params(field_name: T.untyped, presence: T.untyped).void }
  def initialize(field_name, presence); end

  # Returns the value of attribute field_name.
  #
  # source://kube-dsl//lib/kube-dsl/validations.rb#25
  def field_name; end

  # Returns the value of attribute presence.
  #
  # source://kube-dsl//lib/kube-dsl/validations.rb#25
  def presence; end

  # source://kube-dsl//lib/kube-dsl/validations.rb#32
  sig { params(obj: T.untyped, errors: T.untyped, nesting: T.untyped).returns(T.untyped) }
  def validate(obj, errors, nesting); end

  private

  # @return [Boolean]
  #
  # source://kube-dsl//lib/kube-dsl/validations.rb#40
  sig { params(obj: T.untyped).returns(T.untyped) }
  def obj_empty?(obj); end
end

# source://kube-dsl//lib/kube-dsl/validations.rb#7
class KubeDSL::Validations::ValidationErrors
  # @return [ValidationErrors] a new instance of ValidationErrors
  #
  # source://kube-dsl//lib/kube-dsl/validations.rb#10
  sig { void }
  def initialize; end

  # source://kube-dsl//lib/kube-dsl/validations.rb#14
  sig { params(field_name: T.untyped, msg: T.untyped).returns(T.untyped) }
  def add(field_name, msg); end

  # @return [Boolean]
  #
  # source://kube-dsl//lib/kube-dsl/validations.rb#19
  sig { returns(T.untyped) }
  def empty?; end

  # Returns the value of attribute messages.
  #
  # source://kube-dsl//lib/kube-dsl/validations.rb#8
  def messages; end
end

# source://kube-dsl//lib/kube-dsl/value_fields.rb#6
module KubeDSL::ValueFields
  class << self
    # @private
    #
    # source://kube-dsl//lib/kube-dsl/value_fields.rb#165
    sig { params(base: T.untyped).returns(T.untyped) }
    def extended(base); end
  end
end

# source://kube-dsl//lib/kube-dsl/value_fields.rb#9
module KubeDSL::ValueFields::ClassMethods
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#110
  sig { returns(T.untyped) }
  def __fields__; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#66
  sig { params(field: T.untyped, accessor: T.untyped, field_block: T.untyped).returns(T.untyped) }
  def array_field(field, accessor = T.unsafe(nil), &field_block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#49
  sig { params(field: T.untyped, format: T.untyped).returns(T.untyped) }
  def key_value_field(field, format:); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#28
  sig { params(field: T.untyped, allow_empty: T.untyped, field_block: T.untyped).returns(T.untyped) }
  def object_field(field, allow_empty: T.unsafe(nil), &field_block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#14
  sig { params(field: T.untyped, default: T.untyped).returns(T.untyped) }
  def value_field(field, default: T.unsafe(nil)); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#10
  sig { params(fields: T.untyped).returns(T.untyped) }
  def value_fields(*fields); end
end

# source://kube-dsl//lib/kube-dsl/value_fields.rb#7
class KubeDSL::ValueFields::ClassMismatchError < ::StandardError; end

# source://kube-dsl//lib/kube-dsl/value_fields.rb#121
module KubeDSL::ValueFields::InstanceMethods
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#156
  sig { params(other: T.untyped, fields: T.untyped).returns(T.untyped) }
  def merge(other, fields); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#122
  sig { params(other: T.untyped, fields: T.untyped).returns(T.untyped) }
  def merge!(other, fields: T.unsafe(nil)); end
end
