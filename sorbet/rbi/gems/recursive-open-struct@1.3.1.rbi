# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `recursive-open-struct` gem.
# Please instead update this file by running `bin/tapioca gem recursive-open-struct`.


# TODO: When we care less about Rubies before 2.4.0, match OpenStruct's method
# names instead of doing things like aliasing `new_ostruct_member` to
# `new_ostruct_member!`
#
# TODO: `#*_as_a_hash` deprecated. Nested hashes can be referenced using
# `#to_h`.
#
# source://recursive-open-struct//lib/recursive_open_struct/version.rb#5
class RecursiveOpenStruct < ::OpenStruct
  include ::RecursiveOpenStruct::Dig
  include ::RecursiveOpenStruct::DebugInspect

  # @return [RecursiveOpenStruct] a new instance of RecursiveOpenStruct
  #
  # source://recursive-open-struct//lib/recursive_open_struct.rb#31
  def initialize(hash = T.unsafe(nil), passed_options = T.unsafe(nil)); end

  # source://recursive-open-struct//lib/recursive_open_struct.rb#76
  def [](name); end

  # source://recursive-open-struct//lib/recursive_open_struct.rb#97
  def []=(name, value); end

  # source://recursive-open-struct//lib/recursive_open_struct.rb#175
  def delete_field(name); end

  # source://recursive-open-struct//lib/recursive_open_struct.rb#140
  def freeze; end

  # Adapted implementation of method_missing to accommodate the differences
  # between ROS and OS.
  #
  # source://recursive-open-struct//lib/recursive_open_struct.rb#112
  def method_missing(mid, *args); end

  # TODO: Rename to new_ostruct_member! once we care less about Rubies before
  # 2.4.0.
  #
  # source://recursive-open-struct//lib/recursive_open_struct.rb#150
  def new_ostruct_member(name); end

  # source://recursive-open-struct//lib/recursive_open_struct.rb#55
  def to_h; end

  # TODO: deprecated, unsupported by OpenStruct. OpenStruct does not consider
  # itself to be a "kind of" Hash.
  #
  # source://recursive-open-struct//lib/recursive_open_struct.rb#55
  def to_hash; end

  private

  # source://recursive-open-struct//lib/recursive_open_struct.rb#200
  def _create_sub_element_(hash, **overrides); end

  # source://recursive-open-struct//lib/recursive_open_struct.rb#194
  def _get_key_from_table_(name); end

  # source://recursive-open-struct//lib/recursive_open_struct.rb#185
  def initialize_dup(orig); end

  # TODO: Rename to new_ostruct_member! once we care less about Rubies before
  # 2.4.0.
  # Support Ruby 2.4.0+'s changes in a way that doesn't require dynamically
  # modifying ROS.
  #
  # TODO: Once we care less about Rubies before 2.4.0, reverse this so that
  # new_ostruct_member points to our version and not OpenStruct's.
  #
  # source://recursive-open-struct//lib/recursive_open_struct.rb#150
  def new_ostruct_member!(name); end

  # source://recursive-open-struct//lib/recursive_open_struct.rb#204
  def recurse_over_array(array); end

  # Makes sure ROS responds as expected on #respond_to? and #method requests
  #
  # @return [Boolean]
  #
  # source://recursive-open-struct//lib/recursive_open_struct.rb#105
  def respond_to_missing?(mid, include_private = T.unsafe(nil)); end

  class << self
    # source://recursive-open-struct//lib/recursive_open_struct.rb#22
    def default_options; end
  end
end

# source://recursive-open-struct//lib/recursive_open_struct/debug_inspect.rb#1
module RecursiveOpenStruct::DebugInspect
  # source://recursive-open-struct//lib/recursive_open_struct/debug_inspect.rb#2
  def debug_inspect(io = T.unsafe(nil), indent_level = T.unsafe(nil), recursion_limit = T.unsafe(nil)); end

  # source://recursive-open-struct//lib/recursive_open_struct/debug_inspect.rb#6
  def display_recursive_open_struct(io, ostrct_or_hash, indent_level, recursion_limit); end
end

# source://recursive-open-struct//lib/recursive_open_struct/deep_dup.rb#2
class RecursiveOpenStruct::DeepDup
  # @return [DeepDup] a new instance of DeepDup
  #
  # source://recursive-open-struct//lib/recursive_open_struct/deep_dup.rb#3
  def initialize(opts = T.unsafe(nil)); end

  # source://recursive-open-struct//lib/recursive_open_struct/deep_dup.rb#8
  def call(obj); end

  private

  # source://recursive-open-struct//lib/recursive_open_struct/deep_dup.rb#14
  def deep_dup(obj, visited = T.unsafe(nil)); end

  # source://recursive-open-struct//lib/recursive_open_struct/deep_dup.rb#29
  def value_or_deep_dup(value, visited); end
end

# source://recursive-open-struct//lib/recursive_open_struct/dig.rb#2
module RecursiveOpenStruct::Dig
  # Replaces +OpenStruct#dig+ to properly support treating nested values as
  # RecursiveOpenStructs instead of returning the nested Hashes.
  #
  # source://recursive-open-struct//lib/recursive_open_struct/dig.rb#6
  def dig(name, *names); end
end

# source://recursive-open-struct//lib/recursive_open_struct/version.rb#6
RecursiveOpenStruct::VERSION = T.let(T.unsafe(nil), String)
