# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `krane` gem.
# Please instead update this file by running `bin/tapioca gem krane`.


# source://krane//lib/krane/delayed_exceptions.rb#3
module DelayedExceptions
  # source://krane//lib/krane/delayed_exceptions.rb#4
  def with_delayed_exceptions(enumerable, *catch, &block); end
end

# source://krane//lib/krane/annotation.rb#3
module Krane; end

# source://krane//lib/krane/annotation.rb#4
module Krane::Annotation
  class << self
    # source://krane//lib/krane/annotation.rb#6
    def for(suffix); end
  end
end

# source://krane//lib/krane/cluster_resource_discovery.rb#5
class Krane::ClusterResourceDiscovery
  # @return [ClusterResourceDiscovery] a new instance of ClusterResourceDiscovery
  #
  # source://krane//lib/krane/cluster_resource_discovery.rb#8
  def initialize(task_config:, namespace_tags: T.unsafe(nil)); end

  # source://krane//lib/krane/cluster_resource_discovery.rb#6
  def context(*_arg0, **_arg1, &_arg2); end

  # source://krane//lib/krane/cluster_resource_discovery.rb#14
  def crds; end

  # source://krane//lib/krane/cluster_resource_discovery.rb#40
  def fetch_mutating_webhook_configurations; end

  # source://krane//lib/krane/cluster_resource_discovery.rb#30
  def fetch_resources(namespaced: T.unsafe(nil)); end

  # source://krane//lib/krane/cluster_resource_discovery.rb#6
  def logger(*_arg0, **_arg1, &_arg2); end

  # source://krane//lib/krane/cluster_resource_discovery.rb#6
  def namespace(*_arg0, **_arg1, &_arg2); end

  # source://krane//lib/krane/cluster_resource_discovery.rb#21
  def prunable_resources(namespaced:); end

  private

  # source://krane//lib/krane/cluster_resource_discovery.rb#66
  def api_paths; end

  # During discovery, the api paths may not actually be at the root, so we must programatically find it.
  #
  # source://krane//lib/krane/cluster_resource_discovery.rb#56
  def base_api_path; end

  # source://krane//lib/krane/cluster_resource_discovery.rb#78
  def fetch_api_path(path); end

  # source://krane//lib/krane/cluster_resource_discovery.rb#104
  def fetch_crds; end

  # source://krane//lib/krane/cluster_resource_discovery.rb#114
  def kubectl; end

  # source://krane//lib/krane/cluster_resource_discovery.rb#90
  def resource_hash(path, namespaced, blob); end
end

# source://krane//lib/krane/concurrency.rb#3
module Krane::Concurrency
  class << self
    # @raise [ArgumentError]
    #
    # source://krane//lib/krane/concurrency.rb#6
    def split_across_threads(all_work, max_threads: T.unsafe(nil), &block); end
  end
end

# source://krane//lib/krane/concurrency.rb#4
Krane::Concurrency::MAX_THREADS = T.let(T.unsafe(nil), Integer)

# source://krane//lib/krane/kubernetes_resource/config_map.rb#3
class Krane::ConfigMap < ::Krane::KubernetesResource
  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/config_map.rb#14
  def deploy_failed?; end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/config_map.rb#6
  def deploy_succeeded?; end

  # source://krane//lib/krane/kubernetes_resource/config_map.rb#10
  def status; end

  # source://krane//lib/krane/kubernetes_resource/config_map.rb#18
  def timeout_message; end
end

# source://krane//lib/krane/kubernetes_resource/config_map.rb#4
Krane::ConfigMap::TIMEOUT = T.let(T.unsafe(nil), ActiveSupport::Duration)

# source://krane//lib/krane/container_logs.rb#3
class Krane::ContainerLogs
  # @return [ContainerLogs] a new instance of ContainerLogs
  #
  # source://krane//lib/krane/container_logs.rb#8
  def initialize(parent_id:, container_name:, namespace:, context:, logger:); end

  # Returns the value of attribute container_name.
  #
  # source://krane//lib/krane/container_logs.rb#4
  def container_name; end

  # @return [Boolean]
  #
  # source://krane//lib/krane/container_logs.rb#25
  def empty?; end

  # Returns the value of attribute lines.
  #
  # source://krane//lib/krane/container_logs.rb#4
  def lines; end

  # source://krane//lib/krane/container_logs.rb#40
  def print_all; end

  # source://krane//lib/krane/container_logs.rb#29
  def print_latest(prefix: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://krane//lib/krane/container_logs.rb#44
  def printing_started?; end

  # source://krane//lib/krane/container_logs.rb#19
  def sync; end

  private

  # source://krane//lib/krane/container_logs.rb#50
  def fetch_latest; end

  # source://krane//lib/krane/container_logs.rb#61
  def kubectl; end

  # @return [Boolean]
  #
  # source://krane//lib/krane/container_logs.rb#99
  def likely_duplicate?(timestamp); end

  # source://krane//lib/krane/container_logs.rb#66
  def rfc3339_timestamp(time); end

  # source://krane//lib/krane/container_logs.rb#70
  def sort_and_deduplicate(logs); end

  # source://krane//lib/krane/container_logs.rb#91
  def split_timestamped_line(log_line); end
end

# source://krane//lib/krane/container_logs.rb#6
Krane::ContainerLogs::DEFAULT_LINE_LIMIT = T.let(T.unsafe(nil), Integer)

# source://krane//lib/krane/container_overrides.rb#3
class Krane::ContainerOverrides
  # @return [ContainerOverrides] a new instance of ContainerOverrides
  #
  # source://krane//lib/krane/container_overrides.rb#6
  def initialize(command: T.unsafe(nil), arguments: T.unsafe(nil), env_vars: T.unsafe(nil), image_tag: T.unsafe(nil)); end

  # source://krane//lib/krane/container_overrides.rb#13
  def apply!(container); end

  # Returns the value of attribute arguments.
  #
  # source://krane//lib/krane/container_overrides.rb#4
  def arguments; end

  # Returns the value of attribute command.
  #
  # source://krane//lib/krane/container_overrides.rb#4
  def command; end

  # Returns the value of attribute env_vars.
  #
  # source://krane//lib/krane/container_overrides.rb#4
  def env_vars; end

  # Returns the value of attribute image_tag.
  #
  # source://krane//lib/krane/container_overrides.rb#4
  def image_tag; end
end

# source://krane//lib/krane/kubernetes_resource/cron_job.rb#3
class Krane::CronJob < ::Krane::KubernetesResource
  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/cron_job.rb#10
  def deploy_failed?; end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/cron_job.rb#6
  def deploy_succeeded?; end

  # source://krane//lib/krane/kubernetes_resource/cron_job.rb#14
  def timeout_message; end
end

# source://krane//lib/krane/kubernetes_resource/cron_job.rb#4
Krane::CronJob::TIMEOUT = T.let(T.unsafe(nil), ActiveSupport::Duration)

# source://krane//lib/krane/kubernetes_resource/custom_resource.rb#5
class Krane::CustomResource < ::Krane::KubernetesResource
  # @return [CustomResource] a new instance of CustomResource
  #
  # source://krane//lib/krane/kubernetes_resource/custom_resource.rb#11
  def initialize(namespace:, context:, definition:, logger:, crd:, statsd_tags: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/custom_resource.rb#28
  def deploy_failed?; end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/custom_resource.rb#21
  def deploy_succeeded?; end

  # source://krane//lib/krane/kubernetes_resource/custom_resource.rb#35
  def failure_message; end

  # source://krane//lib/krane/kubernetes_resource/custom_resource.rb#49
  def status; end

  # source://krane//lib/krane/kubernetes_resource/custom_resource.rb#17
  def timeout; end

  # source://krane//lib/krane/kubernetes_resource/custom_resource.rb#41
  def timeout_message; end

  # source://krane//lib/krane/kubernetes_resource/custom_resource.rb#61
  def type; end

  # source://krane//lib/krane/kubernetes_resource/custom_resource.rb#65
  def validate_definition(*_arg0, **_arg1); end

  private

  # source://krane//lib/krane/kubernetes_resource/custom_resource.rb#79
  def kind; end

  # source://krane//lib/krane/kubernetes_resource/custom_resource.rb#83
  def rollout_conditions; end
end

# source://krane//lib/krane/kubernetes_resource/custom_resource.rb#6
Krane::CustomResource::TIMEOUT_MESSAGE_DIFFERENT_GENERATIONS = T.let(T.unsafe(nil), String)

# source://krane//lib/krane/kubernetes_resource/custom_resource_definition.rb#3
class Krane::CustomResourceDefinition < ::Krane::KubernetesResource
  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/custom_resource_definition.rb#13
  def deploy_failed?; end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/custom_resource_definition.rb#9
  def deploy_succeeded?; end

  # source://krane//lib/krane/kubernetes_resource/custom_resource_definition.rb#51
  def group; end

  # source://krane//lib/krane/kubernetes_resource/custom_resource_definition.rb#38
  def group_version_kind; end

  # source://krane//lib/krane/kubernetes_resource/custom_resource_definition.rb#47
  def kind; end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/custom_resource_definition.rb#60
  def predeployed?; end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/custom_resource_definition.rb#55
  def prunable?; end

  # source://krane//lib/krane/kubernetes_resource/custom_resource_definition.rb#65
  def rollout_conditions; end

  # source://krane//lib/krane/kubernetes_resource/custom_resource_definition.rb#28
  def status; end

  # source://krane//lib/krane/kubernetes_resource/custom_resource_definition.rb#21
  def timeout_for_instance; end

  # source://krane//lib/krane/kubernetes_resource/custom_resource_definition.rb#17
  def timeout_message; end

  # source://krane//lib/krane/kubernetes_resource/custom_resource_definition.rb#75
  def validate_definition(*_arg0, **_arg1); end

  # source://krane//lib/krane/kubernetes_resource/custom_resource_definition.rb#84
  def validate_rollout_conditions; end

  private

  # source://krane//lib/krane/kubernetes_resource/custom_resource_definition.rb#95
  def names_accepted_condition; end

  # source://krane//lib/krane/kubernetes_resource/custom_resource_definition.rb#100
  def names_accepted_status; end
end

# source://krane//lib/krane/kubernetes_resource/custom_resource_definition.rb#7
Krane::CustomResourceDefinition::GLOBAL = T.let(T.unsafe(nil), TrueClass)

# source://krane//lib/krane/kubernetes_resource/custom_resource_definition.rb#5
Krane::CustomResourceDefinition::ROLLOUT_CONDITIONS_ANNOTATION = T.let(T.unsafe(nil), String)

# source://krane//lib/krane/kubernetes_resource/custom_resource_definition.rb#4
Krane::CustomResourceDefinition::TIMEOUT = T.let(T.unsafe(nil), ActiveSupport::Duration)

# source://krane//lib/krane/kubernetes_resource/custom_resource_definition.rb#6
Krane::CustomResourceDefinition::TIMEOUT_FOR_INSTANCE_ANNOTATION = T.let(T.unsafe(nil), String)

# source://krane//lib/krane/kubernetes_resource/daemon_set.rb#4
class Krane::DaemonSet < ::Krane::PodSetBase
  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/daemon_set.rb#28
  def deploy_failed?; end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/daemon_set.rb#21
  def deploy_succeeded?; end

  # source://krane//lib/krane/kubernetes_resource/daemon_set.rb#33
  def fetch_debug_logs; end

  # Returns the value of attribute pods.
  #
  # source://krane//lib/krane/kubernetes_resource/daemon_set.rb#7
  def pods; end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/daemon_set.rb#38
  def print_debug_logs?; end

  # source://krane//lib/krane/kubernetes_resource/daemon_set.rb#16
  def status; end

  # source://krane//lib/krane/kubernetes_resource/daemon_set.rb#9
  def sync(cache); end

  private

  # source://krane//lib/krane/kubernetes_resource/daemon_set.rb#80
  def find_nodes(cache); end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/daemon_set.rb#96
  def parent_of_pod?(pod_data); end

  # source://krane//lib/krane/kubernetes_resource/daemon_set.rb#70
  def refresh_nodes(cache); end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/daemon_set.rb#59
  def relevant_pods_ready?; end

  # source://krane//lib/krane/kubernetes_resource/daemon_set.rb#90
  def rollout_data; end
end

# source://krane//lib/krane/kubernetes_resource/daemon_set.rb#44
class Krane::DaemonSet::Node
  # @return [Node] a new instance of Node
  #
  # source://krane//lib/krane/kubernetes_resource/daemon_set.rb#53
  def initialize(definition:); end

  # Returns the value of attribute name.
  #
  # source://krane//lib/krane/kubernetes_resource/daemon_set.rb#45
  def name; end

  class << self
    # source://krane//lib/krane/kubernetes_resource/daemon_set.rb#48
    def kind; end
  end
end

# source://krane//lib/krane/kubernetes_resource/daemon_set.rb#6
Krane::DaemonSet::SYNC_DEPENDENCIES = T.let(T.unsafe(nil), Array)

# source://krane//lib/krane/kubernetes_resource/daemon_set.rb#5
Krane::DaemonSet::TIMEOUT = T.let(T.unsafe(nil), ActiveSupport::Duration)

# Adds the methods krane requires to your logger class.
# These methods include helpers for logging consistent headings, as well as facilities for
# displaying key information later, in a summary section, rather than when it occurred.
#
# source://krane//lib/krane/deferred_summary_logging.rb#8
module Krane::DeferredSummaryLogging
  # source://krane//lib/krane/deferred_summary_logging.rb#10
  def initialize(*args); end

  # source://krane//lib/krane/deferred_summary_logging.rb#20
  def blank_line(level = T.unsafe(nil)); end

  # source://krane//lib/krane/deferred_summary_logging.rb#29
  def heading(text, secondary_msg = T.unsafe(nil), secondary_msg_color = T.unsafe(nil)); end

  # source://krane//lib/krane/deferred_summary_logging.rb#24
  def phase_heading(phase_name); end

  # Outputs the deferred summary information saved via @logger.summary.add_action and @logger.summary.add_paragraph
  #
  # source://krane//lib/krane/deferred_summary_logging.rb#39
  def print_summary(status); end

  # source://krane//lib/krane/deferred_summary_logging.rb#15
  def reset; end

  # Returns the value of attribute summary.
  #
  # source://krane//lib/krane/deferred_summary_logging.rb#9
  def summary; end
end

# source://krane//lib/krane/deferred_summary_logging.rb#64
class Krane::DeferredSummaryLogging::DeferredSummary
  # @return [DeferredSummary] a new instance of DeferredSummary
  #
  # source://krane//lib/krane/deferred_summary_logging.rb#67
  def initialize; end

  # source://krane//lib/krane/deferred_summary_logging.rb#72
  def actions_sentence; end

  # Saves a sentence fragment to be displayed in the first sentence of the summary section
  #
  # Example:
  # # The resulting summary will begin with "Created 3 secrets and failed to deploy 2 resources"
  # @logger.summary.add_action("created 3 secrets")
  # @logger.summary.add_action("failed to deploy 2 resources")
  #
  # source://krane//lib/krane/deferred_summary_logging.rb#83
  def add_action(sentence_fragment); end

  # Adds a paragraph to be displayed in the summary section
  # Paragraphs will be printed in the order they were added, separated by a blank line
  # This can be used to log a block of data on a particular topic, e.g. debug info for a particular failed resource
  #
  # source://krane//lib/krane/deferred_summary_logging.rb#90
  def add_paragraph(paragraph); end

  # Returns the value of attribute paragraphs.
  #
  # source://krane//lib/krane/deferred_summary_logging.rb#65
  def paragraphs; end
end

# Ship resources to a namespace
#
# source://krane//lib/krane/deploy_task.rb#50
class Krane::DeployTask
  include ::Krane::DeployTask::InstrumentationProxy
  include ::Krane::TemplateReporting
  extend ::Krane::StatsD::MeasureMethods

  # Initializes the deploy task
  #
  # @param namespace [String] Kubernetes namespace (*required*)
  # @param context [String] Kubernetes context (*required*)
  # @param current_sha [String] The SHA of the commit
  # @param logger [Object] Logger object (defaults to an instance of Krane::FormattedLogger)
  # @param kubectl_instance [Kubectl] Kubectl instance
  # @param bindings [Hash] Bindings parsed by Krane::BindingsParser
  # @param global_timeout [Integer] Timeout in seconds
  # @param selector [Hash] Selector(s) parsed by Krane::LabelSelector
  # @param selector_as_filter [Boolean] Allow selecting a subset of Kubernetes resource templates to deploy
  # @param filenames [Array<String>] An array of filenames and/or directories containing templates (*required*)
  # @param protected_namespaces [Array<String>] Array of protected Kubernetes namespaces (defaults
  #   to Krane::DeployTask::PROTECTED_NAMESPACES)
  # @param render_erb [Boolean] Enable ERB rendering
  # @return [DeployTask] a new instance of DeployTask
  #
  # source://krane//lib/krane/deploy_task.rb#108
  def initialize(namespace:, context:, current_sha: T.unsafe(nil), logger: T.unsafe(nil), kubectl_instance: T.unsafe(nil), bindings: T.unsafe(nil), global_timeout: T.unsafe(nil), selector: T.unsafe(nil), selector_as_filter: T.unsafe(nil), filenames: T.unsafe(nil), protected_namespaces: T.unsafe(nil), render_erb: T.unsafe(nil), kubeconfig: T.unsafe(nil)); end

  # source://krane//lib/krane/statsd.rb#38
  def check_initial_status(*args, **kwargs, &block); end

  # source://krane//lib/krane/statsd.rb#38
  def discover_resources(*args, **kwargs, &block); end

  # source://krane//lib/krane/deploy_task.rb#91
  def kubeclient_builder(*_arg0, **_arg1, &_arg2); end

  # source://krane//lib/krane/deploy_task.rb#60
  def predeploy_sequence; end

  # source://krane//lib/krane/deploy_task.rb#81
  def prune_whitelist; end

  # Runs the task, returning a boolean representing success or failure
  #
  # @return [Boolean]
  #
  # source://krane//lib/krane/deploy_task.rb#130
  def run(**args); end

  # Runs the task, raising exceptions in case of issues
  #
  # @param verify_result [Boolean] Wait for completion and verify success
  # @param prune [Boolean] Enable deletion of resources that do not appear in the template dir
  # @return [nil]
  #
  # source://krane//lib/krane/deploy_task.rb#143
  def run!(verify_result: T.unsafe(nil), prune: T.unsafe(nil)); end

  # source://krane//lib/krane/deploy_task.rb#85
  def server_version; end

  # Returns the value of attribute task_config.
  #
  # source://krane//lib/krane/deploy_task.rb#89
  def task_config; end

  # source://krane//lib/krane/statsd.rb#38
  def validate_configuration(*args, **kwargs, &block); end

  # source://krane//lib/krane/statsd.rb#38
  def validate_resources(*args, **kwargs, &block); end

  private

  # source://krane//lib/krane/deploy_task.rb#200
  def cluster_resource_discoverer; end

  # make sure to never prune the ejson-keys secret
  #
  # source://krane//lib/krane/deploy_task.rb#348
  def confirm_ejson_keys_not_prunable; end

  # @return [Boolean]
  #
  # source://krane//lib/krane/deploy_task.rb#219
  def deploy_has_priority_resources?(resources); end

  # source://krane//lib/krane/deploy_task.rb#368
  def ejson_keys_secret; end

  # source://krane//lib/krane/deploy_task.rb#207
  def ejson_provisioners; end

  # source://krane//lib/krane/deploy_task.rb#364
  def kubectl; end

  # source://krane//lib/krane/deploy_task.rb#337
  def namespace_definition; end

  # source://krane//lib/krane/deploy_task.rb#288
  def partition_dry_run_resources(resources); end

  # source://krane//lib/krane/deploy_task.rb#194
  def resource_deployer; end

  # source://krane//lib/krane/deploy_task.rb#234
  def secrets_from_ejson; end

  # source://krane//lib/krane/deploy_task.rb#379
  def statsd_tags; end

  # source://krane//lib/krane/deploy_task.rb#358
  def tags_from_namespace_labels; end

  # source://krane//lib/krane/deploy_task.rb#333
  def validate_dry_run(resources); end

  # @raise [FatalDeploymentError]
  #
  # source://krane//lib/krane/deploy_task.rb#321
  def validate_globals(resources); end

  # source://krane//lib/krane/deploy_task.rb#384
  def with_retries(limit); end
end

# source://krane//lib/krane/deploy_task.rb#0
module Krane::DeployTask::InstrumentationProxy
  # source://krane//lib/krane/statsd.rb#38
  def check_initial_status(*args, **kwargs, &block); end

  # source://krane//lib/krane/statsd.rb#38
  def discover_resources(*args, **kwargs, &block); end

  # source://krane//lib/krane/statsd.rb#38
  def validate_configuration(*args, **kwargs, &block); end

  # source://krane//lib/krane/statsd.rb#38
  def validate_resources(*args, **kwargs, &block); end
end

# source://krane//lib/krane/deploy_task.rb#54
Krane::DeployTask::PROTECTED_NAMESPACES = T.let(T.unsafe(nil), Array)

# source://krane//lib/krane/deploy_task_config_validator.rb#3
class Krane::DeployTaskConfigValidator < ::Krane::TaskConfigValidator
  # @return [DeployTaskConfigValidator] a new instance of DeployTaskConfigValidator
  #
  # source://krane//lib/krane/deploy_task_config_validator.rb#4
  def initialize(protected_namespaces, prune, *arguments); end

  private

  # source://krane//lib/krane/deploy_task_config_validator.rb#14
  def validate_protected_namespaces; end
end

# source://krane//lib/krane/kubernetes_resource/deployment.rb#5
class Krane::Deployment < ::Krane::KubernetesResource
  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/deployment.rb#58
  def deploy_failed?; end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/deployment.rb#36
  def deploy_succeeded?; end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/deployment.rb#90
  def deploy_timed_out?; end

  # source://krane//lib/krane/kubernetes_resource/deployment.rb#63
  def failure_message; end

  # source://krane//lib/krane/kubernetes_resource/deployment.rb#32
  def fetch_debug_logs; end

  # source://krane//lib/krane/kubernetes_resource/deployment.rb#22
  def fetch_events(kubectl); end

  # source://krane//lib/krane/kubernetes_resource/deployment.rb#80
  def pretty_timeout_type; end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/deployment.rb#28
  def print_debug_logs?; end

  # source://krane//lib/krane/kubernetes_resource/deployment.rb#17
  def status; end

  # source://krane//lib/krane/kubernetes_resource/deployment.rb#12
  def sync(cache); end

  # source://krane//lib/krane/kubernetes_resource/deployment.rb#68
  def timeout_message; end

  # source://krane//lib/krane/kubernetes_resource/deployment.rb#98
  def validate_definition(*_arg0, **_arg1); end

  private

  # source://krane//lib/krane/kubernetes_resource/deployment.rb#116
  def current_generation; end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/deployment.rb#156
  def deploy_failing_to_progress?; end

  # source://krane//lib/krane/kubernetes_resource/deployment.rb#126
  def desired_replicas; end

  # source://krane//lib/krane/kubernetes_resource/deployment.rb#168
  def find_latest_rs(cache); end

  # source://krane//lib/krane/kubernetes_resource/deployment.rb#201
  def max_unavailable; end

  # source://krane//lib/krane/kubernetes_resource/deployment.rb#191
  def min_available_replicas; end

  # source://krane//lib/krane/kubernetes_resource/deployment.rb#121
  def observed_generation; end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/deployment.rb#210
  def percent?(value); end

  # source://krane//lib/krane/kubernetes_resource/deployment.rb#137
  def progress_condition; end

  # source://krane//lib/krane/kubernetes_resource/deployment.rb#143
  def progress_deadline; end

  # source://krane//lib/krane/kubernetes_resource/deployment.rb#206
  def required_rollout; end

  # source://krane//lib/krane/kubernetes_resource/deployment.rb#151
  def rollout_annotation_err_msg; end

  # source://krane//lib/krane/kubernetes_resource/deployment.rb#131
  def rollout_data; end
end

# source://krane//lib/krane/kubernetes_resource/deployment.rb#10
Krane::Deployment::DEFAULT_REQUIRED_ROLLOUT = T.let(T.unsafe(nil), String)

# source://krane//lib/krane/kubernetes_resource/deployment.rb#8
Krane::Deployment::REQUIRED_ROLLOUT_ANNOTATION = T.let(T.unsafe(nil), String)

# source://krane//lib/krane/kubernetes_resource/deployment.rb#9
Krane::Deployment::REQUIRED_ROLLOUT_TYPES = T.let(T.unsafe(nil), Array)

# source://krane//lib/krane/kubernetes_resource/deployment.rb#7
Krane::Deployment::SYNC_DEPENDENCIES = T.let(T.unsafe(nil), Array)

# source://krane//lib/krane/kubernetes_resource/deployment.rb#6
Krane::Deployment::TIMEOUT = T.let(T.unsafe(nil), ActiveSupport::Duration)

# source://krane//lib/krane/errors.rb#19
class Krane::DeploymentTimeoutError < ::Krane::FatalDeploymentError; end

# This class is a less strict extension of ActiveSupport::Duration::ISO8601Parser.
# In addition to full ISO8601 durations, it can parse unprefixed ISO8601 time components (e.g. '1H').
# It is also case-insensitive.
# For example, this class considers the values "1H", "1h" and "PT1H" to be valid and equivalent.
#
# source://krane//lib/krane/duration_parser.rb#10
class Krane::DurationParser
  # @return [DurationParser] a new instance of DurationParser
  #
  # source://krane//lib/krane/duration_parser.rb#13
  def initialize(value); end

  # source://krane//lib/krane/duration_parser.rb#17
  def parse!; end
end

# source://krane//lib/krane/duration_parser.rb#11
class Krane::DurationParser::ParsingError < ::ArgumentError; end

# source://krane//lib/krane/errors.rb#21
class Krane::EjsonPrunableError < ::Krane::FatalDeploymentError
  # @return [EjsonPrunableError] a new instance of EjsonPrunableError
  #
  # source://krane//lib/krane/errors.rb#22
  def initialize; end
end

# source://krane//lib/krane/ejson_secret_provisioner.rb#8
class Krane::EjsonSecretError < ::Krane::FatalDeploymentError
  # @return [EjsonSecretError] a new instance of EjsonSecretError
  #
  # source://krane//lib/krane/ejson_secret_provisioner.rb#9
  def initialize(msg); end
end

# source://krane//lib/krane/ejson_secret_provisioner.rb#14
class Krane::EjsonSecretProvisioner
  # @return [EjsonSecretProvisioner] a new instance of EjsonSecretProvisioner
  #
  # source://krane//lib/krane/ejson_secret_provisioner.rb#21
  def initialize(task_config:, ejson_keys_secret:, ejson_file:, statsd_tags:, selector: T.unsafe(nil)); end

  # source://krane//lib/krane/ejson_secret_provisioner.rb#19
  def context(*_arg0, **_arg1, &_arg2); end

  # source://krane//lib/krane/ejson_secret_provisioner.rb#19
  def logger(*_arg0, **_arg1, &_arg2); end

  # source://krane//lib/krane/ejson_secret_provisioner.rb#19
  def namespace(*_arg0, **_arg1, &_arg2); end

  # source://krane//lib/krane/ejson_secret_provisioner.rb#34
  def resources; end

  private

  # source://krane//lib/krane/ejson_secret_provisioner.rb#40
  def build_secrets; end

  # source://krane//lib/krane/ejson_secret_provisioner.rb#135
  def decrypt_ejson(key_dir); end

  # source://krane//lib/krane/ejson_secret_provisioner.rb#65
  def encrypted_ejson; end

  # source://krane//lib/krane/ejson_secret_provisioner.rb#147
  def fetch_private_key_from_secret; end

  # source://krane//lib/krane/ejson_secret_provisioner.rb#87
  def generate_secret_resource(secret_name, secret_type, data); end

  # source://krane//lib/krane/ejson_secret_provisioner.rb#118
  def load_ejson_from_file; end

  # source://krane//lib/krane/ejson_secret_provisioner.rb#73
  def private_key; end

  # source://krane//lib/krane/ejson_secret_provisioner.rb#69
  def public_key; end

  # source://krane//lib/krane/ejson_secret_provisioner.rb#77
  def validate_secret_spec(secret_name, spec); end

  # source://krane//lib/krane/ejson_secret_provisioner.rb#125
  def with_decrypted_ejson; end
end

# source://krane//lib/krane/ejson_secret_provisioner.rb#17
Krane::EjsonSecretProvisioner::EJSON_KEYS_SECRET = T.let(T.unsafe(nil), String)

# source://krane//lib/krane/ejson_secret_provisioner.rb#16
Krane::EjsonSecretProvisioner::EJSON_SECRETS_FILE = T.let(T.unsafe(nil), String)

# source://krane//lib/krane/ejson_secret_provisioner.rb#15
Krane::EjsonSecretProvisioner::EJSON_SECRET_KEY = T.let(T.unsafe(nil), String)

# source://krane//lib/krane/errors.rb#4
class Krane::FatalDeploymentError < ::StandardError; end

# source://krane//lib/krane/errors.rb#5
class Krane::FatalKubeAPIError < ::Krane::FatalDeploymentError; end

# source://krane//lib/krane/formatted_logger.rb#7
class Krane::FormattedLogger < ::Logger
  include ::Krane::DeferredSummaryLogging

  class << self
    # source://krane//lib/krane/formatted_logger.rb#14
    def build(namespace = T.unsafe(nil), context = T.unsafe(nil), stream = T.unsafe(nil), verbose_prefix: T.unsafe(nil)); end

    # source://krane//lib/krane/formatted_logger.rb#10
    def indent_four(str); end

    private

    # source://krane//lib/krane/formatted_logger.rb#46
    def level_from_env; end
  end
end

# Ship global resources to a context
#
# source://krane//lib/krane/global_deploy_task.rb#25
class Krane::GlobalDeployTask
  include ::Krane::GlobalDeployTask::InstrumentationProxy
  include ::Krane::TemplateReporting
  extend ::Krane::StatsD::MeasureMethods

  # Initializes the deploy task
  #
  # @param context [String] Kubernetes context (*required*)
  # @param global_timeout [Integer] Timeout in seconds
  # @param selector [Hash] Selector(s) parsed by Krane::LabelSelector (*required*)
  # @param selector_as_filter [Boolean] Allow selecting a subset of Kubernetes resource templates to deploy
  # @param filenames [Array<String>] An array of filenames and/or directories containing templates (*required*)
  # @return [GlobalDeployTask] a new instance of GlobalDeployTask
  #
  # source://krane//lib/krane/global_deploy_task.rb#38
  def initialize(context:, global_timeout: T.unsafe(nil), selector: T.unsafe(nil), selector_as_filter: T.unsafe(nil), filenames: T.unsafe(nil), logger: T.unsafe(nil), kubeconfig: T.unsafe(nil)); end

  # source://krane//lib/krane/statsd.rb#38
  def check_initial_status(*args, **kwargs, &block); end

  # source://krane//lib/krane/global_deploy_task.rb#28
  def context(*_arg0, **_arg1, &_arg2); end

  # source://krane//lib/krane/statsd.rb#38
  def discover_resources(*args, **kwargs, &block); end

  # source://krane//lib/krane/global_deploy_task.rb#28
  def global_kinds(*_arg0, **_arg1, &_arg2); end

  # source://krane//lib/krane/global_deploy_task.rb#28
  def kubeclient_builder(*_arg0, **_arg1, &_arg2); end

  # source://krane//lib/krane/global_deploy_task.rb#28
  def logger(*_arg0, **_arg1, &_arg2); end

  # Runs the task, returning a boolean representing success or failure
  #
  # @return [Boolean]
  #
  # source://krane//lib/krane/global_deploy_task.rb#53
  def run(**args); end

  # Runs the task, raising exceptions in case of issues
  #
  # @param verify_result [Boolean] Wait for completion and verify success
  # @param prune [Boolean] Enable deletion of resources that match the provided
  #   selector and do not appear in the template dir
  # @return [nil]
  #
  # source://krane//lib/krane/global_deploy_task.rb#67
  def run!(verify_result: T.unsafe(nil), prune: T.unsafe(nil)); end

  # Returns the value of attribute task_config.
  #
  # source://krane//lib/krane/global_deploy_task.rb#29
  def task_config; end

  # source://krane//lib/krane/statsd.rb#38
  def validate_configuration(*args, **kwargs, &block); end

  # source://krane//lib/krane/statsd.rb#38
  def validate_resources(*args, **kwargs, &block); end

  private

  # source://krane//lib/krane/global_deploy_task.rb#185
  def cluster_resource_discoverer; end

  # source://krane//lib/krane/global_deploy_task.rb#109
  def deploy!(resources, verify_result, prune); end

  # source://krane//lib/krane/global_deploy_task.rb#193
  def kubectl; end

  # source://krane//lib/krane/global_deploy_task.rb#197
  def prune_whitelist; end

  # source://krane//lib/krane/global_deploy_task.rb#189
  def statsd_tags; end

  # @raise [FatalDeploymentError]
  #
  # source://krane//lib/krane/global_deploy_task.rb#153
  def validate_globals(resources); end
end

# source://krane//lib/krane/global_deploy_task.rb#0
module Krane::GlobalDeployTask::InstrumentationProxy
  # source://krane//lib/krane/statsd.rb#38
  def check_initial_status(*args, **kwargs, &block); end

  # source://krane//lib/krane/statsd.rb#38
  def discover_resources(*args, **kwargs, &block); end

  # source://krane//lib/krane/statsd.rb#38
  def validate_configuration(*args, **kwargs, &block); end

  # source://krane//lib/krane/statsd.rb#38
  def validate_resources(*args, **kwargs, &block); end
end

# source://krane//lib/krane/global_deploy_task_config_validator.rb#6
class Krane::GlobalDeployTaskConfigValidator < ::Krane::TaskConfigValidator
  # @return [GlobalDeployTaskConfigValidator] a new instance of GlobalDeployTaskConfigValidator
  #
  # source://krane//lib/krane/global_deploy_task_config_validator.rb#7
  def initialize(*arguments); end
end

# source://krane//lib/krane/kubernetes_resource/horizontal_pod_autoscaler.rb#3
class Krane::HorizontalPodAutoscaler < ::Krane::KubernetesResource
  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/horizontal_pod_autoscaler.rb#11
  def deploy_failed?; end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/horizontal_pod_autoscaler.rb#7
  def deploy_succeeded?; end

  # source://krane//lib/krane/kubernetes_resource/horizontal_pod_autoscaler.rb#37
  def failure_message; end

  # source://krane//lib/krane/kubernetes_resource/horizontal_pod_autoscaler.rb#18
  def kubectl_resource_type; end

  # source://krane//lib/krane/kubernetes_resource/horizontal_pod_autoscaler.rb#22
  def status; end

  # source://krane//lib/krane/kubernetes_resource/horizontal_pod_autoscaler.rb#42
  def timeout_message; end

  private

  # source://krane//lib/krane/kubernetes_resource/horizontal_pod_autoscaler.rb#57
  def able_to_scale_condition; end

  # source://krane//lib/krane/kubernetes_resource/horizontal_pod_autoscaler.rb#53
  def conditions; end

  # source://krane//lib/krane/kubernetes_resource/horizontal_pod_autoscaler.rb#61
  def scaling_active_condition; end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/horizontal_pod_autoscaler.rb#48
  def scaling_disabled?; end
end

# source://krane//lib/krane/kubernetes_resource/horizontal_pod_autoscaler.rb#5
Krane::HorizontalPodAutoscaler::RECOVERABLE_CONDITION_PREFIX = T.let(T.unsafe(nil), String)

# source://krane//lib/krane/kubernetes_resource/horizontal_pod_autoscaler.rb#4
Krane::HorizontalPodAutoscaler::TIMEOUT = T.let(T.unsafe(nil), ActiveSupport::Duration)

# source://krane//lib/krane/kubernetes_resource/ingress.rb#3
class Krane::Ingress < ::Krane::KubernetesResource
  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/ingress.rb#14
  def deploy_failed?; end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/ingress.rb#10
  def deploy_succeeded?; end

  # source://krane//lib/krane/kubernetes_resource/ingress.rb#6
  def status; end
end

# source://krane//lib/krane/kubernetes_resource/ingress.rb#4
Krane::Ingress::TIMEOUT = T.let(T.unsafe(nil), ActiveSupport::Duration)

# source://krane//lib/krane/errors.rb#9
class Krane::InvalidTemplateError < ::Krane::FatalDeploymentError
  # @return [InvalidTemplateError] a new instance of InvalidTemplateError
  #
  # source://krane//lib/krane/errors.rb#12
  def initialize(err, filename: T.unsafe(nil), content: T.unsafe(nil)); end

  # Returns the value of attribute content.
  #
  # source://krane//lib/krane/errors.rb#10
  def content; end

  # Returns the value of attribute filename.
  #
  # source://krane//lib/krane/errors.rb#11
  def filename; end

  # Sets the attribute filename
  #
  # @param value the value to set the attribute filename to.
  #
  # source://krane//lib/krane/errors.rb#11
  def filename=(_arg0); end
end

# source://krane//lib/krane/kubernetes_resource/job.rb#3
class Krane::Job < ::Krane::KubernetesResource
  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/job.rb#13
  def deploy_failed?; end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/job.rb#6
  def deploy_succeeded?; end

  # source://krane//lib/krane/kubernetes_resource/job.rb#34
  def failure_message; end

  # source://krane//lib/krane/kubernetes_resource/job.rb#20
  def status; end

  private

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/job.rb#48
  def done?; end

  # source://krane//lib/krane/kubernetes_resource/job.rb#42
  def failed_status_condition; end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/job.rb#52
  def running?; end
end

# source://krane//lib/krane/kubernetes_resource/job.rb#4
Krane::Job::TIMEOUT = T.let(T.unsafe(nil), ActiveSupport::Duration)

# source://krane//lib/krane/kubeclient_builder.rb#5
class Krane::KubeclientBuilder
  # @return [KubeclientBuilder] a new instance of KubeclientBuilder
  #
  # source://krane//lib/krane/kubeclient_builder.rb#15
  def initialize(kubeconfig: T.unsafe(nil)); end

  # source://krane//lib/krane/kubeclient_builder.rb#68
  def build_apiextensions_v1beta1_kubeclient(context); end

  # source://krane//lib/krane/kubeclient_builder.rb#60
  def build_apps_v1_kubeclient(context); end

  # source://krane//lib/krane/kubeclient_builder.rb#76
  def build_autoscaling_v1_kubeclient(context); end

  # source://krane//lib/krane/kubeclient_builder.rb#44
  def build_batch_v1_kubeclient(context); end

  # source://krane//lib/krane/kubeclient_builder.rb#36
  def build_batch_v1beta1_kubeclient(context); end

  # source://krane//lib/krane/kubeclient_builder.rb#92
  def build_networking_v1_kubeclient(context); end

  # source://krane//lib/krane/kubeclient_builder.rb#52
  def build_policy_v1beta1_kubeclient(context); end

  # source://krane//lib/krane/kubeclient_builder.rb#84
  def build_rbac_v1_kubeclient(context); end

  # source://krane//lib/krane/kubeclient_builder.rb#108
  def build_scheduling_v1beta1_kubeclient(context); end

  # source://krane//lib/krane/kubeclient_builder.rb#100
  def build_storage_v1_kubeclient(context); end

  # source://krane//lib/krane/kubeclient_builder.rb#21
  def build_v1_kubeclient(context); end

  # source://krane//lib/krane/kubeclient_builder.rb#28
  def build_v1beta1_kubeclient(context); end

  # Returns the value of attribute kubeconfig_files.
  #
  # source://krane//lib/krane/kubeclient_builder.rb#13
  def kubeconfig_files; end

  # source://krane//lib/krane/kubeclient_builder.rb#116
  def validate_config_files; end

  # @raise [TaskConfigurationError]
  #
  # source://krane//lib/krane/kubeclient_builder.rb#129
  def validate_config_files!; end

  private

  # @raise [ContextMissingError]
  #
  # source://krane//lib/krane/kubeclient_builder.rb#136
  def build_kubeclient(api_version:, context:, endpoint_path: T.unsafe(nil)); end
end

# source://krane//lib/krane/kubeclient_builder.rb#6
class Krane::KubeclientBuilder::ContextMissingError < ::Krane::FatalDeploymentError
  # @return [ContextMissingError] a new instance of ContextMissingError
  #
  # source://krane//lib/krane/kubeclient_builder.rb#7
  def initialize(context_name, kubeconfig); end
end

# source://krane//lib/krane/kubectl.rb#5
class Krane::Kubectl
  # @return [Kubectl] a new instance of Kubectl
  #
  # source://krane//lib/krane/kubectl.rb#20
  def initialize(task_config:, log_failure_by_default:, default_timeout: T.unsafe(nil), output_is_sensitive_default: T.unsafe(nil)); end

  # source://krane//lib/krane/kubectl.rb#99
  def client_version; end

  # source://krane//lib/krane/kubectl.rb#18
  def context(*_arg0, **_arg1, &_arg2); end

  # source://krane//lib/krane/kubectl.rb#111
  def dry_run_flag; end

  # source://krane//lib/krane/kubectl.rb#18
  def kubeconfig(*_arg0, **_arg1, &_arg2); end

  # source://krane//lib/krane/kubectl.rb#18
  def logger(*_arg0, **_arg1, &_arg2); end

  # source://krane//lib/krane/kubectl.rb#18
  def namespace(*_arg0, **_arg1, &_arg2); end

  # source://krane//lib/krane/kubectl.rb#77
  def retry_delay(attempt); end

  # @raise [ArgumentError]
  #
  # source://krane//lib/krane/kubectl.rb#28
  def run(*args, log_failure: T.unsafe(nil), use_context: T.unsafe(nil), use_namespace: T.unsafe(nil), output: T.unsafe(nil), raise_if_not_found: T.unsafe(nil), attempts: T.unsafe(nil), output_is_sensitive: T.unsafe(nil), retry_whitelist: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubectl.rb#107
  def server_dry_run_enabled?; end

  # source://krane//lib/krane/kubectl.rb#103
  def server_version; end

  # source://krane//lib/krane/kubectl.rb#82
  def version_info; end

  private

  # source://krane//lib/krane/kubectl.rb#121
  def build_command_from_options(args, use_namespace, use_context, output); end

  # source://krane//lib/krane/kubectl.rb#138
  def platform_agnostic_version(version_string); end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubectl.rb#130
  def retriable_err?(err, retry_whitelist); end
end

# source://krane//lib/krane/kubectl.rb#12
Krane::Kubectl::DEFAULT_TIMEOUT = T.let(T.unsafe(nil), Integer)

# source://krane//lib/krane/kubectl.rb#6
Krane::Kubectl::ERROR_MATCHERS = T.let(T.unsafe(nil), Hash)

# source://krane//lib/krane/kubectl.rb#13
Krane::Kubectl::MAX_RETRY_DELAY = T.let(T.unsafe(nil), Integer)

# source://krane//lib/krane/kubectl.rb#16
class Krane::Kubectl::ResourceNotFoundError < ::StandardError; end

# source://krane//lib/krane/kubectl.rb#14
Krane::Kubectl::SERVER_DRY_RUN_MIN_VERSION = T.let(T.unsafe(nil), String)

# source://krane//lib/krane/errors.rb#6
class Krane::KubectlError < ::StandardError; end

# source://krane//lib/krane/kubernetes_resource.rb#12
class Krane::KubernetesResource
  # @return [KubernetesResource] a new instance of KubernetesResource
  #
  # source://krane//lib/krane/kubernetes_resource.rb#118
  def initialize(namespace:, context:, definition:, logger:, statsd_tags: T.unsafe(nil)); end

  # source://krane//lib/krane/kubernetes_resource.rb#158
  def <=>(other); end

  # source://krane//lib/krane/kubernetes_resource.rb#173
  def after_sync; end

  # Returns the value of attribute context.
  #
  # source://krane//lib/krane/kubernetes_resource.rb#15
  def context; end

  # source://krane//lib/krane/kubernetes_resource.rb#205
  def current_generation; end

  # source://krane//lib/krane/kubernetes_resource.rb#261
  def debug_message(cause = T.unsafe(nil), info_hash = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource.rb#184
  def deploy_failed?; end

  # Expected values: :apply, :create, :replace, :replace_force
  #
  # source://krane//lib/krane/kubernetes_resource.rb#244
  def deploy_method; end

  # source://krane//lib/krane/kubernetes_resource.rb#252
  def deploy_method_override; end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource.rb#188
  def deploy_started?; end

  # Sets the attribute deploy_started_at
  #
  # @param value the value to set the attribute deploy_started_at to.
  #
  # source://krane//lib/krane/kubernetes_resource.rb#16
  def deploy_started_at=(_arg0); end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource.rb#192
  def deploy_succeeded?; end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource.rb#238
  def deploy_timed_out?; end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource.rb#180
  def disappeared?; end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource.rb#201
  def exists?; end

  # source://krane//lib/krane/kubernetes_resource.rb#346
  def failure_message; end

  # Returns a hash in the following format:
  # {
  #   "pod/web-1" => [
  #     "Pulling: pulling image "hello-world:latest" (1 events)",
  #     "Pulled: Successfully pulled image "hello-world:latest" (1 events)"
  #   ]
  # }
  #
  # source://krane//lib/krane/kubernetes_resource.rb#330
  def fetch_events(kubectl); end

  # source://krane//lib/krane/kubernetes_resource.rb#162
  def file_path; end

  # Sets the attribute global
  #
  # @param value the value to set the attribute global to.
  #
  # source://krane//lib/krane/kubernetes_resource.rb#16
  def global=(_arg0); end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource.rb#498
  def global?; end

  # source://krane//lib/krane/kubernetes_resource.rb#224
  def group; end

  # source://krane//lib/krane/kubernetes_resource.rb#154
  def id; end

  # source://krane//lib/krane/kubernetes_resource.rb#234
  def kubectl_resource_type; end

  # Returns the value of attribute name.
  #
  # source://krane//lib/krane/kubernetes_resource.rb#15
  def name; end

  # Returns the value of attribute namespace.
  #
  # source://krane//lib/krane/kubernetes_resource.rb#15
  def namespace; end

  # source://krane//lib/krane/kubernetes_resource.rb#210
  def observed_generation; end

  # source://krane//lib/krane/kubernetes_resource.rb#349
  def pretty_status; end

  # source://krane//lib/krane/kubernetes_resource.rb#114
  def pretty_timeout_type; end

  # source://krane//lib/krane/kubernetes_resource.rb#354
  def report_status_to_statsd(watch_time); end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource.rb#502
  def selected?(selector); end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource.rb#361
  def sensitive_template_content?; end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource.rb#375
  def server_dry_run_validated?; end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource.rb#365
  def server_dry_runnable_resource?; end

  # source://krane//lib/krane/kubernetes_resource.rb#216
  def status; end

  # source://krane//lib/krane/kubernetes_resource.rb#166
  def sync(cache); end

  # source://krane//lib/krane/kubernetes_resource.rb#256
  def sync_debug_info(kubectl); end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource.rb#176
  def terminating?; end

  # source://krane//lib/krane/kubernetes_resource.rb#101
  def timeout; end

  # source://krane//lib/krane/kubernetes_resource.rb#342
  def timeout_message; end

  # source://krane//lib/krane/kubernetes_resource.rb#106
  def timeout_override; end

  # source://krane//lib/krane/kubernetes_resource.rb#133
  def to_kubeclient_resource; end

  # source://krane//lib/krane/kubernetes_resource.rb#220
  def type; end

  # Sets the attribute type
  #
  # @param value the value to set the attribute type to.
  #
  # source://krane//lib/krane/kubernetes_resource.rb#16
  def type=(_arg0); end

  # If a resource uses generateName, we don't know the full name of the resource until it's deployed to the cluster.
  # In this case, we need to update our local definition with the realized name in order to accurately track the
  # resource during deploy
  #
  # source://krane//lib/krane/kubernetes_resource.rb#382
  def use_generated_name(instance_data); end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource.rb#371
  def uses_generate_name?; end

  # source://krane//lib/krane/kubernetes_resource.rb#137
  def validate_definition(kubectl:, selector: T.unsafe(nil), dry_run: T.unsafe(nil)); end

  # source://krane//lib/krane/kubernetes_resource.rb#146
  def validation_error_msg; end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource.rb#150
  def validation_failed?; end

  # source://krane//lib/krane/kubernetes_resource.rb#229
  def version; end

  private

  # source://krane//lib/krane/kubernetes_resource.rb#605
  def create_definition_tempfile; end

  # source://krane//lib/krane/kubernetes_resource.rb#601
  def file; end

  # source://krane//lib/krane/kubernetes_resource.rb#533
  def krane_annotation_value(suffix); end

  # source://krane//lib/krane/kubernetes_resource.rb#597
  def labels; end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource.rb#613
  def print_debug_logs?; end

  # source://krane//lib/krane/kubernetes_resource.rb#617
  def statsd_tags; end

  # source://krane//lib/krane/kubernetes_resource.rb#523
  def validate_deploy_method_override_annotation; end

  # source://krane//lib/krane/kubernetes_resource.rb#537
  def validate_selector(selector); end

  # source://krane//lib/krane/kubernetes_resource.rb#550
  def validate_spec_with_kubectl(kubectl); end

  # source://krane//lib/krane/kubernetes_resource.rb#508
  def validate_timeout_annotation; end

  # Local dry run is supported on only create and apply
  # If the deploy method is create, validating with apply will fail
  # If the resource template uses generateName, validating with apply will fail
  #
  # source://krane//lib/krane/kubernetes_resource.rb#585
  def validate_with_local_dry_run(kubectl); end

  # Server side dry run is only supported on apply
  #
  # source://krane//lib/krane/kubernetes_resource.rb#571
  def validate_with_server_side_dry_run(kubectl); end

  class << self
    # source://krane//lib/krane/kubernetes_resource.rb#47
    def build(context:, definition:, logger:, statsd_tags:, namespace: T.unsafe(nil), crd: T.unsafe(nil), global_names: T.unsafe(nil)); end

    # source://krane//lib/krane/kubernetes_resource.rb#65
    def class_for_kind(kind); end

    # source://krane//lib/krane/kubernetes_resource.rb#77
    def kind; end

    # source://krane//lib/krane/kubernetes_resource.rb#73
    def timeout; end

    private

    # source://krane//lib/krane/kubernetes_resource.rb#83
    def validate_definition_essentials(definition); end
  end
end

# source://krane//lib/krane/kubernetes_resource.rb#38
Krane::KubernetesResource::ALLOWED_DEPLOY_METHOD_OVERRIDES = T.let(T.unsafe(nil), Array)

# source://krane//lib/krane/kubernetes_resource.rb#28
Krane::KubernetesResource::DEBUG_RESOURCE_NOT_FOUND_MESSAGE = T.let(T.unsafe(nil), String)

# source://krane//lib/krane/kubernetes_resource.rb#39
Krane::KubernetesResource::DEPLOY_METHOD_OVERRIDE_ANNOTATION = T.let(T.unsafe(nil), String)

# source://krane//lib/krane/kubernetes_resource.rb#27
Krane::KubernetesResource::DISABLED_EVENT_INFO_MESSAGE = T.let(T.unsafe(nil), String)

# source://krane//lib/krane/kubernetes_resource.rb#26
Krane::KubernetesResource::DISABLED_LOG_INFO_MESSAGE = T.let(T.unsafe(nil), String)

# source://krane//lib/krane/kubernetes_resource.rb#25
Krane::KubernetesResource::DISABLE_FETCHING_EVENT_INFO = T.let(T.unsafe(nil), String)

# source://krane//lib/krane/kubernetes_resource.rb#24
Krane::KubernetesResource::DISABLE_FETCHING_LOG_INFO = T.let(T.unsafe(nil), String)

# source://krane//lib/krane/kubernetes_resource.rb#389
class Krane::KubernetesResource::Event
  # @return [Event] a new instance of Event
  #
  # source://krane//lib/krane/kubernetes_resource.rb#480
  def initialize(subject_kind:, last_timestamp:, reason:, message:, count:, subject_name:); end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource.rb#489
  def seen_since?(time); end

  # source://krane//lib/krane/kubernetes_resource.rb#493
  def to_s; end

  class << self
    # source://krane//lib/krane/kubernetes_resource.rb#422
    def extract_all_from_go_template_blob(blob); end

    # source://krane//lib/krane/kubernetes_resource.rb#406
    def go_template_for(kind, name); end

    private

    # source://krane//lib/krane/kubernetes_resource.rb#439
    def extract_event_count(pieces); end

    # source://krane//lib/krane/kubernetes_resource.rb#459
    def extract_event_timestamp(pieces); end
  end
end

# source://krane//lib/krane/kubernetes_resource.rb#390
Krane::KubernetesResource::Event::EVENT_SEPARATOR = T.let(T.unsafe(nil), String)

# source://krane//lib/krane/kubernetes_resource.rb#392
Krane::KubernetesResource::Event::FIELDS = T.let(T.unsafe(nil), Array)

# source://krane//lib/krane/kubernetes_resource.rb#404
Krane::KubernetesResource::Event::FIELD_EMPTY_VALUE = T.let(T.unsafe(nil), String)

# source://krane//lib/krane/kubernetes_resource.rb#391
Krane::KubernetesResource::Event::FIELD_SEPARATOR = T.let(T.unsafe(nil), String)

# source://krane//lib/krane/kubernetes_resource.rb#18
Krane::KubernetesResource::GLOBAL = T.let(T.unsafe(nil), FalseClass)

# source://krane//lib/krane/kubernetes_resource.rb#41
Krane::KubernetesResource::LAST_APPLIED_ANNOTATION = T.let(T.unsafe(nil), String)

# source://krane//lib/krane/kubernetes_resource.rb#20
Krane::KubernetesResource::LOG_LINE_COUNT = T.let(T.unsafe(nil), Integer)

# source://krane//lib/krane/kubernetes_resource.rb#42
Krane::KubernetesResource::SENSITIVE_TEMPLATE_CONTENT = T.let(T.unsafe(nil), FalseClass)

# source://krane//lib/krane/kubernetes_resource.rb#43
Krane::KubernetesResource::SERVER_DRY_RUNNABLE = T.let(T.unsafe(nil), FalseClass)

# source://krane//lib/krane/kubernetes_resource.rb#21
Krane::KubernetesResource::SERVER_DRY_RUN_DISABLED_ERROR = T.let(T.unsafe(nil), Regexp)

# source://krane//lib/krane/kubernetes_resource.rb#33
Krane::KubernetesResource::STANDARD_TIMEOUT_MESSAGE = T.let(T.unsafe(nil), String)

# source://krane//lib/krane/kubernetes_resource.rb#44
Krane::KubernetesResource::SYNC_DEPENDENCIES = T.let(T.unsafe(nil), Array)

# source://krane//lib/krane/kubernetes_resource.rb#19
Krane::KubernetesResource::TIMEOUT = T.let(T.unsafe(nil), ActiveSupport::Duration)

# source://krane//lib/krane/kubernetes_resource.rb#40
Krane::KubernetesResource::TIMEOUT_OVERRIDE_ANNOTATION = T.let(T.unsafe(nil), String)

# source://krane//lib/krane/kubernetes_resource.rb#29
Krane::KubernetesResource::UNUSUAL_FAILURE_MESSAGE = T.let(T.unsafe(nil), String)

# source://krane//lib/krane/label_selector.rb#4
class Krane::LabelSelector
  # @return [LabelSelector] a new instance of LabelSelector
  #
  # source://krane//lib/krane/label_selector.rb#29
  def initialize(hash); end

  # source://krane//lib/krane/label_selector.rb#33
  def to_h; end

  # source://krane//lib/krane/label_selector.rb#37
  def to_s; end

  class << self
    # source://krane//lib/krane/label_selector.rb#5
    def parse(string); end
  end
end

# source://krane//lib/krane/common.rb#23
Krane::MIN_KUBE_VERSION = T.let(T.unsafe(nil), String)

# source://krane//lib/krane/kubernetes_resource/mutating_webhook_configuration.rb#4
class Krane::MutatingWebhookConfiguration < ::Krane::KubernetesResource
  # @return [MutatingWebhookConfiguration] a new instance of MutatingWebhookConfiguration
  #
  # source://krane//lib/krane/kubernetes_resource/mutating_webhook_configuration.rb#71
  def initialize(namespace:, context:, definition:, logger:, statsd_tags:); end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/mutating_webhook_configuration.rb#79
  def deploy_succeeded?; end

  # source://krane//lib/krane/kubernetes_resource/mutating_webhook_configuration.rb#83
  def webhooks; end
end

# source://krane//lib/krane/kubernetes_resource/mutating_webhook_configuration.rb#5
Krane::MutatingWebhookConfiguration::GLOBAL = T.let(T.unsafe(nil), TrueClass)

# source://krane//lib/krane/kubernetes_resource/mutating_webhook_configuration.rb#77
Krane::MutatingWebhookConfiguration::TIMEOUT = T.let(T.unsafe(nil), ActiveSupport::Duration)

# source://krane//lib/krane/kubernetes_resource/mutating_webhook_configuration.rb#7
class Krane::MutatingWebhookConfiguration::Webhook
  # @return [Webhook] a new instance of Webhook
  #
  # source://krane//lib/krane/kubernetes_resource/mutating_webhook_configuration.rb#42
  def initialize(definition); end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/mutating_webhook_configuration.rb#50
  def has_side_effects?; end

  # source://krane//lib/krane/kubernetes_resource/mutating_webhook_configuration.rb#55
  def match_policy; end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/mutating_webhook_configuration.rb#59
  def matches_resource?(resource, skip_rule_if_side_effect_none: T.unsafe(nil)); end

  # source://krane//lib/krane/kubernetes_resource/mutating_webhook_configuration.rb#66
  def rules; end

  # source://krane//lib/krane/kubernetes_resource/mutating_webhook_configuration.rb#46
  def side_effects; end
end

# source://krane//lib/krane/kubernetes_resource/mutating_webhook_configuration.rb#8
Krane::MutatingWebhookConfiguration::Webhook::EQUIVALENT = T.let(T.unsafe(nil), String)

# source://krane//lib/krane/kubernetes_resource/mutating_webhook_configuration.rb#9
Krane::MutatingWebhookConfiguration::Webhook::EXACT = T.let(T.unsafe(nil), String)

# source://krane//lib/krane/kubernetes_resource/mutating_webhook_configuration.rb#11
class Krane::MutatingWebhookConfiguration::Webhook::Rule
  # @return [Rule] a new instance of Rule
  #
  # source://krane//lib/krane/kubernetes_resource/mutating_webhook_configuration.rb#12
  def initialize(definition); end

  # source://krane//lib/krane/kubernetes_resource/mutating_webhook_configuration.rb#29
  def groups; end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/mutating_webhook_configuration.rb#16
  def matches_resource?(resource, accept_equivalent:); end

  # source://krane//lib/krane/kubernetes_resource/mutating_webhook_configuration.rb#37
  def resources; end

  # source://krane//lib/krane/kubernetes_resource/mutating_webhook_configuration.rb#33
  def versions; end
end

# source://krane//lib/krane/kubernetes_resource/network_policy.rb#3
class Krane::NetworkPolicy < ::Krane::KubernetesResource
  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/network_policy.rb#14
  def deploy_failed?; end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/network_policy.rb#10
  def deploy_succeeded?; end

  # source://krane//lib/krane/kubernetes_resource/network_policy.rb#6
  def status; end

  # source://krane//lib/krane/kubernetes_resource/network_policy.rb#18
  def timeout_message; end
end

# source://krane//lib/krane/kubernetes_resource/network_policy.rb#4
Krane::NetworkPolicy::TIMEOUT = T.let(T.unsafe(nil), ActiveSupport::Duration)

# source://krane//lib/krane/kubernetes_resource/persistent_volume_claim.rb#3
class Krane::PersistentVolumeClaim < ::Krane::KubernetesResource
  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/persistent_volume_claim.rb#27
  def deploy_failed?; end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/persistent_volume_claim.rb#15
  def deploy_succeeded?; end

  # source://krane//lib/krane/kubernetes_resource/persistent_volume_claim.rb#31
  def failure_message; end

  # source://krane//lib/krane/kubernetes_resource/persistent_volume_claim.rb#11
  def status; end

  # source://krane//lib/krane/kubernetes_resource/persistent_volume_claim.rb#6
  def sync(cache); end

  # source://krane//lib/krane/kubernetes_resource/persistent_volume_claim.rb#38
  def timeout_message; end

  private

  # source://krane//lib/krane/kubernetes_resource/persistent_volume_claim.rb#49
  def storage_class; end

  # source://krane//lib/krane/kubernetes_resource/persistent_volume_claim.rb#45
  def storage_class_name; end
end

# source://krane//lib/krane/kubernetes_resource/persistent_volume_claim.rb#59
class Krane::PersistentVolumeClaim::StorageClass < ::Krane::KubernetesResource
  # @return [StorageClass] a new instance of StorageClass
  #
  # source://krane//lib/krane/kubernetes_resource/persistent_volume_claim.rb#65
  def initialize(definition); end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/persistent_volume_claim.rb#75
  def default?; end

  # Returns the value of attribute name.
  #
  # source://krane//lib/krane/kubernetes_resource/persistent_volume_claim.rb#63
  def name; end

  # source://krane//lib/krane/kubernetes_resource/persistent_volume_claim.rb#71
  def volume_binding_mode; end
end

# source://krane//lib/krane/kubernetes_resource/persistent_volume_claim.rb#60
Krane::PersistentVolumeClaim::StorageClass::DEFAULT_CLASS_ANNOTATION = T.let(T.unsafe(nil), String)

# source://krane//lib/krane/kubernetes_resource/persistent_volume_claim.rb#61
Krane::PersistentVolumeClaim::StorageClass::DEFAULT_CLASS_BETA_ANNOTATION = T.let(T.unsafe(nil), String)

# source://krane//lib/krane/kubernetes_resource/persistent_volume_claim.rb#4
Krane::PersistentVolumeClaim::TIMEOUT = T.let(T.unsafe(nil), ActiveSupport::Duration)

# source://krane//lib/krane/kubernetes_resource/pod.rb#3
class Krane::Pod < ::Krane::KubernetesResource
  # @return [Pod] a new instance of Pod
  #
  # source://krane//lib/krane/kubernetes_resource/pod.rb#14
  def initialize(namespace:, context:, definition:, logger:, statsd_tags: T.unsafe(nil), parent: T.unsafe(nil), deploy_started_at: T.unsafe(nil), stream_logs: T.unsafe(nil)); end

  # source://krane//lib/krane/kubernetes_resource/pod.rb#42
  def after_sync; end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/pod.rb#63
  def deploy_failed?; end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/pod.rb#55
  def deploy_succeeded?; end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/pod.rb#108
  def evicted?; end

  # source://krane//lib/krane/kubernetes_resource/pod.rb#79
  def failure_message; end

  # source://krane//lib/krane/kubernetes_resource/pod.rb#95
  def fetch_debug_logs; end

  # source://krane//lib/krane/kubernetes_resource/pod.rb#104
  def node_name; end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/pod.rb#100
  def print_debug_logs?; end

  # source://krane//lib/krane/kubernetes_resource/pod.rb#50
  def status; end

  # Returns the value of attribute stream_logs.
  #
  # source://krane//lib/krane/kubernetes_resource/pod.rb#12
  def stream_logs; end

  # Sets the attribute stream_logs
  #
  # @param value the value to set the attribute stream_logs to.
  #
  # source://krane//lib/krane/kubernetes_resource/pod.rb#12
  def stream_logs=(_arg0); end

  # source://krane//lib/krane/kubernetes_resource/pod.rb#30
  def sync(_cache); end

  # source://krane//lib/krane/kubernetes_resource/pod.rb#67
  def timeout_message; end

  private

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/pod.rb#124
  def failed_phase?; end

  # source://krane//lib/krane/kubernetes_resource/pod.rb#114
  def failed_schedule_reason; end

  # source://krane//lib/krane/kubernetes_resource/pod.rb#147
  def logs; end

  # source://krane//lib/krane/kubernetes_resource/pod.rb#157
  def phase; end

  # source://krane//lib/krane/kubernetes_resource/pod.rb#133
  def phase_failure_message; end

  # @raise [FatalDeploymentError]
  #
  # source://krane//lib/krane/kubernetes_resource/pod.rb#193
  def raise_predates_deploy_error; end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/pod.rb#165
  def readiness_probe_failure?; end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/pod.rb#171
  def ready?; end

  # source://krane//lib/krane/kubernetes_resource/pod.rb#161
  def reason; end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/pod.rb#128
  def transient_failure_reason?; end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/pod.rb#189
  def unmanaged?; end

  # source://krane//lib/krane/kubernetes_resource/pod.rb#177
  def update_container_statuses(status_data); end
end

# source://krane//lib/krane/kubernetes_resource/pod.rb#206
class Krane::Pod::Container
  # @return [Container] a new instance of Container
  #
  # source://krane//lib/krane/kubernetes_resource/pod.rb#209
  def initialize(definition, init_container: T.unsafe(nil)); end

  # source://krane//lib/krane/kubernetes_resource/pod.rb#222
  def doom_reason; end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/pod.rb#218
  def doomed?; end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/pod.rb#268
  def init_container?; end

  # Returns the value of attribute name.
  #
  # source://krane//lib/krane/kubernetes_resource/pod.rb#207
  def name; end

  # source://krane//lib/krane/kubernetes_resource/pod.rb#252
  def readiness_fail_reason; end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/pod.rb#264
  def ready?; end

  # source://krane//lib/krane/kubernetes_resource/pod.rb#276
  def reset_status; end

  # source://krane//lib/krane/kubernetes_resource/pod.rb#272
  def update_status(data); end
end

# source://krane//lib/krane/kubernetes_resource/pod.rb#6
Krane::Pod::FAILED_PHASE_NAME = T.let(T.unsafe(nil), String)

# source://krane//lib/krane/kubernetes_resource/pod.rb#4
Krane::Pod::TIMEOUT = T.let(T.unsafe(nil), ActiveSupport::Duration)

# source://krane//lib/krane/kubernetes_resource/pod.rb#7
Krane::Pod::TRANSIENT_FAILURE_REASONS = T.let(T.unsafe(nil), Array)

# source://krane//lib/krane/kubernetes_resource/pod_disruption_budget.rb#3
class Krane::PodDisruptionBudget < ::Krane::KubernetesResource
  # source://krane//lib/krane/kubernetes_resource/pod_disruption_budget.rb#14
  def deploy_method; end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/pod_disruption_budget.rb#10
  def deploy_succeeded?; end

  # source://krane//lib/krane/kubernetes_resource/pod_disruption_budget.rb#6
  def status; end

  # source://krane//lib/krane/kubernetes_resource/pod_disruption_budget.rb#19
  def timeout_message; end
end

# source://krane//lib/krane/kubernetes_resource/pod_disruption_budget.rb#4
Krane::PodDisruptionBudget::TIMEOUT = T.let(T.unsafe(nil), ActiveSupport::Duration)

# source://krane//lib/krane/kubernetes_resource/pod_set_base.rb#5
class Krane::PodSetBase < ::Krane::KubernetesResource
  # source://krane//lib/krane/kubernetes_resource/pod_set_base.rb#6
  def failure_message; end

  # source://krane//lib/krane/kubernetes_resource/pod_set_base.rb#21
  def fetch_debug_logs; end

  # source://krane//lib/krane/kubernetes_resource/pod_set_base.rb#14
  def fetch_events(kubectl); end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/pod_set_base.rb#33
  def print_debug_logs?; end

  # source://krane//lib/krane/kubernetes_resource/pod_set_base.rb#10
  def timeout_message; end

  private

  # source://krane//lib/krane/kubernetes_resource/pod_set_base.rb#47
  def container_names; end

  # source://krane//lib/krane/kubernetes_resource/pod_set_base.rb#53
  def find_pods(cache); end

  # @raise [NotImplementedError]
  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/pod_set_base.rb#43
  def parent_of_pod?(_); end

  # @raise [NotImplementedError]
  #
  # source://krane//lib/krane/kubernetes_resource/pod_set_base.rb#39
  def pods; end
end

# source://krane//lib/krane/kubernetes_resource/pod_template.rb#3
class Krane::PodTemplate < ::Krane::KubernetesResource
  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/pod_template.rb#12
  def deploy_failed?; end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/pod_template.rb#8
  def deploy_succeeded?; end

  # source://krane//lib/krane/kubernetes_resource/pod_template.rb#4
  def status; end

  # source://krane//lib/krane/kubernetes_resource/pod_template.rb#16
  def timeout_message; end
end

# source://krane//lib/krane/remote_logs.rb#5
class Krane::RemoteLogs
  # @return [RemoteLogs] a new instance of RemoteLogs
  #
  # source://krane//lib/krane/remote_logs.rb#8
  def initialize(logger:, parent_id:, container_names:, namespace:, context:); end

  # Returns the value of attribute container_logs.
  #
  # source://krane//lib/krane/remote_logs.rb#6
  def container_logs; end

  # @return [Boolean]
  #
  # source://krane//lib/krane/remote_logs.rb#22
  def empty?; end

  # source://krane//lib/krane/remote_logs.rb#39
  def print_all(prevent_duplicate: T.unsafe(nil)); end

  # source://krane//lib/krane/remote_logs.rb#30
  def print_latest; end

  # source://krane//lib/krane/remote_logs.rb#26
  def sync; end
end

# Render templates
#
# source://krane//lib/krane/render_task.rb#10
class Krane::RenderTask
  # Initializes the render task
  #
  # @param logger [Object] Logger object (defaults to an instance of Krane::FormattedLogger)
  # @param current_sha [String] The SHA of the commit
  # @param filenames [Array<String>] An array of filenames and/or directories containing templates (*required*)
  # @param bindings [Hash] Bindings parsed by Krane::BindingsParser
  # @return [RenderTask] a new instance of RenderTask
  #
  # source://krane//lib/krane/render_task.rb#17
  def initialize(current_sha:, bindings:, logger: T.unsafe(nil), filenames: T.unsafe(nil)); end

  # Runs the task, returning a boolean representing success or failure
  #
  # @return [Boolean]
  #
  # source://krane//lib/krane/render_task.rb#27
  def run(**args); end

  # Runs the task, raising exceptions in case of issues
  #
  # @param stream [IO] Place to stream the output to
  # @return [nil]
  #
  # source://krane//lib/krane/render_task.rb#39
  def run!(stream:); end

  private

  # source://krane//lib/krane/render_task.rb#107
  def log_invalid_template(exception); end

  # source://krane//lib/krane/render_task.rb#57
  def render_templates(stream, template_sets); end

  # source://krane//lib/krane/render_task.rb#88
  def validate_configuration(template_sets); end

  # source://krane//lib/krane/render_task.rb#72
  def write_to_stream(rendered_content, filename, stream); end
end

# source://krane//lib/krane/renderer.rb#9
class Krane::Renderer
  # @return [Renderer] a new instance of Renderer
  #
  # source://krane//lib/krane/renderer.rb#19
  def initialize(current_sha:, template_dir:, logger:, bindings: T.unsafe(nil)); end

  # source://krane//lib/krane/renderer.rb#51
  def render_partial(partial, locals); end

  # source://krane//lib/krane/renderer.rb#36
  def render_template(filename, raw_template); end

  private

  # source://krane//lib/krane/renderer.rb#88
  def bind_template_variables(erb_binding, variables); end

  # @raise [PartialNotFound]
  #
  # source://krane//lib/krane/renderer.rb#94
  def find_partial(name); end

  # source://krane//lib/krane/renderer.rb#81
  def template_variables; end
end

# source://krane//lib/krane/renderer.rb#10
class Krane::Renderer::InvalidPartialError < ::Krane::InvalidTemplateError
  # @return [InvalidPartialError] a new instance of InvalidPartialError
  #
  # source://krane//lib/krane/renderer.rb#12
  def initialize(msg, filename:, parents: T.unsafe(nil), content: T.unsafe(nil)); end

  # Returns the value of attribute content.
  #
  # source://krane//lib/krane/renderer.rb#11
  def content; end

  # Sets the attribute content
  #
  # @param value the value to set the attribute content to.
  #
  # source://krane//lib/krane/renderer.rb#11
  def content=(_arg0); end

  # Returns the value of attribute filename.
  #
  # source://krane//lib/krane/renderer.rb#11
  def filename; end

  # Sets the attribute filename
  #
  # @param value the value to set the attribute filename to.
  #
  # source://krane//lib/krane/renderer.rb#11
  def filename=(_arg0); end

  # Returns the value of attribute parents.
  #
  # source://krane//lib/krane/renderer.rb#11
  def parents; end

  # Sets the attribute parents
  #
  # @param value the value to set the attribute parents to.
  #
  # source://krane//lib/krane/renderer.rb#11
  def parents=(_arg0); end
end

# source://krane//lib/krane/renderer.rb#17
class Krane::Renderer::PartialNotFound < ::Krane::InvalidTemplateError; end

# source://krane//lib/krane/renderer.rb#106
class Krane::Renderer::TemplateContext
  # @return [TemplateContext] a new instance of TemplateContext
  #
  # source://krane//lib/krane/renderer.rb#107
  def initialize(renderer); end

  # source://krane//lib/krane/renderer.rb#115
  def partial(partial, locals = T.unsafe(nil)); end

  # source://krane//lib/krane/renderer.rb#111
  def template_binding; end
end

# source://krane//lib/krane/kubernetes_resource/replica_set.rb#5
class Krane::ReplicaSet < ::Krane::PodSetBase
  # @return [ReplicaSet] a new instance of ReplicaSet
  #
  # source://krane//lib/krane/kubernetes_resource/replica_set.rb#10
  def initialize(namespace:, context:, definition:, logger:, statsd_tags: T.unsafe(nil), parent: T.unsafe(nil), deploy_started_at: T.unsafe(nil)); end

  # source://krane//lib/krane/kubernetes_resource/replica_set.rb#51
  def available_replicas; end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/replica_set.rb#35
  def deploy_failed?; end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/replica_set.rb#29
  def deploy_succeeded?; end

  # source://krane//lib/krane/kubernetes_resource/replica_set.rb#41
  def desired_replicas; end

  # Returns the value of attribute pods.
  #
  # source://krane//lib/krane/kubernetes_resource/replica_set.rb#8
  def pods; end

  # source://krane//lib/krane/kubernetes_resource/replica_set.rb#46
  def ready_replicas; end

  # source://krane//lib/krane/kubernetes_resource/replica_set.rb#24
  def status; end

  # source://krane//lib/krane/kubernetes_resource/replica_set.rb#19
  def sync(cache); end

  private

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/replica_set.rb#69
  def parent_of_pod?(pod_data); end

  # source://krane//lib/krane/kubernetes_resource/replica_set.rb#62
  def rollout_data; end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/replica_set.rb#58
  def stale_status?; end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/replica_set.rb#74
  def unmanaged?; end
end

# source://krane//lib/krane/kubernetes_resource/replica_set.rb#7
Krane::ReplicaSet::SYNC_DEPENDENCIES = T.let(T.unsafe(nil), Array)

# source://krane//lib/krane/kubernetes_resource/replica_set.rb#6
Krane::ReplicaSet::TIMEOUT = T.let(T.unsafe(nil), ActiveSupport::Duration)

# source://krane//lib/krane/resource_cache.rb#6
class Krane::ResourceCache
  # @return [ResourceCache] a new instance of ResourceCache
  #
  # source://krane//lib/krane/resource_cache.rb#9
  def initialize(task_config); end

  # source://krane//lib/krane/resource_cache.rb#7
  def context(*_arg0, **_arg1, &_arg2); end

  # source://krane//lib/krane/resource_cache.rb#27
  def get_all(kind, selector = T.unsafe(nil)); end

  # source://krane//lib/krane/resource_cache.rb#17
  def get_instance(kind, resource_name, raise_if_not_found: T.unsafe(nil)); end

  # source://krane//lib/krane/resource_cache.rb#7
  def logger(*_arg0, **_arg1, &_arg2); end

  # source://krane//lib/krane/resource_cache.rb#7
  def namespace(*_arg0, **_arg1, &_arg2); end

  # source://krane//lib/krane/resource_cache.rb#39
  def prewarm(resources); end

  private

  # @raise [KubectlError]
  #
  # source://krane//lib/krane/resource_cache.rb#58
  def fetch_by_kind(kind); end

  # source://krane//lib/krane/resource_cache.rb#47
  def statsd_tags; end

  # source://krane//lib/krane/resource_cache.rb#51
  def use_or_populate_cache(kind); end
end

# source://krane//lib/krane/resource_deployer.rb#7
class Krane::ResourceDeployer
  include ::Krane::ResourceDeployer::InstrumentationProxy
  include ::Krane::TemplateReporting
  extend ::Krane::StatsD::MeasureMethods

  # @return [ResourceDeployer] a new instance of ResourceDeployer
  #
  # source://krane//lib/krane/resource_deployer.rb#14
  def initialize(task_config:, prune_whitelist:, global_timeout:, selector:, statsd_tags:, current_sha: T.unsafe(nil)); end

  # source://krane//lib/krane/resource_deployer.rb#30
  def deploy!(resources, verify_result, prune); end

  # source://krane//lib/krane/statsd.rb#38
  def deploy_all_resources(*args, **kwargs, &block); end

  # source://krane//lib/krane/resource_deployer.rb#23
  def dry_run(resources); end

  # source://krane//lib/krane/resource_deployer.rb#11
  def logger(*_arg0, **_arg1, &_arg2); end

  # source://krane//lib/krane/statsd.rb#38
  def predeploy_priority_resources(*args, **kwargs, &block); end

  # Returns the value of attribute statsd_tags.
  #
  # source://krane//lib/krane/resource_deployer.rb#12
  def statsd_tags; end

  private

  # source://krane//lib/krane/resource_deployer.rb#139
  def apply_all(resources, prune, dry_run: T.unsafe(nil)); end

  # source://krane//lib/krane/resource_deployer.rb#247
  def create_resource(resource); end

  # source://krane//lib/krane/resource_deployer.rb#88
  def deploy_resources(resources, verify:, prune: T.unsafe(nil), record_summary: T.unsafe(nil)); end

  # Inspect the file referenced in the kubectl stderr
  # to make it easier for developer to understand what's going on
  #
  # source://krane//lib/krane/resource_deployer.rb#263
  def find_bad_files_from_kubectl_output(line); end

  # source://krane//lib/krane/resource_deployer.rb#275
  def kubectl; end

  # source://krane//lib/krane/resource_deployer.rb#177
  def log_pruning(kubectl_output); end

  # source://krane//lib/krane/resource_deployer.rb#185
  def record_apply_failure(err, resources: T.unsafe(nil)); end

  # source://krane//lib/krane/resource_deployer.rb#231
  def replace_or_create_resource(resource, force: T.unsafe(nil)); end
end

# source://krane//lib/krane/resource_deployer.rb#0
module Krane::ResourceDeployer::InstrumentationProxy
  # source://krane//lib/krane/statsd.rb#38
  def deploy_all_resources(*args, **kwargs, &block); end

  # source://krane//lib/krane/statsd.rb#38
  def predeploy_priority_resources(*args, **kwargs, &block); end
end

# source://krane//lib/krane/kubernetes_resource/resource_quota.rb#3
class Krane::ResourceQuota < ::Krane::KubernetesResource
  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/resource_quota.rb#14
  def deploy_failed?; end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/resource_quota.rb#10
  def deploy_succeeded?; end

  # source://krane//lib/krane/kubernetes_resource/resource_quota.rb#6
  def status; end

  # source://krane//lib/krane/kubernetes_resource/resource_quota.rb#18
  def timeout_message; end
end

# source://krane//lib/krane/kubernetes_resource/resource_quota.rb#4
Krane::ResourceQuota::TIMEOUT = T.let(T.unsafe(nil), ActiveSupport::Duration)

# source://krane//lib/krane/resource_watcher.rb#7
class Krane::ResourceWatcher
  include ::Krane::ResourceWatcher::InstrumentationProxy
  extend ::Krane::StatsD::MeasureMethods

  # @return [ResourceWatcher] a new instance of ResourceWatcher
  #
  # source://krane//lib/krane/resource_watcher.rb#11
  def initialize(resources:, task_config:, deploy_started_at: T.unsafe(nil), operation_name: T.unsafe(nil), timeout: T.unsafe(nil), sha: T.unsafe(nil)); end

  # source://krane//lib/krane/resource_watcher.rb#9
  def context(*_arg0, **_arg1, &_arg2); end

  # source://krane//lib/krane/resource_watcher.rb#9
  def logger(*_arg0, **_arg1, &_arg2); end

  # source://krane//lib/krane/resource_watcher.rb#9
  def namespace(*_arg0, **_arg1, &_arg2); end

  # source://krane//lib/krane/resource_watcher.rb#26
  def run(delay_sync: T.unsafe(nil), reminder_interval: T.unsafe(nil), record_summary: T.unsafe(nil)); end

  # source://krane//lib/krane/statsd.rb#38
  def sync_resources(*args, **kwargs, &block); end

  private

  # @return [Boolean]
  #
  # source://krane//lib/krane/resource_watcher.rb#164
  def due_for_reminder?(last_message_logged_at, reminder_interval); end

  # @return [Boolean]
  #
  # source://krane//lib/krane/resource_watcher.rb#70
  def global_timeout?(started_at); end

  # source://krane//lib/krane/resource_watcher.rb#168
  def past_tense_operation; end

  # source://krane//lib/krane/resource_watcher.rb#126
  def record_failed_statuses(failed_resources, global_timeouts = T.unsafe(nil)); end

  # source://krane//lib/krane/resource_watcher.rb#120
  def record_statuses_for_summary(resources); end

  # source://krane//lib/krane/resource_watcher.rb#154
  def record_success_statuses(successful_resources); end

  # source://krane//lib/krane/resource_watcher.rb#108
  def report_and_give_up(remaining_resources); end

  # source://krane//lib/krane/resource_watcher.rb#101
  def report_what_is_left(resources, reminder:); end

  # source://krane//lib/krane/resource_watcher.rb#82
  def report_what_just_happened(new_successes, new_failures, new_timeouts); end

  # source://krane//lib/krane/resource_watcher.rb#74
  def sleep_until_next_sync(min_interval); end

  # source://krane//lib/krane/resource_watcher.rb#62
  def statsd_tags; end
end

# source://krane//lib/krane/resource_watcher.rb#0
module Krane::ResourceWatcher::InstrumentationProxy
  # source://krane//lib/krane/statsd.rb#38
  def sync_resources(*args, **kwargs, &block); end
end

# Restart the pods in one or more deployments
#
# source://krane//lib/krane/restart_task.rb#11
class Krane::RestartTask
  # Initializes the restart task
  #
  # @param context [String] Kubernetes context / cluster (*required*)
  # @param namespace [String] Kubernetes namespace (*required*)
  # @param logger [Object] Logger object (defaults to an instance of Krane::FormattedLogger)
  # @param global_timeout [Integer] Timeout in seconds
  # @return [RestartTask] a new instance of RestartTask
  #
  # source://krane//lib/krane/restart_task.rb#37
  def initialize(context:, namespace:, logger: T.unsafe(nil), global_timeout: T.unsafe(nil), kubeconfig: T.unsafe(nil)); end

  # source://krane//lib/krane/restart_task.rb#29
  def kubeclient_builder(*_arg0, **_arg1, &_arg2); end

  # Runs the task, returning a boolean representing success or failure
  #
  # @return [Boolean]
  #
  # source://krane//lib/krane/restart_task.rb#48
  def perform(**args); end

  # Runs the task, raising exceptions in case of issues
  #
  # @param deployments [Array<String>] Array of workload names to restart
  # @param selector [Hash] Selector(s) parsed by Krane::LabelSelector
  # @param verify_result [Boolean] Wait for completion and verify success
  # @return [nil]
  #
  # source://krane//lib/krane/restart_task.rb#63
  def perform!(deployments: T.unsafe(nil), statefulsets: T.unsafe(nil), daemonsets: T.unsafe(nil), selector: T.unsafe(nil), verify_result: T.unsafe(nil)); end

  # Runs the task, returning a boolean representing success or failure
  #
  # @return [Boolean]
  #
  # source://krane//lib/krane/restart_task.rb#48
  def run(**args); end

  # Runs the task, raising exceptions in case of issues
  #
  # @param deployments [Array<String>] Array of workload names to restart
  # @param selector [Hash] Selector(s) parsed by Krane::LabelSelector
  # @param verify_result [Boolean] Wait for completion and verify success
  # @return [nil]
  #
  # source://krane//lib/krane/restart_task.rb#63
  def run!(deployments: T.unsafe(nil), statefulsets: T.unsafe(nil), daemonsets: T.unsafe(nil), selector: T.unsafe(nil), verify_result: T.unsafe(nil)); end

  # Returns the value of attribute task_config.
  #
  # source://krane//lib/krane/restart_task.rb#27
  def task_config; end

  private

  # source://krane//lib/krane/restart_task.rb#329
  def apps_v1_kubeclient; end

  # source://krane//lib/krane/restart_task.rb#295
  def build_patch_payload(_deployment); end

  # source://krane//lib/krane/restart_task.rb#192
  def build_watchables(kubeclient_resources, started, klass); end

  # source://krane//lib/krane/restart_task.rb#213
  def delete_statefulset_pods(record); end

  # source://krane//lib/krane/restart_task.rb#283
  def fetch_daemonsets(list); end

  # source://krane//lib/krane/restart_task.rb#259
  def fetch_deployments(list); end

  # source://krane//lib/krane/restart_task.rb#271
  def fetch_statefulsets(list); end

  # source://krane//lib/krane/restart_task.rb#182
  def identify_target_daemonsets(selector: T.unsafe(nil)); end

  # source://krane//lib/krane/restart_task.rb#162
  def identify_target_deployments(selector: T.unsafe(nil)); end

  # source://krane//lib/krane/restart_task.rb#172
  def identify_target_statefulsets(selector: T.unsafe(nil)); end

  # source://krane//lib/krane/restart_task.rb#111
  def identify_target_workloads(deployment_names, statefulset_names, daemonset_names, selector: T.unsafe(nil)); end

  # source://krane//lib/krane/restart_task.rb#144
  def identify_target_workloads_by_name(deployment_names, statefulset_names, daemonset_names); end

  # source://krane//lib/krane/restart_task.rb#333
  def kubeclient; end

  # source://krane//lib/krane/restart_task.rb#337
  def kubectl; end

  # source://krane//lib/krane/restart_task.rb#209
  def patch_daemonset_with_restart(record); end

  # source://krane//lib/krane/restart_task.rb#201
  def patch_deployment_with_restart(record); end

  # source://krane//lib/krane/restart_task.rb#205
  def patch_statefulset_with_restart(record); end

  # source://krane//lib/krane/restart_task.rb#248
  def restart_daemonsets!(daemonsets); end

  # source://krane//lib/krane/restart_task.rb#221
  def restart_deployments!(deployments); end

  # source://krane//lib/krane/restart_task.rb#232
  def restart_statefulsets!(statefulsets); end

  # source://krane//lib/krane/restart_task.rb#106
  def tags(status, deployments, statefulsets, daemonsets); end

  # source://krane//lib/krane/restart_task.rb#341
  def v1beta1_kubeclient; end

  # source://krane//lib/krane/restart_task.rb#320
  def verify_config!; end

  # @raise [FatalDeploymentError]
  #
  # source://krane//lib/krane/restart_task.rb#309
  def verify_restart(resources); end
end

# source://krane//lib/krane/restart_task.rb#23
Krane::RestartTask::ANNOTATION = T.let(T.unsafe(nil), String)

# source://krane//lib/krane/restart_task.rb#12
class Krane::RestartTask::FatalRestartError < ::Krane::FatalDeploymentError; end

# source://krane//lib/krane/restart_task.rb#22
Krane::RestartTask::HTTP_OK_RANGE = T.let(T.unsafe(nil), Range)

# source://krane//lib/krane/restart_task.rb#25
Krane::RestartTask::RESTART_TRIGGER_ANNOTATION = T.let(T.unsafe(nil), String)

# source://krane//lib/krane/restart_task.rb#14
class Krane::RestartTask::RestartAPIError < ::Krane::RestartTask::FatalRestartError
  # @return [RestartAPIError] a new instance of RestartAPIError
  #
  # source://krane//lib/krane/restart_task.rb#15
  def initialize(deployment_name, response); end
end

# source://krane//lib/krane/rollout_conditions.rb#6
class Krane::RolloutConditions
  # @return [RolloutConditions] a new instance of RolloutConditions
  #
  # source://krane//lib/krane/rollout_conditions.rb#56
  def initialize(conditions); end

  # source://krane//lib/krane/rollout_conditions.rb#73
  def failure_messages(instance_data); end

  # @return [Boolean]
  #
  # source://krane//lib/krane/rollout_conditions.rb#67
  def rollout_failed?(instance_data); end

  # @return [Boolean]
  #
  # source://krane//lib/krane/rollout_conditions.rb#61
  def rollout_successful?(instance_data); end

  # @raise [RolloutConditionsError]
  #
  # source://krane//lib/krane/rollout_conditions.rb#80
  def validate!; end

  private

  # source://krane//lib/krane/rollout_conditions.rb#88
  def validate_conditions(conditions, source_key, required: T.unsafe(nil)); end

  class << self
    # source://krane//lib/krane/rollout_conditions.rb#37
    def default_conditions; end

    # source://krane//lib/krane/rollout_conditions.rb#11
    def from_annotation(conditions_string); end
  end
end

# source://krane//lib/krane/rollout_conditions.rb#7
Krane::RolloutConditions::VALID_FAILURE_CONDITION_KEYS = T.let(T.unsafe(nil), Array)

# source://krane//lib/krane/rollout_conditions.rb#8
Krane::RolloutConditions::VALID_SUCCESS_CONDITION_KEYS = T.let(T.unsafe(nil), Array)

# source://krane//lib/krane/rollout_conditions.rb#3
class Krane::RolloutConditionsError < ::StandardError; end

# Run a pod that exits upon completing a task
#
# source://krane//lib/krane/runner_task.rb#16
class Krane::RunnerTask
  # Initializes the runner task
  #
  # @param namespace [String] Kubernetes namespace (*required*)
  # @param context [String] Kubernetes context / cluster (*required*)
  # @param logger [Object] Logger object (defaults to an instance of Krane::FormattedLogger)
  # @param global_timeout [Integer] Timeout in seconds
  # @return [RunnerTask] a new instance of RunnerTask
  #
  # source://krane//lib/krane/runner_task.rb#29
  def initialize(namespace:, context:, logger: T.unsafe(nil), global_timeout: T.unsafe(nil), kubeconfig: T.unsafe(nil)); end

  # source://krane//lib/krane/runner_task.rb#21
  def kubeclient_builder(*_arg0, **_arg1, &_arg2); end

  # Returns the value of attribute pod_name.
  #
  # source://krane//lib/krane/runner_task.rb#19
  def pod_name; end

  # Runs the task, returning a boolean representing success or failure
  #
  # @return [Boolean]
  #
  # source://krane//lib/krane/runner_task.rb#40
  def run(**args); end

  # Runs the task, raising exceptions in case of issues
  #
  # @param template [String] The filename of the template you'll be rendering (*required*)
  # @param command [Array<String>] Override the default command in the container image
  # @param arguments [Array<String>] Override the default arguments for the command
  # @param env_vars [Array<String>] List of env vars
  # @param verify_result [Boolean] Wait for completion and verify pod success
  # @return [nil]
  #
  # source://krane//lib/krane/runner_task.rb#56
  def run!(template:, command:, arguments:, env_vars: T.unsafe(nil), image_tag: T.unsafe(nil), verify_result: T.unsafe(nil)); end

  # Returns the value of attribute task_config.
  #
  # source://krane//lib/krane/runner_task.rb#19
  def task_config; end

  private

  # source://krane//lib/krane/runner_task.rb#109
  def build_pod(template_name, container_overrides, verify_result); end

  # source://krane//lib/krane/runner_task.rb#164
  def build_pod_definition(base_template); end

  # source://krane//lib/krane/runner_task.rb#97
  def create_pod(pod); end

  # source://krane//lib/krane/runner_task.rb#188
  def ensure_valid_restart_policy!(template, verify); end

  # source://krane//lib/krane/runner_task.rb#177
  def extract_task_runner_container(pod_definition); end

  # source://krane//lib/krane/runner_task.rb#153
  def get_template(template_name); end

  # source://krane//lib/krane/runner_task.rb#201
  def kubeclient; end

  # source://krane//lib/krane/runner_task.rb#197
  def kubectl; end

  # source://krane//lib/krane/runner_task.rb#132
  def record_status_once(pod); end

  # source://krane//lib/krane/runner_task.rb#205
  def statsd_tags(status); end

  # source://krane//lib/krane/runner_task.rb#120
  def validate_pod(pod); end

  # source://krane//lib/krane/runner_task.rb#143
  def verify_config!(task_template); end

  # @raise [DeploymentTimeoutError]
  #
  # source://krane//lib/krane/runner_task.rb#124
  def watch_pod(pod); end
end

# source://krane//lib/krane/runner_task.rb#17
class Krane::RunnerTask::TaskTemplateMissingError < ::Krane::TaskConfigurationError; end

# source://krane//lib/krane/runner_task_config_validator.rb#3
class Krane::RunnerTaskConfigValidator < ::Krane::TaskConfigValidator
  # @return [RunnerTaskConfigValidator] a new instance of RunnerTaskConfigValidator
  #
  # source://krane//lib/krane/runner_task_config_validator.rb#4
  def initialize(template, *arguments); end

  private

  # source://krane//lib/krane/runner_task_config_validator.rb#12
  def validate_template; end
end

# source://krane//lib/krane/kubernetes_resource/secret.rb#3
class Krane::Secret < ::Krane::KubernetesResource
  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/secret.rb#16
  def deploy_failed?; end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/secret.rb#12
  def deploy_succeeded?; end

  # source://krane//lib/krane/kubernetes_resource/secret.rb#8
  def status; end

  # source://krane//lib/krane/kubernetes_resource/secret.rb#20
  def timeout_message; end
end

# source://krane//lib/krane/kubernetes_resource/secret.rb#5
Krane::Secret::SENSITIVE_TEMPLATE_CONTENT = T.let(T.unsafe(nil), TrueClass)

# source://krane//lib/krane/kubernetes_resource/secret.rb#6
Krane::Secret::SERVER_DRY_RUNNABLE = T.let(T.unsafe(nil), TrueClass)

# source://krane//lib/krane/kubernetes_resource/secret.rb#4
Krane::Secret::TIMEOUT = T.let(T.unsafe(nil), ActiveSupport::Duration)

# source://krane//lib/krane/kubernetes_resource/service.rb#5
class Krane::Service < ::Krane::KubernetesResource
  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/service.rb#37
  def deploy_failed?; end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/service.rb#29
  def deploy_succeeded?; end

  # source://krane//lib/krane/kubernetes_resource/service.rb#15
  def status; end

  # source://krane//lib/krane/kubernetes_resource/service.rb#9
  def sync(cache); end

  # source://krane//lib/krane/kubernetes_resource/service.rb#41
  def timeout_message; end

  private

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/service.rb#56
  def exposes_zero_replica_workload?; end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/service.rb#88
  def external_name_svc?; end

  # source://krane//lib/krane/kubernetes_resource/service.rb#48
  def fetch_related_workloads(cache); end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/service.rb#96
  def published?; end

  # source://krane//lib/krane/kubernetes_resource/service.rb#80
  def related_replica_count; end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/service.rb#61
  def requires_endpoints?; end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/service.rb#92
  def requires_publishing?; end

  # source://krane//lib/krane/kubernetes_resource/service.rb#76
  def selector; end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/service.rb#71
  def selects_some_pods?; end
end

# source://krane//lib/krane/kubernetes_resource/service.rb#7
Krane::Service::SYNC_DEPENDENCIES = T.let(T.unsafe(nil), Array)

# source://krane//lib/krane/kubernetes_resource/service.rb#6
Krane::Service::TIMEOUT = T.let(T.unsafe(nil), ActiveSupport::Duration)

# source://krane//lib/krane/kubernetes_resource/service_account.rb#3
class Krane::ServiceAccount < ::Krane::KubernetesResource
  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/service_account.rb#14
  def deploy_failed?; end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/service_account.rb#10
  def deploy_succeeded?; end

  # source://krane//lib/krane/kubernetes_resource/service_account.rb#6
  def status; end

  # source://krane//lib/krane/kubernetes_resource/service_account.rb#18
  def timeout_message; end
end

# source://krane//lib/krane/kubernetes_resource/service_account.rb#4
Krane::ServiceAccount::TIMEOUT = T.let(T.unsafe(nil), ActiveSupport::Duration)

# source://krane//lib/krane/kubernetes_resource/stateful_set.rb#4
class Krane::StatefulSet < ::Krane::PodSetBase
  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/stateful_set.rb#39
  def deploy_failed?; end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/stateful_set.rb#21
  def deploy_succeeded?; end

  # Returns the value of attribute pods.
  #
  # source://krane//lib/krane/kubernetes_resource/stateful_set.rb#8
  def pods; end

  # source://krane//lib/krane/kubernetes_resource/stateful_set.rb#15
  def status; end

  # source://krane//lib/krane/kubernetes_resource/stateful_set.rb#10
  def sync(cache); end

  private

  # source://krane//lib/krane/kubernetes_resource/stateful_set.rb#60
  def desired_replicas; end

  # @return [Boolean]
  #
  # source://krane//lib/krane/kubernetes_resource/stateful_set.rb#65
  def parent_of_pod?(pod_data); end

  # source://krane//lib/krane/kubernetes_resource/stateful_set.rb#55
  def status_data; end

  # source://krane//lib/krane/kubernetes_resource/stateful_set.rb#47
  def update_strategy; end
end

# source://krane//lib/krane/kubernetes_resource/stateful_set.rb#6
Krane::StatefulSet::ONDELETE = T.let(T.unsafe(nil), String)

# source://krane//lib/krane/kubernetes_resource/stateful_set.rb#7
Krane::StatefulSet::SYNC_DEPENDENCIES = T.let(T.unsafe(nil), Array)

# source://krane//lib/krane/kubernetes_resource/stateful_set.rb#5
Krane::StatefulSet::TIMEOUT = T.let(T.unsafe(nil), ActiveSupport::Duration)

# source://krane//lib/krane/statsd.rb#6
class Krane::StatsD
  class << self
    # source://krane//lib/krane/statsd.rb#13
    def client; end

    # source://krane//lib/krane/statsd.rb#9
    def duration(start_time); end
  end
end

# source://krane//lib/krane/statsd.rb#26
module Krane::StatsD::MeasureMethods
  # source://krane//lib/krane/statsd.rb#27
  def measure_method(method_name, metric = T.unsafe(nil)); end
end

# source://krane//lib/krane/statsd.rb#7
Krane::StatsD::PREFIX = T.let(T.unsafe(nil), String)

# source://krane//lib/krane/task_config.rb#6
class Krane::TaskConfig
  # @return [TaskConfig] a new instance of TaskConfig
  #
  # source://krane//lib/krane/task_config.rb#9
  def initialize(context, namespace, logger = T.unsafe(nil), kubeconfig = T.unsafe(nil)); end

  # Returns the value of attribute context.
  #
  # source://krane//lib/krane/task_config.rb#7
  def context; end

  # source://krane//lib/krane/task_config.rb#16
  def global_kinds; end

  # source://krane//lib/krane/task_config.rb#23
  def kubeclient_builder; end

  # Returns the value of attribute kubeconfig.
  #
  # source://krane//lib/krane/task_config.rb#7
  def kubeconfig; end

  # Returns the value of attribute logger.
  #
  # source://krane//lib/krane/task_config.rb#7
  def logger; end

  # Returns the value of attribute namespace.
  #
  # source://krane//lib/krane/task_config.rb#7
  def namespace; end
end

# source://krane//lib/krane/task_config_validator.rb#3
class Krane::TaskConfigValidator
  # @return [TaskConfigValidator] a new instance of TaskConfigValidator
  #
  # source://krane//lib/krane/task_config_validator.rb#14
  def initialize(task_config, kubectl, kubeclient_builder, only: T.unsafe(nil)); end

  # source://krane//lib/krane/task_config_validator.rb#12
  def context(*_arg0, **_arg1, &_arg2); end

  # source://krane//lib/krane/task_config_validator.rb#31
  def errors; end

  # source://krane//lib/krane/task_config_validator.rb#12
  def logger(*_arg0, **_arg1, &_arg2); end

  # source://krane//lib/krane/task_config_validator.rb#12
  def namespace(*_arg0, **_arg1, &_arg2); end

  # @return [Boolean]
  #
  # source://krane//lib/krane/task_config_validator.rb#22
  def valid?; end

  private

  # source://krane//lib/krane/task_config_validator.rb#91
  def server_version_warning(server_version); end

  # source://krane//lib/krane/task_config_validator.rb#42
  def validate_context_exists_in_kubeconfig; end

  # source://krane//lib/krane/task_config_validator.rb#59
  def validate_context_reachable; end

  # source://krane//lib/krane/task_config_validator.rb#38
  def validate_kubeconfig; end

  # source://krane//lib/krane/task_config_validator.rb#68
  def validate_namespace_exists; end

  # source://krane//lib/krane/task_config_validator.rb#85
  def validate_server_version; end
end

# source://krane//lib/krane/task_config_validator.rb#4
Krane::TaskConfigValidator::DEFAULT_VALIDATIONS = T.let(T.unsafe(nil), Array)

# source://krane//lib/krane/errors.rb#7
class Krane::TaskConfigurationError < ::Krane::FatalDeploymentError; end

# source://krane//lib/krane/concerns/template_reporting.rb#4
module Krane::TemplateReporting
  # source://krane//lib/krane/concerns/template_reporting.rb#18
  def add_para_from_list(logger:, action:, enum:); end

  # source://krane//lib/krane/concerns/template_reporting.rb#5
  def record_invalid_template(logger:, err:, filename:, content: T.unsafe(nil)); end
end

# source://krane//lib/krane/template_sets.rb#6
class Krane::TemplateSets
  include ::DelayedExceptions

  # @return [TemplateSets] a new instance of TemplateSets
  #
  # source://krane//lib/krane/template_sets.rb#169
  def initialize(template_sets: T.unsafe(nil)); end

  # source://krane//lib/krane/template_sets.rb#144
  def ejson_secrets_files; end

  # source://krane//lib/krane/template_sets.rb#148
  def validate; end

  # source://krane//lib/krane/template_sets.rb#138
  def with_resource_definitions(current_sha: T.unsafe(nil), bindings: T.unsafe(nil), raw: T.unsafe(nil)); end

  # source://krane//lib/krane/template_sets.rb#126
  def with_resource_definitions_and_filename(current_sha: T.unsafe(nil), bindings: T.unsafe(nil), raw: T.unsafe(nil)); end

  private

  # @return [Boolean]
  #
  # source://krane//lib/krane/template_sets.rb#161
  def deploying_with_erb_files?; end

  # @return [Boolean]
  #
  # source://krane//lib/krane/template_sets.rb#165
  def rendering_erb_disabled?; end

  class << self
    # source://krane//lib/krane/template_sets.rb#99
    def from_dirs_and_files(paths:, logger:, render_erb: T.unsafe(nil)); end
  end
end

# private inner class
#
# source://krane//lib/krane/template_sets.rb#10
class Krane::TemplateSets::TemplateSet
  include ::DelayedExceptions

  # @return [TemplateSet] a new instance of TemplateSet
  #
  # source://krane//lib/krane/template_sets.rb#13
  def initialize(template_dir:, logger:, file_whitelist: T.unsafe(nil), render_erb: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://krane//lib/krane/template_sets.rb#71
  def deploying_with_erb_files?; end

  # source://krane//lib/krane/template_sets.rb#35
  def ejson_secrets_file; end

  # Returns the value of attribute render_erb.
  #
  # source://krane//lib/krane/template_sets.rb#12
  def render_erb; end

  # source://krane//lib/krane/template_sets.rb#42
  def validate; end

  # source://krane//lib/krane/template_sets.rb#20
  def with_resource_definitions_and_filename(current_sha: T.unsafe(nil), bindings: T.unsafe(nil), raw: T.unsafe(nil)); end

  private

  # source://krane//lib/krane/template_sets.rb#77
  def templates(filename:, raw:); end
end

# source://krane//lib/krane/template_sets.rb#8
Krane::TemplateSets::VALID_TEMPLATES = T.let(T.unsafe(nil), Array)

# source://krane//lib/krane/version.rb#3
Krane::VERSION = T.let(T.unsafe(nil), String)

# source://krane//lib/krane/psych_k8s_compatibility.rb#5
module PsychK8sCompatibility
  class << self
    # source://krane//lib/krane/psych_k8s_compatibility.rb#6
    def massage_node(n); end
  end
end
