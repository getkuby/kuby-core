# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `railties` gem.
# Please instead update this file by running `bin/tapioca gem railties`.


# :include: ../README.rdoc
#
# source://railties//lib/rails/initializable.rb#5
module Rails
  class << self
    # source://railties//lib/rails/deprecator.rb#4
    def deprecator; end
  end
end

# source://railties//lib/rails/command.rb#11
module Rails::Command
  include ::Rails::Command::Behavior
  extend ::ActiveSupport::Autoload
  extend ::Rails::Command::Behavior::ClassMethods

  class << self
    # source://railties//lib/rails/command.rb#110
    def application_root; end

    # source://railties//lib/rails/command.rb#51
    def environment; end

    # Rails finds namespaces similar to Thor, it only adds one rule:
    #
    # Command names must end with "_command.rb". This is required because Rails
    # looks in load paths and loads the command just before it's going to be used.
    #
    #   find_by_namespace :webrat, :integration
    #
    # Will search for the following commands:
    #
    #   "webrat", "webrat:integration", "rails:webrat", "rails:webrat:integration"
    #
    # source://railties//lib/rails/command.rb#90
    def find_by_namespace(namespace, command_name = T.unsafe(nil)); end

    # source://railties//lib/rails/command.rb#47
    def hidden_commands; end

    # Receives a namespace, arguments, and the behavior to invoke the command.
    #
    # source://railties//lib/rails/command.rb#56
    def invoke(full_namespace, args = T.unsafe(nil), **config); end

    # source://railties//lib/rails/command.rb#114
    def printing_commands; end

    # Returns the root of the \Rails engine or app running the command.
    #
    # source://railties//lib/rails/command.rb#102
    def root; end

    private

    # source://railties//lib/rails/command.rb#153
    def command_type; end

    # source://railties//lib/rails/command.rb#161
    def file_lookup_paths; end

    # source://railties//lib/rails/command.rb#148
    def invoke_rake(task, args, config); end

    # source://railties//lib/rails/command.rb#157
    def lookup_paths; end

    # @return [Boolean]
    #
    # source://railties//lib/rails/command.rb#121
    def rails_new_with_no_path?(args); end

    # source://railties//lib/rails/command.rb#125
    def split_namespace(namespace); end

    # source://railties//lib/rails/command.rb#140
    def with_argv(argv); end
  end
end

# source://railties//lib/rails/command/actions.rb#5
module Rails::Command::Actions
  # source://railties//lib/rails/command/actions.rb#18
  def boot_application!; end

  # source://railties//lib/rails/command/actions.rb#23
  def load_environment_config!; end

  # source://railties//lib/rails/command/actions.rb#46
  def load_generators; end

  # source://railties//lib/rails/command/actions.rb#42
  def load_tasks; end

  # source://railties//lib/rails/command/actions.rb#13
  def require_application!; end

  # Change to the application's path if there is no <tt>config.ru</tt> file in current directory.
  # This allows us to run <tt>rails server</tt> from other directories, but still get
  # the main <tt>config.ru</tt> and properly set the <tt>tmp</tt> directory.
  #
  # source://railties//lib/rails/command/actions.rb#9
  def set_application_directory!; end
end

# source://railties//lib/rails/command/base.rb#14
class Rails::Command::Base < ::Thor
  include ::Rails::Command::Actions

  # source://thor/1.3.2/lib/thor/base.rb#155
  def current_subcommand; end

  # source://railties//lib/rails/command/base.rb#172
  def executable(*_arg0, **_arg1, &_arg2); end

  # source://railties//lib/rails/command/base.rb#175
  def invoke_command(command, *_arg1); end

  class << self
    # source://railties//lib/rails/command/base.rb#86
    def banner(command = T.unsafe(nil), *_arg1); end

    # Sets the base_name taking into account the current class namespace.
    #
    #   Rails::Command::TestCommand.base_name # => 'rails'
    #
    # source://railties//lib/rails/command/base.rb#106
    def base_name; end

    # source://railties//lib/rails/command/base.rb#20
    def bin; end

    # source://railties//lib/rails/command/base.rb#20
    def bin=(value); end

    # source://railties//lib/rails/command/base.rb#20
    def bin?; end

    # source://railties//lib/rails/command/base.rb#122
    def class_usage; end

    # Return command name without namespaces.
    #
    #   Rails::Command::TestCommand.command_name # => 'test'
    #
    # source://railties//lib/rails/command/base.rb#115
    def command_name; end

    # Default file root to place extra files a command might need, placed
    # one folder above the command file.
    #
    # For a Rails::Command::TestCommand placed in <tt>rails/command/test_command.rb</tt>
    # would return <tt>rails/test</tt>.
    #
    # source://railties//lib/rails/command/base.rb#139
    def default_command_root; end

    # Tries to get the description from a USAGE file one folder above the command
    # root.
    #
    # source://railties//lib/rails/command/base.rb#34
    def desc(usage = T.unsafe(nil), description = T.unsafe(nil), options = T.unsafe(nil)); end

    # Returns true when the app is a \Rails engine.
    #
    # @return [Boolean]
    #
    # source://railties//lib/rails/command/base.rb#28
    def engine?; end

    # source://railties//lib/rails/command/base.rb#82
    def executable(command_name = T.unsafe(nil)); end

    # @return [Boolean]
    #
    # source://railties//lib/rails/command/base.rb#23
    def exit_on_failure?; end

    # Override Thor's class-level help to also show the USAGE.
    #
    # source://railties//lib/rails/command/base.rb#98
    def help(shell, *_arg1); end

    # Convenience method to hide this command from the available ones when
    # running rails command.
    #
    # source://railties//lib/rails/command/base.rb#55
    def hide_command!; end

    # source://railties//lib/rails/command/base.rb#59
    def inherited(base); end

    # Convenience method to get the namespace from the class name. It's the
    # same as Thor default except that the Command at the end of the class
    # is removed.
    #
    # source://railties//lib/rails/command/base.rb#45
    def namespace(name = T.unsafe(nil)); end

    # source://railties//lib/rails/command/base.rb#67
    def perform(command, args, config); end

    # source://railties//lib/rails/command/base.rb#76
    def printing_commands; end

    # Path to lookup a USAGE description in a file.
    #
    # source://railties//lib/rails/command/base.rb#129
    def usage_path; end

    private

    # source://activesupport/8.0.1/lib/active_support/class_attribute.rb#15
    def __class_attr_bin; end

    # source://activesupport/8.0.1/lib/active_support/class_attribute.rb#17
    def __class_attr_bin=(new_value); end

    # Allow the command method to be called perform.
    #
    # source://railties//lib/rails/command/base.rb#146
    def create_command(meth); end

    # source://railties//lib/rails/command/base.rb#159
    def namespaced_name(name); end

    # source://railties//lib/rails/command/base.rb#164
    def resolve_path(path); end
  end
end

# source://railties//lib/rails/command/base.rb#15
class Rails::Command::Base::Error < ::Thor::Error; end

# source://railties//lib/rails/command/behavior.rb#7
module Rails::Command::Behavior
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Rails::Command::Behavior::ClassMethods
end

# source://railties//lib/rails/command/behavior.rb#0
module Rails::Command::Behavior::ClassMethods
  # source://railties//lib/rails/command/behavior.rb#12
  def no_color!; end

  # source://railties//lib/rails/command/behavior.rb#17
  def subclasses; end

  private

  # source://railties//lib/rails/command/behavior.rb#36
  def lookup(namespaces); end

  # source://railties//lib/rails/command/behavior.rb#56
  def lookup!; end

  # source://railties//lib/rails/command/behavior.rb#70
  def namespaces_to_paths(namespaces); end

  # source://railties//lib/rails/command/behavior.rb#23
  def print_list(base, namespaces); end
end

# source://railties//lib/rails/command.rb#17
class Rails::Command::CorrectableNameError < ::StandardError
  include ::DidYouMean::Correctable

  # @return [CorrectableNameError] a new instance of CorrectableNameError
  #
  # source://railties//lib/rails/command.rb#20
  def initialize(message, name, alternatives); end

  # source://railties//lib/rails/command.rb#29
  def corrections; end

  # Returns the value of attribute name.
  #
  # source://railties//lib/rails/command.rb#18
  def name; end
end

# source://railties//lib/rails/commands/dbconsole/dbconsole_command.rb#67
class Rails::Command::DbconsoleCommand < ::Rails::Command::Base
  include ::Rails::Command::EnvironmentArgument

  # source://railties//lib/rails/commands/dbconsole/dbconsole_command.rb#82
  def dbconsole; end

  # source://railties//lib/rails/commands/dbconsole/dbconsole_command.rb#82
  def perform; end
end

# source://railties//lib/rails/command/environment_argument.rb#8
module Rails::Command::EnvironmentArgument
  extend ::ActiveSupport::Concern

  # source://railties//lib/rails/command/environment_argument.rb#16
  def initialize(*_arg0, **_arg1, &_arg2); end

  private

  # source://railties//lib/rails/command/environment_argument.rb#46
  def available_environments; end

  # source://railties//lib/rails/command/environment_argument.rb#34
  def environment; end

  # source://railties//lib/rails/command/environment_argument.rb#38
  def environment=(environment); end

  # @return [Boolean]
  #
  # source://railties//lib/rails/command/environment_argument.rb#42
  def environment_specified?; end

  # source://railties//lib/rails/command/environment_argument.rb#51
  def expand_environment_name(name); end

  # source://railties//lib/rails/command/environment_argument.rb#29
  def require_application!; end
end

# source://railties//lib/rails/command.rb#43
Rails::Command::HELP_MAPPINGS = T.let(T.unsafe(nil), Set)

# source://railties//lib/rails/command.rb#35
class Rails::Command::UnrecognizedCommandError < ::Rails::Command::CorrectableNameError
  # @return [UnrecognizedCommandError] a new instance of UnrecognizedCommandError
  #
  # source://railties//lib/rails/command.rb#36
  def initialize(name); end
end

# source://railties//lib/rails/command.rb#44
Rails::Command::VERSION_MAPPINGS = T.let(T.unsafe(nil), Set)

# source://railties//lib/rails/configuration.rb#9
module Rails::Configuration; end

# source://railties//lib/rails/configuration.rb#104
class Rails::Configuration::Generators
  # @return [Generators] a new instance of Generators
  #
  # source://railties//lib/rails/configuration.rb#108
  def initialize; end

  # source://railties//lib/rails/configuration.rb#130
  def after_generate(&block); end

  # Returns the value of attribute after_generate_callbacks.
  #
  # source://railties//lib/rails/configuration.rb#106
  def after_generate_callbacks; end

  # Returns the value of attribute aliases.
  #
  # source://railties//lib/rails/configuration.rb#105
  def aliases; end

  # Sets the attribute aliases
  #
  # @param value the value to set the attribute aliases to.
  #
  # source://railties//lib/rails/configuration.rb#105
  def aliases=(_arg0); end

  # Returns the value of attribute api_only.
  #
  # source://railties//lib/rails/configuration.rb#105
  def api_only; end

  # Sets the attribute api_only
  #
  # @param value the value to set the attribute api_only to.
  #
  # source://railties//lib/rails/configuration.rb#105
  def api_only=(_arg0); end

  # source://railties//lib/rails/configuration.rb#134
  def apply_rubocop_autocorrect_after_generate!; end

  # Returns the value of attribute colorize_logging.
  #
  # source://railties//lib/rails/configuration.rb#105
  def colorize_logging; end

  # Sets the attribute colorize_logging
  #
  # @param value the value to set the attribute colorize_logging to.
  #
  # source://railties//lib/rails/configuration.rb#105
  def colorize_logging=(_arg0); end

  # Returns the value of attribute fallbacks.
  #
  # source://railties//lib/rails/configuration.rb#105
  def fallbacks; end

  # Sets the attribute fallbacks
  #
  # @param value the value to set the attribute fallbacks to.
  #
  # source://railties//lib/rails/configuration.rb#105
  def fallbacks=(_arg0); end

  # Returns the value of attribute hidden_namespaces.
  #
  # source://railties//lib/rails/configuration.rb#106
  def hidden_namespaces; end

  # source://railties//lib/rails/configuration.rb#126
  def hide_namespace(namespace); end

  # source://railties//lib/rails/configuration.rb#143
  def method_missing(method, *args); end

  # Returns the value of attribute options.
  #
  # source://railties//lib/rails/configuration.rb#105
  def options; end

  # Sets the attribute options
  #
  # @param value the value to set the attribute options to.
  #
  # source://railties//lib/rails/configuration.rb#105
  def options=(_arg0); end

  # Returns the value of attribute templates.
  #
  # source://railties//lib/rails/configuration.rb#105
  def templates; end

  # Sets the attribute templates
  #
  # @param value the value to set the attribute templates to.
  #
  # source://railties//lib/rails/configuration.rb#105
  def templates=(_arg0); end

  private

  # source://railties//lib/rails/configuration.rb#119
  def initialize_copy(source); end
end

# MiddlewareStackProxy is a proxy for the \Rails middleware stack that allows
# you to configure middlewares in your application. It works basically as a
# command recorder, saving each command to be applied after initialization
# over the default middleware stack, so you can add, swap, or remove any
# middleware in \Rails.
#
# You can add your own middlewares by using the +config.middleware.use+ method:
#
#     config.middleware.use Magical::Unicorns
#
# This will put the +Magical::Unicorns+ middleware on the end of the stack.
# You can use +insert_before+ if you wish to add a middleware before another:
#
#     config.middleware.insert_before Rack::Head, Magical::Unicorns
#
# There's also +insert_after+ which will insert a middleware after another:
#
#     config.middleware.insert_after Rack::Head, Magical::Unicorns
#
# Middlewares can also be completely swapped out and replaced with others:
#
#     config.middleware.swap ActionDispatch::Flash, Magical::Unicorns
#
# Middlewares can be moved from one place to another:
#
#     config.middleware.move_before ActionDispatch::Flash, Magical::Unicorns
#
# This will move the +Magical::Unicorns+ middleware before the
# +ActionDispatch::Flash+. You can also move it after:
#
#     config.middleware.move_after ActionDispatch::Flash, Magical::Unicorns
#
# And finally they can also be removed from the stack completely:
#
#     config.middleware.delete ActionDispatch::Flash
#
# source://railties//lib/rails/configuration.rb#46
class Rails::Configuration::MiddlewareStackProxy
  # @return [MiddlewareStackProxy] a new instance of MiddlewareStackProxy
  #
  # source://railties//lib/rails/configuration.rb#47
  def initialize(operations = T.unsafe(nil), delete_operations = T.unsafe(nil)); end

  # source://railties//lib/rails/configuration.rb#96
  def +(other); end

  # source://railties//lib/rails/configuration.rb#70
  def delete(*_arg0, **_arg1, &_arg2); end

  # source://railties//lib/rails/configuration.rb#52
  def insert(*_arg0, **_arg1, &_arg2); end

  # source://railties//lib/rails/configuration.rb#58
  def insert_after(*_arg0, **_arg1, &_arg2); end

  # source://railties//lib/rails/configuration.rb#52
  def insert_before(*_arg0, **_arg1, &_arg2); end

  # source://railties//lib/rails/configuration.rb#88
  def merge_into(other); end

  # source://railties//lib/rails/configuration.rb#74
  def move(*_arg0, **_arg1, &_arg2); end

  # source://railties//lib/rails/configuration.rb#80
  def move_after(*_arg0, **_arg1, &_arg2); end

  # source://railties//lib/rails/configuration.rb#74
  def move_before(*_arg0, **_arg1, &_arg2); end

  # source://railties//lib/rails/configuration.rb#62
  def swap(*_arg0, **_arg1, &_arg2); end

  # source://railties//lib/rails/configuration.rb#84
  def unshift(*_arg0, **_arg1, &_arg2); end

  # source://railties//lib/rails/configuration.rb#66
  def use(*_arg0, **_arg1, &_arg2); end

  protected

  # Returns the value of attribute delete_operations.
  #
  # source://railties//lib/rails/configuration.rb#101
  def delete_operations; end

  # Returns the value of attribute operations.
  #
  # source://railties//lib/rails/configuration.rb#101
  def operations; end
end

# source://railties//lib/rails/commands/dbconsole/dbconsole_command.rb#7
class Rails::DBConsole
  # @return [DBConsole] a new instance of DBConsole
  #
  # source://railties//lib/rails/commands/dbconsole/dbconsole_command.rb#12
  def initialize(options = T.unsafe(nil)); end

  # source://railties//lib/rails/commands/dbconsole/dbconsole_command.rb#44
  def database; end

  # source://railties//lib/rails/commands/dbconsole/dbconsole_command.rb#23
  def db_config; end

  # source://railties//lib/rails/commands/dbconsole/dbconsole_command.rb#48
  def environment; end

  # source://railties//lib/rails/commands/dbconsole/dbconsole_command.rb#17
  def start; end

  private

  # source://railties//lib/rails/commands/dbconsole/dbconsole_command.rb#53
  def adapter_class; end

  # source://railties//lib/rails/commands/dbconsole/dbconsole_command.rb#59
  def configurations; end

  class << self
    # source://railties//lib/rails/commands/dbconsole/dbconsole_command.rb#8
    def start(*args); end
  end
end

# source://railties//lib/rails/generators.rb#14
module Rails::Generators
  include ::Rails::Command::Behavior
  extend ::Rails::Command::Behavior::ClassMethods

  # source://railties//lib/rails/generators.rb#27
  def namespace; end

  # source://railties//lib/rails/generators.rb#27
  def namespace=(val); end

  class << self
    # source://railties//lib/rails/generators.rb#279
    def add_generated_file(file); end

    # source://railties//lib/rails/generators.rb#92
    def after_generate_callbacks; end

    # source://railties//lib/rails/generators.rb#84
    def aliases; end

    # Configure generators for API only applications. It basically hides
    # everything that is usually browser related, such as assets and session
    # migration generators, and completely disable helpers and assets
    # so generators such as scaffold won't create them.
    #
    # source://railties//lib/rails/generators.rb#116
    def api_only!; end

    # source://railties//lib/rails/generators.rb#68
    def configure!(config); end

    # Hold configured generators fallbacks. If a plugin developer wants a
    # generator group to fall back to another group in case of missing generators,
    # they can add a fallback.
    #
    # For example, shoulda is considered a test_framework and is an extension
    # of test_unit. However, most part of shoulda generators are similar to
    # test_unit ones.
    #
    # Shoulda then can tell generators to search for test_unit generators when
    # some of them are not available by adding a fallback:
    #
    #   Rails::Generators.fallbacks[:shoulda] = :test_unit
    #
    # source://railties//lib/rails/generators.rb#108
    def fallbacks; end

    # Rails finds namespaces similar to Thor, it only adds one rule:
    #
    # Generators names must end with "_generator.rb". This is required because Rails
    # looks in load paths and loads the generator just before it's going to be used.
    #
    #   find_by_namespace :webrat, :rails, :integration
    #
    # Will search for the following generators:
    #
    #   "rails:webrat", "webrat:integration", "webrat"
    #
    # Notice that "rails:generators:webrat" could be loaded as well, what
    # Rails looks for is the first and last parts of the namespace.
    #
    # source://railties//lib/rails/generators.rb#234
    def find_by_namespace(name, base = T.unsafe(nil), context = T.unsafe(nil)); end

    # Show help message with available generators.
    #
    # source://railties//lib/rails/generators.rb#170
    def help(command = T.unsafe(nil)); end

    # Returns an array of generator namespaces that are hidden.
    # Generator namespaces may be hidden for a variety of reasons.
    # Some are aliased such as "rails:migration" and can be
    # invoked with the shorter "migration".
    #
    # source://railties//lib/rails/generators.rb#134
    def hidden_namespaces; end

    # source://railties//lib/rails/generators.rb#164
    def hide_namespace(*namespaces); end

    # source://railties//lib/rails/generators.rb#164
    def hide_namespaces(*namespaces); end

    # Receives a namespace, arguments, and the behavior to invoke the generator.
    # It's used as the default entry point for generate, destroy, and update
    # commands.
    #
    # source://railties//lib/rails/generators.rb#261
    def invoke(namespace, args = T.unsafe(nil), config = T.unsafe(nil)); end

    # source://railties//lib/rails/generators.rb#27
    def namespace; end

    # source://railties//lib/rails/generators.rb#27
    def namespace=(val); end

    # source://railties//lib/rails/generators.rb#88
    def options; end

    # source://railties//lib/rails/generators.rb#192
    def print_generators; end

    # source://railties//lib/rails/generators.rb#187
    def public_namespaces; end

    # source://railties//lib/rails/generators.rb#196
    def sorted_groups; end

    # source://railties//lib/rails/generators.rb#80
    def templates_path; end

    private

    # source://railties//lib/rails/generators.rb#306
    def command_type; end

    # source://railties//lib/rails/generators.rb#314
    def file_lookup_paths; end

    # Try fallbacks for the given base.
    #
    # source://railties//lib/rails/generators.rb#291
    def invoke_fallbacks_for(name, base); end

    # source://railties//lib/rails/generators.rb#310
    def lookup_paths; end

    # source://railties//lib/rails/generators.rb#285
    def print_list(base, namespaces); end

    # source://railties//lib/rails/generators.rb#318
    def run_after_generate_callback; end
  end
end

# source://railties//lib/rails/generators/actions.rb#9
module Rails::Generators::Actions
  # source://railties//lib/rails/generators/actions.rb#10
  def initialize(*_arg0); end

  # Add the given source to +Gemfile+
  #
  # If block is given, gem entries in block are wrapped into the source group.
  #
  #   add_source "http://gems.github.com/"
  #
  #   add_source "http://gems.github.com/" do
  #     gem "rspec-rails"
  #   end
  #
  # source://railties//lib/rails/generators/actions.rb#151
  def add_source(source, options = T.unsafe(nil), &block); end

  # Adds configuration code to a \Rails runtime environment.
  #
  # By default, adds code inside the +Application+ class in
  # +config/application.rb+ so that it applies to all environments.
  #
  #   environment %(config.asset_host = "cdn.provider.com")
  #
  # Results in:
  #
  #   # config/application.rb
  #   class Application < Rails::Application
  #     config.asset_host = "cdn.provider.com"
  #     # ...
  #   end
  #
  # If the +:env+ option is specified, the code will be added to the
  # corresponding file in +config/environments+ instead.
  #
  #   environment %(config.asset_host = "localhost:3000"), env: "development"
  #
  # Results in:
  #
  #   # config/environments/development.rb
  #   Rails.application.configure do
  #     config.asset_host = "localhost:3000"
  #     # ...
  #   end
  #
  # +:env+ can also be an array. In which case, the code is added to each
  # corresponding file in +config/environments+.
  #
  # The code can also be specified as the return value of the block:
  #
  #   environment do
  #     %(config.asset_host = "cdn.provider.com")
  #   end
  #
  #   environment(nil, env: "development") do
  #     %(config.asset_host = "localhost:3000")
  #   end
  #
  # source://railties//lib/rails/generators/actions.rb#206
  def application(data = T.unsafe(nil), options = T.unsafe(nil)); end

  # Adds configuration code to a \Rails runtime environment.
  #
  # By default, adds code inside the +Application+ class in
  # +config/application.rb+ so that it applies to all environments.
  #
  #   environment %(config.asset_host = "cdn.provider.com")
  #
  # Results in:
  #
  #   # config/application.rb
  #   class Application < Rails::Application
  #     config.asset_host = "cdn.provider.com"
  #     # ...
  #   end
  #
  # If the +:env+ option is specified, the code will be added to the
  # corresponding file in +config/environments+ instead.
  #
  #   environment %(config.asset_host = "localhost:3000"), env: "development"
  #
  # Results in:
  #
  #   # config/environments/development.rb
  #   Rails.application.configure do
  #     config.asset_host = "localhost:3000"
  #     # ...
  #   end
  #
  # +:env+ can also be an array. In which case, the code is added to each
  # corresponding file in +config/environments+.
  #
  # The code can also be specified as the return value of the block:
  #
  #   environment do
  #     %(config.asset_host = "cdn.provider.com")
  #   end
  #
  #   environment(nil, env: "development") do
  #     %(config.asset_host = "localhost:3000")
  #   end
  #
  # source://railties//lib/rails/generators/actions.rb#206
  def environment(data = T.unsafe(nil), options = T.unsafe(nil)); end

  # Adds a +gem+ declaration to the +Gemfile+ for the specified gem.
  #
  #   gem "rspec", group: :test
  #   gem "technoweenie-restful-authentication", lib: "restful-authentication", source: "http://gems.github.com/"
  #   gem "rails", "3.0", git: "https://github.com/rails/rails"
  #   gem "RedCloth", ">= 4.1.0", "< 4.2.0"
  #   gem "rspec", comment: "Put this comment above the gem declaration"
  #
  # Note that this method only adds the gem to the +Gemfile+; it does not
  # install the gem.
  #
  # ==== Options
  #
  # [+:version+]
  #   The version constraints for the gem, specified as a string or an
  #   array of strings:
  #
  #     gem "my_gem", version: "~> 1.1"
  #     gem "my_gem", version: [">= 1.1", "< 2.0"]
  #
  #   Alternatively, can be specified as one or more arguments following the
  #   gem name:
  #
  #     gem "my_gem", ">= 1.1", "< 2.0"
  #
  # [+:comment+]
  #   Outputs a comment above the +gem+ declaration in the +Gemfile+.
  #
  #     gem "my_gem", comment: "First line.\nSecond line."
  #
  #   Outputs:
  #
  #     # First line.
  #     # Second line.
  #     gem "my_gem"
  #
  # [+:group+]
  #   The gem group in the +Gemfile+ that the gem belongs to.
  #
  # [+:git+]
  #   The URL of the git repository for the gem.
  #
  # Any additional options passed to this method will be appended to the
  # +gem+ declaration in the +Gemfile+. For example:
  #
  #   gem "my_gem", comment: "Edge my_gem", git: "https://example.com/my_gem.git", branch: "master"
  #
  # Outputs:
  #
  #   # Edge my_gem
  #   gem "my_gem", git: "https://example.com/my_gem.git", branch: "master"
  #
  # source://railties//lib/rails/generators/actions.rb#67
  def gem(*args); end

  # Wraps gem entries inside a group.
  #
  #   gem_group :development, :test do
  #     gem "rspec-rails"
  #   end
  #
  # source://railties//lib/rails/generators/actions.rb#111
  def gem_group(*names, &block); end

  # Runs another generator.
  #
  #   generate "scaffold", "Post title:string body:text"
  #   generate "scaffold", "Post", "title:string", "body:text"
  #
  # The first argument is the generator name, and the remaining arguments
  # are joined together and passed to the generator.
  #
  # source://railties//lib/rails/generators/actions.rb#332
  def generate(what, *args); end

  # Runs one or more git commands.
  #
  #   git :init
  #   # => runs `git init`
  #
  #   git add: "this.file that.rb"
  #   # => runs `git add this.file that.rb`
  #
  #   git commit: "-m 'First commit'"
  #   # => runs `git commit -m 'First commit'`
  #
  #   git add: "good.rb", rm: "bad.cxx"
  #   # => runs `git add good.rb; git rm bad.cxx`
  #
  # source://railties//lib/rails/generators/actions.rb#237
  def git(commands = T.unsafe(nil)); end

  # source://railties//lib/rails/generators/actions.rb#125
  def github(repo, options = T.unsafe(nil), &block); end

  # Creates an initializer file in +config/initializers/+. The code can be
  # specified as an argument or as the return value of the block.
  #
  #   initializer "api.rb", <<~RUBY
  #     API_KEY = "123456"
  #   RUBY
  #
  #   initializer "api.rb" do
  #     %(API_KEY = "123456")
  #   end
  #
  # source://railties//lib/rails/generators/actions.rb#319
  def initializer(filename, data = T.unsafe(nil)); end

  # Creates a file in +lib/+. The contents can be specified as an argument
  # or as the return value of the block.
  #
  #   lib "foreign.rb", <<~RUBY
  #     # Foreign code is fun
  #   RUBY
  #
  #   lib "foreign.rb" do
  #     "# Foreign code is fun"
  #   end
  #
  # source://railties//lib/rails/generators/actions.rb#275
  def lib(filename, data = T.unsafe(nil)); end

  # Runs the specified \Rails command.
  #
  #   rails_command "db:migrate"
  #   rails_command "db:migrate", env: "production"
  #   rails_command "db:migrate", abort_on_failure: true
  #   rails_command "stats", capture: true
  #   rails_command "gems:install", sudo: true
  #
  # ==== Options
  #
  # [+:env+]
  #   The \Rails environment in which to run the command. Defaults to
  #   <tt>ENV["RAILS_ENV"] || "development"</tt>.
  #
  # [+:abort_on_failure+]
  #   Whether to halt the generator if the command exits with a non-success
  #   exit status.
  #
  # [+:capture+]
  #   Whether to capture and return the output of the command.
  #
  # [+:sudo+]
  #   Whether to run the command using +sudo+.
  #
  # source://railties//lib/rails/generators/actions.rb#391
  def rails_command(command, options = T.unsafe(nil)); end

  # Runs the specified Rake task.
  #
  #   rake "db:migrate"
  #   rake "db:migrate", env: "production"
  #   rake "db:migrate", abort_on_failure: true
  #   rake "stats", capture: true
  #   rake "gems:install", sudo: true
  #
  # ==== Options
  #
  # [+:env+]
  #   The \Rails environment in which to run the task. Defaults to
  #   <tt>ENV["RAILS_ENV"] || "development"</tt>.
  #
  # [+:abort_on_failure+]
  #   Whether to halt the generator if the task exits with a non-success
  #   exit status.
  #
  # [+:capture+]
  #   Whether to capture and return the output of the task.
  #
  # [+:sudo+]
  #   Whether to run the task using +sudo+.
  #
  # source://railties//lib/rails/generators/actions.rb#364
  def rake(command, options = T.unsafe(nil)); end

  # Creates a Rake tasks file in +lib/tasks/+. The code can be specified as
  # an argument or as the return value of the block.
  #
  #   rakefile "bootstrap.rake", <<~RUBY
  #     task :bootstrap do
  #       puts "Boots! Boots! Boots!"
  #     end
  #   RUBY
  #
  #   rakefile "bootstrap.rake" do
  #     project = ask("What is the UNIX name of your project?")
  #
  #     <<~RUBY
  #       namespace :#{project} do
  #         task :bootstrap do
  #           puts "Boots! Boots! Boots!"
  #         end
  #       end
  #     RUBY
  #   end
  #
  # source://railties//lib/rails/generators/actions.rb#302
  def rakefile(filename, data = T.unsafe(nil)); end

  # Reads the given file at the source root and prints it in the console.
  #
  #   readme "README"
  #
  # source://railties//lib/rails/generators/actions.rb#442
  def readme(path); end

  # Make an entry in \Rails routing file <tt>config/routes.rb</tt>
  #
  #   route "root 'welcome#index'"
  #   route "root 'admin#index'", namespace: :admin
  #
  # source://railties//lib/rails/generators/actions.rb#409
  def route(routing_code, namespace: T.unsafe(nil)); end

  # Creates a file in +vendor/+. The contents can be specified as an
  # argument or as the return value of the block.
  #
  #   vendor "foreign.rb", <<~RUBY
  #     # Foreign code is fun
  #   RUBY
  #
  #   vendor "foreign.rb" do
  #     "# Foreign code is fun"
  #   end
  #
  # source://railties//lib/rails/generators/actions.rb#258
  def vendor(filename, data = T.unsafe(nil)); end

  private

  # Append string to a file with a newline if necessary
  #
  # source://railties//lib/rails/generators/actions.rb#507
  def append_file_with_newline(path, str, options = T.unsafe(nil)); end

  # Runs the supplied command using either "rake ..." or "rails ..."
  # based on the executor parameter provided.
  #
  # source://railties//lib/rails/generators/actions.rb#461
  def execute_command(executor, command, options = T.unsafe(nil)); end

  # Indent the +Gemfile+ to the depth of @indentation
  #
  # source://railties//lib/rails/generators/actions.rb#494
  def indentation; end

  # Define log for backwards compatibility. If just one argument is sent,
  # invoke say, otherwise invoke say_status. Differently from say and
  # similarly to say_status, this method respects the quiet? option given.
  #
  # source://railties//lib/rails/generators/actions.rb#450
  def log(*args); end

  # source://railties//lib/rails/generators/actions.rb#513
  def match_file(path, pattern); end

  # Returns optimized string with indentation
  #
  # source://railties//lib/rails/generators/actions.rb#487
  def optimize_indentation(value, amount = T.unsafe(nil)); end

  # Always returns value in double quotes.
  #
  # source://railties//lib/rails/generators/actions.rb#475
  def quote(value); end

  # Returns optimized string with indentation
  #
  # source://railties//lib/rails/generators/actions.rb#487
  def rebase_indentation(value, amount = T.unsafe(nil)); end

  # source://railties//lib/rails/generators/actions.rb#517
  def route_namespace_pattern(namespace); end

  # Manage +Gemfile+ indentation for a DSL action block
  #
  # source://railties//lib/rails/generators/actions.rb#499
  def with_indentation(&block); end
end

# source://railties//lib/rails/generators/actions/create_migration.rb#9
class Rails::Generators::Actions::CreateMigration < ::Thor::Actions::CreateFile
  # source://railties//lib/rails/generators/actions/create_migration.rb#41
  def existing_migration; end

  # source://railties//lib/rails/generators/actions/create_migration.rb#41
  def exists?; end

  # @return [Boolean]
  #
  # source://railties//lib/rails/generators/actions/create_migration.rb#18
  def identical?; end

  # source://railties//lib/rails/generators/actions/create_migration.rb#22
  def invoke!; end

  # source://railties//lib/rails/generators/actions/create_migration.rb#10
  def migration_dir; end

  # source://railties//lib/rails/generators/actions/create_migration.rb#14
  def migration_file_name; end

  # source://railties//lib/rails/generators/actions/create_migration.rb#37
  def relative_existing_migration; end

  # source://railties//lib/rails/generators/actions/create_migration.rb#29
  def revoke!; end

  private

  # source://railties//lib/rails/generators/actions/create_migration.rb#48
  def on_conflict_behavior; end

  # source://railties//lib/rails/generators/actions/create_migration.rb#69
  def say_status(status, color, message = T.unsafe(nil)); end
end

# ActiveModel is a class to be implemented by each ORM to allow \Rails to
# generate customized controller code.
#
# The API has the same methods as ActiveRecord, but each method returns a
# string that matches the ORM API.
#
# For example:
#
#   ActiveRecord::Generators::ActiveModel.find(Foo, "params[:id]")
#   # => "Foo.find(params[:id])"
#
#   DataMapper::Generators::ActiveModel.find(Foo, "params[:id]")
#   # => "Foo.get(params[:id])"
#
# On initialization, the ActiveModel accepts the instance name that will
# receive the calls:
#
#   builder = ActiveRecord::Generators::ActiveModel.new "@foo"
#   builder.save # => "@foo.save"
#
# The only exception in ActiveModel for ActiveRecord is the use of self.build
# instead of self.new.
#
# source://railties//lib/rails/generators/active_model.rb#28
class Rails::Generators::ActiveModel
  # @return [ActiveModel] a new instance of ActiveModel
  #
  # source://railties//lib/rails/generators/active_model.rb#31
  def initialize(name); end

  # Used for:
  #
  # * DELETE +destroy+
  #
  # source://railties//lib/rails/generators/active_model.rb#89
  def destroy; end

  # Used for:
  #
  # * POST +create+
  # * PATCH / PUT +update+
  #
  # source://railties//lib/rails/generators/active_model.rb#82
  def errors; end

  # Returns the value of attribute name.
  #
  # source://railties//lib/rails/generators/active_model.rb#29
  def name; end

  # Used for:
  #
  # * POST +create+
  #
  # source://railties//lib/rails/generators/active_model.rb#67
  def save; end

  # Used for:
  #
  # * PATCH / PUT +update+
  #
  # source://railties//lib/rails/generators/active_model.rb#74
  def update(params = T.unsafe(nil)); end

  class << self
    # Used for:
    #
    # * GET +index+
    #
    # source://railties//lib/rails/generators/active_model.rb#38
    def all(klass); end

    # Used for:
    #
    # * GET +new+
    # * POST +create+
    #
    # source://railties//lib/rails/generators/active_model.rb#56
    def build(klass, params = T.unsafe(nil)); end

    # Used for:
    #
    # * GET +show+
    # * GET +edit+
    # * PATCH / PUT +update+
    # * DELETE +destroy+
    #
    # source://railties//lib/rails/generators/active_model.rb#48
    def find(klass, params = T.unsafe(nil)); end
  end
end

# source://railties//lib/rails/generators/app_name.rb#5
module Rails::Generators::AppName
  private

  # source://railties//lib/rails/generators/app_name.rb#22
  def app_const; end

  # source://railties//lib/rails/generators/app_name.rb#17
  def app_const_base; end

  # source://railties//lib/rails/generators/app_name.rb#9
  def app_name; end

  # source://railties//lib/rails/generators/app_name.rb#17
  def camelized; end

  # source://railties//lib/rails/generators/app_name.rb#13
  def original_app_name; end

  # @return [Boolean]
  #
  # source://railties//lib/rails/generators/app_name.rb#26
  def valid_const?; end
end

# source://railties//lib/rails/generators/app_name.rb#6
Rails::Generators::AppName::RESERVED_NAMES = T.let(T.unsafe(nil), Array)

# source://railties//lib/rails/generators/base.rb#17
class Rails::Generators::Base < ::Thor::Group
  include ::Thor::Actions
  include ::Rails::Generators::Actions
  extend ::Thor::Actions::ClassMethods

  private

  # Check whether the given class names are already taken by user
  # application or Ruby on Rails.
  #
  # source://railties//lib/rails/generators/base.rb#264
  def class_collisions(*class_names); end

  # Takes in an array of nested modules and extracts the last module
  #
  # source://railties//lib/rails/generators/base.rb#287
  def extract_last_module(nesting); end

  # source://railties//lib/rails/generators/base.rb#302
  def indent(content, multiplier = T.unsafe(nil)); end

  # Wrap block with namespace of current application
  # if namespace exists and is not skipped
  #
  # source://railties//lib/rails/generators/base.rb#296
  def module_namespacing(&block); end

  # source://railties//lib/rails/generators/base.rb#312
  def namespace; end

  # source://railties//lib/rails/generators/base.rb#320
  def namespace_dirs; end

  # @return [Boolean]
  #
  # source://railties//lib/rails/generators/base.rb#316
  def namespaced?; end

  # source://railties//lib/rails/generators/base.rb#324
  def namespaced_path; end

  # source://railties//lib/rails/generators/base.rb#307
  def wrap_with_namespace(content); end

  class << self
    # Small macro to add ruby as an option to the generator with proper
    # default value plus an instance helper method called shebang.
    #
    # source://railties//lib/rails/generators/base.rb#396
    def add_shebang_option!; end

    # Use \Rails default banner.
    #
    # source://railties//lib/rails/generators/base.rb#329
    def banner; end

    # Sets the base_name taking into account the current class namespace.
    #
    # source://railties//lib/rails/generators/base.rb#334
    def base_name; end

    # Returns the base root for a common set of generators. This is used to dynamically
    # guess the default source root.
    #
    # source://railties//lib/rails/generators/base.rb#236
    def base_root; end

    # Make class option aware of Rails::Generators.options and Rails::Generators.aliases.
    #
    # source://railties//lib/rails/generators/base.rb#217
    def class_option(name, options = T.unsafe(nil)); end

    # Returns default aliases for the option name given doing a lookup in
    # Rails::Generators.aliases.
    #
    # source://railties//lib/rails/generators/base.rb#357
    def default_aliases_for_option(name, options); end

    # Returns default for the option name given doing a lookup in config.
    #
    # source://railties//lib/rails/generators/base.rb#362
    def default_for_option(config, name, options, default); end

    # source://railties//lib/rails/generators/base.rb#422
    def default_generator_root; end

    # Returns the default source root for a given generator. This is used internally
    # by Rails to set its generators source root. If you want to customize your source
    # root, you should use source_root.
    #
    # source://railties//lib/rails/generators/base.rb#227
    def default_source_root; end

    # Returns the default value for the option name given doing a lookup in
    # Rails::Generators.options.
    #
    # source://railties//lib/rails/generators/base.rb#351
    def default_value_for_option(name, options); end

    # Tries to get the description from a USAGE file one folder above the source
    # root otherwise uses a default description.
    #
    # source://railties//lib/rails/generators/base.rb#41
    def desc(description = T.unsafe(nil)); end

    # @return [Boolean]
    #
    # source://railties//lib/rails/generators/base.rb#29
    def exit_on_failure?; end

    # Removes the namespaces and get the generator name. For example,
    # Rails::Generators::ModelGenerator will return "model" as generator name.
    #
    # source://railties//lib/rails/generators/base.rb#342
    def generator_name; end

    # Convenience method to hide this generator from the available ones when
    # running rails generator command.
    #
    # source://railties//lib/rails/generators/base.rb#61
    def hide!; end

    # Invoke a generator based on the value supplied by the user to the
    # given option named "name". A class option is created when this method
    # is invoked and you can set a hash to customize it.
    #
    # ==== Examples
    #
    #   module Rails::Generators
    #     class ControllerGenerator < Base
    #       hook_for :test_framework, aliases: "-t"
    #     end
    #   end
    #
    # The example above will create a test framework option and will invoke
    # a generator based on the user supplied value.
    #
    # For example, if the user invoke the controller generator as:
    #
    #   $ bin/rails generate controller Account --test-framework=test_unit
    #
    # The controller generator will then try to invoke the following generators:
    #
    #   "rails:test_unit", "test_unit:controller", "test_unit"
    #
    # Notice that "rails:generators:test_unit" could be loaded as well, what
    # \Rails looks for is the first and last parts of the namespace. This is what
    # allows any test framework to hook into \Rails as long as it provides any
    # of the hooks above.
    #
    # ==== Options
    #
    # The first and last part used to find the generator to be invoked are
    # guessed based on class invokes hook_for, as noticed in the example above.
    # This can be customized with two options: +:in+ and +:as+.
    #
    # Let's suppose you are creating a generator that needs to invoke the
    # controller generator from test unit. Your first attempt is:
    #
    #   class AwesomeGenerator < Rails::Generators::Base
    #     hook_for :test_framework
    #   end
    #
    # The lookup in this case for test_unit as input is:
    #
    #   "test_unit:awesome", "test_unit"
    #
    # Which is not the desired lookup. You can change it by providing the
    # +:as+ option:
    #
    #   class AwesomeGenerator < Rails::Generators::Base
    #     hook_for :test_framework, as: :controller
    #   end
    #
    # And now it will look up at:
    #
    #   "test_unit:controller", "test_unit"
    #
    # Similarly, if you want it to also look up in the rails namespace, you
    # just need to provide the +:in+ value:
    #
    #   class AwesomeGenerator < Rails::Generators::Base
    #     hook_for :test_framework, in: :rails, as: :controller
    #   end
    #
    # And the lookup is exactly the same as previously:
    #
    #   "rails:test_unit", "test_unit:controller", "test_unit"
    #
    # ==== Switches
    #
    # All hooks come with switches for user interface. If you do not want
    # to use any test framework, you can do:
    #
    #   $ bin/rails generate controller Account --skip-test-framework
    #
    # Or similarly:
    #
    #   $ bin/rails generate controller Account --no-test-framework
    #
    # ==== Boolean hooks
    #
    # In some cases, you may want to provide a boolean hook. For example, webrat
    # developers might want to have webrat available on controller generator.
    # This can be achieved as:
    #
    #   Rails::Generators::ControllerGenerator.hook_for :webrat, type: :boolean
    #
    # Then, if you want webrat to be invoked, just supply:
    #
    #   $ bin/rails generate controller Account --webrat
    #
    # The hooks lookup is similar as above:
    #
    #   "rails:generators:webrat", "webrat:generators:controller", "webrat"
    #
    # ==== Custom invocations
    #
    # You can also supply a block to hook_for to customize how the hook is
    # going to be invoked. The block receives two arguments, an instance
    # of the current class and the class to be invoked.
    #
    # For example, in the resource generator, the controller should be invoked
    # with a pluralized class name. But by default it is invoked with the same
    # name as the resource generator, which is singular. To change this, we
    # can give a block to customize how the controller can be invoked.
    #
    #   hook_for :resource_controller do |instance, controller|
    #     instance.invoke controller, [ instance.name.pluralize ]
    #   end
    #
    # source://railties//lib/rails/generators/base.rb#174
    def hook_for(*names, &block); end

    # Keep hooks configuration that are used on prepare_for_invocation.
    #
    # source://railties//lib/rails/generators/base.rb#375
    def hooks; end

    # Cache source root and add lib/generators/base/generator/templates to
    # source paths.
    #
    # source://railties//lib/rails/generators/base.rb#242
    def inherited(base); end

    # Convenience method to get the namespace from the class name. It's the
    # same as Thor default except that the Generator at the end of the class
    # is removed.
    #
    # source://railties//lib/rails/generators/base.rb#54
    def namespace(name = T.unsafe(nil)); end

    # Prepare class invocation to search on Rails namespace if a previous
    # added hook is being used.
    #
    # source://railties//lib/rails/generators/base.rb#381
    def prepare_for_invocation(name, value); end

    # Remove a previously added hook.
    #
    #   remove_hook_for :orm
    #
    # source://railties//lib/rails/generators/base.rb#207
    def remove_hook_for(*names); end

    # Returns the source root for this generator using default_source_root as default.
    #
    # source://railties//lib/rails/generators/base.rb#34
    def source_root(path = T.unsafe(nil)); end

    # source://railties//lib/rails/generators/base.rb#414
    def usage_path; end
  end
end

# source://railties//lib/rails/generators.rb#29
Rails::Generators::DEFAULT_ALIASES = T.let(T.unsafe(nil), Hash)

# source://railties//lib/rails/generators.rb#46
Rails::Generators::DEFAULT_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://railties//lib/rails/generators/database.rb#5
class Rails::Generators::Database
  # @raise [NotImplementedError]
  #
  # source://railties//lib/rails/generators/database.rb#119
  def base_package; end

  # @raise [NotImplementedError]
  #
  # source://railties//lib/rails/generators/database.rb#123
  def build_package; end

  # source://railties//lib/rails/generators/database.rb#130
  def feature; end

  # @raise [NotImplementedError]
  #
  # source://railties//lib/rails/generators/database.rb#111
  def feature_name; end

  # @raise [NotImplementedError]
  #
  # source://railties//lib/rails/generators/database.rb#115
  def gem; end

  # source://railties//lib/rails/generators/database.rb#128
  def host; end

  # @raise [NotImplementedError]
  #
  # source://railties//lib/rails/generators/database.rb#95
  def name; end

  # @raise [NotImplementedError]
  #
  # source://railties//lib/rails/generators/database.rb#107
  def port; end

  # @raise [NotImplementedError]
  #
  # source://railties//lib/rails/generators/database.rb#103
  def service; end

  # source://railties//lib/rails/generators/database.rb#127
  def socket; end

  # @raise [NotImplementedError]
  #
  # source://railties//lib/rails/generators/database.rb#99
  def template; end

  # source://railties//lib/rails/generators/database.rb#136
  def volume; end

  class << self
    # source://railties//lib/rails/generators/database.rb#84
    def all; end

    # source://railties//lib/rails/generators/database.rb#72
    def build(database_name); end
  end
end

# source://railties//lib/rails/generators/database.rb#6
Rails::Generators::Database::DATABASES = T.let(T.unsafe(nil), Array)

# source://railties//lib/rails/generators/database.rb#49
module Rails::Generators::Database::MariaDB
  # source://railties//lib/rails/generators/database.rb#50
  def name; end

  # source://railties//lib/rails/generators/database.rb#54
  def port; end

  # source://railties//lib/rails/generators/database.rb#58
  def service; end
end

# source://railties//lib/rails/generators/database.rb#267
class Rails::Generators::Database::MariaDBMySQL2 < ::Rails::Generators::Database::MySQL2
  include ::Rails::Generators::Database::MariaDB
end

# source://railties//lib/rails/generators/database.rb#271
class Rails::Generators::Database::MariaDBTrilogy < ::Rails::Generators::Database::Trilogy
  include ::Rails::Generators::Database::MariaDB
end

# source://railties//lib/rails/generators/database.rb#8
module Rails::Generators::Database::MySQL
  # source://railties//lib/rails/generators/database.rb#44
  def host; end

  # source://railties//lib/rails/generators/database.rb#9
  def name; end

  # source://railties//lib/rails/generators/database.rb#13
  def port; end

  # source://railties//lib/rails/generators/database.rb#17
  def service; end

  # source://railties//lib/rails/generators/database.rb#30
  def socket; end
end

# source://railties//lib/rails/generators/database.rb#142
class Rails::Generators::Database::MySQL2 < ::Rails::Generators::Database
  include ::Rails::Generators::Database::MySQL

  # source://railties//lib/rails/generators/database.rb#153
  def base_package; end

  # source://railties//lib/rails/generators/database.rb#157
  def build_package; end

  # source://railties//lib/rails/generators/database.rb#161
  def feature_name; end

  # source://railties//lib/rails/generators/database.rb#149
  def gem; end

  # source://railties//lib/rails/generators/database.rb#145
  def template; end
end

# source://railties//lib/rails/generators/database.rb#275
class Rails::Generators::Database::Null < ::Rails::Generators::Database
  # source://railties//lib/rails/generators/database.rb#281
  def base_package; end

  # source://railties//lib/rails/generators/database.rb#282
  def build_package; end

  # source://railties//lib/rails/generators/database.rb#283
  def feature_name; end

  # source://railties//lib/rails/generators/database.rb#276
  def name; end

  # source://railties//lib/rails/generators/database.rb#279
  def port; end

  # source://railties//lib/rails/generators/database.rb#278
  def service; end

  # source://railties//lib/rails/generators/database.rb#277
  def template; end

  # source://railties//lib/rails/generators/database.rb#280
  def volume; end
end

# source://railties//lib/rails/generators/database.rb#166
class Rails::Generators::Database::PostgreSQL < ::Rails::Generators::Database
  # source://railties//lib/rails/generators/database.rb#196
  def base_package; end

  # source://railties//lib/rails/generators/database.rb#200
  def build_package; end

  # source://railties//lib/rails/generators/database.rb#204
  def feature_name; end

  # source://railties//lib/rails/generators/database.rb#192
  def gem; end

  # source://railties//lib/rails/generators/database.rb#167
  def name; end

  # source://railties//lib/rails/generators/database.rb#188
  def port; end

  # source://railties//lib/rails/generators/database.rb#175
  def service; end

  # source://railties//lib/rails/generators/database.rb#171
  def template; end
end

# source://railties//lib/rails/generators/database.rb#233
class Rails::Generators::Database::SQLite3 < ::Rails::Generators::Database
  # source://railties//lib/rails/generators/database.rb#254
  def base_package; end

  # source://railties//lib/rails/generators/database.rb#258
  def build_package; end

  # source://railties//lib/rails/generators/database.rb#262
  def feature_name; end

  # source://railties//lib/rails/generators/database.rb#250
  def gem; end

  # source://railties//lib/rails/generators/database.rb#234
  def name; end

  # source://railties//lib/rails/generators/database.rb#246
  def port; end

  # source://railties//lib/rails/generators/database.rb#242
  def service; end

  # source://railties//lib/rails/generators/database.rb#238
  def template; end
end

# source://railties//lib/rails/generators/database.rb#209
class Rails::Generators::Database::Trilogy < ::Rails::Generators::Database
  include ::Rails::Generators::Database::MySQL

  # source://railties//lib/rails/generators/database.rb#220
  def base_package; end

  # source://railties//lib/rails/generators/database.rb#224
  def build_package; end

  # source://railties//lib/rails/generators/database.rb#228
  def feature_name; end

  # source://railties//lib/rails/generators/database.rb#216
  def gem; end

  # source://railties//lib/rails/generators/database.rb#212
  def template; end
end

# source://railties//lib/rails/generators/base.rb#14
class Rails::Generators::Error < ::Thor::Error; end

# source://railties//lib/rails/generators/generated_attribute.rb#8
class Rails::Generators::GeneratedAttribute
  # @return [GeneratedAttribute] a new instance of GeneratedAttribute
  #
  # source://railties//lib/rails/generators/generated_attribute.rb#114
  def initialize(name, type = T.unsafe(nil), index_type = T.unsafe(nil), attr_options = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://railties//lib/rails/generators/generated_attribute.rb#216
  def attachment?; end

  # @return [Boolean]
  #
  # source://railties//lib/rails/generators/generated_attribute.rb#220
  def attachments?; end

  # Returns the value of attribute attr_options.
  #
  # source://railties//lib/rails/generators/generated_attribute.rb#32
  def attr_options; end

  # source://railties//lib/rails/generators/generated_attribute.rb#176
  def column_name; end

  # source://railties//lib/rails/generators/generated_attribute.rb#138
  def default; end

  # source://railties//lib/rails/generators/generated_attribute.rb#122
  def field_type; end

  # @return [Boolean]
  #
  # source://railties//lib/rails/generators/generated_attribute.rb#180
  def foreign_key?; end

  # @return [Boolean]
  #
  # source://railties//lib/rails/generators/generated_attribute.rb#196
  def has_index?; end

  # @return [Boolean]
  #
  # source://railties//lib/rails/generators/generated_attribute.rb#200
  def has_uniq_index?; end

  # source://railties//lib/rails/generators/generated_attribute.rb#164
  def human_name; end

  # source://railties//lib/rails/generators/generated_attribute.rb#168
  def index_name; end

  # Sets the attribute index_name
  #
  # @param value the value to set the attribute index_name to.
  #
  # source://railties//lib/rails/generators/generated_attribute.rb#33
  def index_name=(_arg0); end

  # source://railties//lib/rails/generators/generated_attribute.rb#232
  def inject_index_options; end

  # source://railties//lib/rails/generators/generated_attribute.rb#228
  def inject_options; end

  # Returns the value of attribute name.
  #
  # source://railties//lib/rails/generators/generated_attribute.rb#31
  def name; end

  # Sets the attribute name
  #
  # @param value the value to set the attribute name to.
  #
  # source://railties//lib/rails/generators/generated_attribute.rb#31
  def name=(_arg0); end

  # source://railties//lib/rails/generators/generated_attribute.rb#236
  def options_for_migration; end

  # @return [Boolean]
  #
  # source://railties//lib/rails/generators/generated_attribute.rb#204
  def password_digest?; end

  # source://railties//lib/rails/generators/generated_attribute.rb#156
  def plural_name; end

  # @return [Boolean]
  #
  # source://railties//lib/rails/generators/generated_attribute.rb#188
  def polymorphic?; end

  # @return [Boolean]
  #
  # source://railties//lib/rails/generators/generated_attribute.rb#184
  def reference?; end

  # @return [Boolean]
  #
  # source://railties//lib/rails/generators/generated_attribute.rb#192
  def required?; end

  # @return [Boolean]
  #
  # source://railties//lib/rails/generators/generated_attribute.rb#212
  def rich_text?; end

  # source://railties//lib/rails/generators/generated_attribute.rb#160
  def singular_name; end

  # source://railties//lib/rails/generators/generated_attribute.rb#248
  def to_s; end

  # @return [Boolean]
  #
  # source://railties//lib/rails/generators/generated_attribute.rb#208
  def token?; end

  # Returns the value of attribute type.
  #
  # source://railties//lib/rails/generators/generated_attribute.rb#31
  def type; end

  # Sets the attribute type
  #
  # @param value the value to set the attribute type to.
  #
  # source://railties//lib/rails/generators/generated_attribute.rb#31
  def type=(_arg0); end

  # @return [Boolean]
  #
  # source://railties//lib/rails/generators/generated_attribute.rb#224
  def virtual?; end

  private

  # source://railties//lib/rails/generators/generated_attribute.rb#259
  def print_attribute_options; end

  class << self
    # @return [Boolean]
    #
    # source://railties//lib/rails/generators/generated_attribute.rb#68
    def dangerous_name?(name); end

    # source://railties//lib/rails/generators/generated_attribute.rb#36
    def parse(column_definition); end

    # @return [Boolean]
    #
    # source://railties//lib/rails/generators/generated_attribute.rb#83
    def reference?(type); end

    # @return [Boolean]
    #
    # source://railties//lib/rails/generators/generated_attribute.rb#79
    def valid_index_type?(index_type); end

    # @return [Boolean]
    #
    # source://railties//lib/rails/generators/generated_attribute.rb#73
    def valid_type?(type); end

    private

    # parse possible attribute options like :limit for string/text/binary/integer, :precision/:scale for decimals or :polymorphic for references/belongs_to
    # when declaring options curly brackets should be used
    #
    # source://railties//lib/rails/generators/generated_attribute.rb#90
    def parse_type_and_options(type); end
  end
end

# source://railties//lib/rails/generators/generated_attribute.rb#11
Rails::Generators::GeneratedAttribute::DEFAULT_TYPES = T.let(T.unsafe(nil), Array)

# source://railties//lib/rails/generators/generated_attribute.rb#9
Rails::Generators::GeneratedAttribute::INDEX_OPTIONS = T.let(T.unsafe(nil), Array)

# source://railties//lib/rails/generators/generated_attribute.rb#10
Rails::Generators::GeneratedAttribute::UNIQ_INDEX_OPTIONS = T.let(T.unsafe(nil), Array)

# Holds common methods for migrations. It assumes that migrations have the
# [0-9]*_name format and can be used by other frameworks (like Sequel)
# just by implementing the +next_migration_number+ method.
#
# source://railties//lib/rails/generators/migration.rb#11
module Rails::Generators::Migration
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Rails::Generators::Migration::ClassMethods

  # source://railties//lib/rails/generators/migration.rb#35
  def create_migration(destination, data, config = T.unsafe(nil), &block); end

  # Returns the value of attribute migration_class_name.
  #
  # source://railties//lib/rails/generators/migration.rb#13
  def migration_class_name; end

  # Returns the value of attribute migration_file_name.
  #
  # source://railties//lib/rails/generators/migration.rb#13
  def migration_file_name; end

  # Returns the value of attribute migration_number.
  #
  # source://railties//lib/rails/generators/migration.rb#13
  def migration_number; end

  # Creates a migration template at the given destination. The difference
  # to the default template method is that the migration number is prepended
  # to the destination file name.
  #
  # The migration number, migration file name, migration class name are
  # available as instance variables in the template to be rendered.
  #
  #   migration_template "migration.rb", "db/migrate/add_foo_to_bar.rb"
  #
  # source://railties//lib/rails/generators/migration.rb#56
  def migration_template(source, destination, config = T.unsafe(nil)); end

  # source://railties//lib/rails/generators/migration.rb#39
  def set_migration_assigns!(destination); end
end

# source://railties//lib/rails/generators/migration.rb#15
module Rails::Generators::Migration::ClassMethods
  # source://railties//lib/rails/generators/migration.rb#24
  def current_migration_number(dirname); end

  # @return [Boolean]
  #
  # source://railties//lib/rails/generators/migration.rb#20
  def migration_exists?(dirname, file_name); end

  # source://railties//lib/rails/generators/migration.rb#16
  def migration_lookup_at(dirname); end

  # @raise [NotImplementedError]
  #
  # source://railties//lib/rails/generators/migration.rb#30
  def next_migration_number(dirname); end
end

# source://railties//lib/rails/generators/model_helpers.rb#7
module Rails::Generators::ModelHelpers
  # source://railties//lib/rails/generators/model_helpers.rb#26
  def initialize(args, *_options); end

  # source://railties//lib/rails/generators/model_helpers.rb#19
  def skip_warn; end

  # source://railties//lib/rails/generators/model_helpers.rb#19
  def skip_warn=(val); end

  private

  # @return [Boolean]
  #
  # source://railties//lib/rails/generators/model_helpers.rb#56
  def inflection_impossible?(name); end

  # @return [Boolean]
  #
  # source://railties//lib/rails/generators/model_helpers.rb#52
  def irregular_model_name?(name); end

  # @return [Boolean]
  #
  # source://railties//lib/rails/generators/model_helpers.rb#48
  def plural_model_name?(name); end

  class << self
    # source://railties//lib/rails/generators/model_helpers.rb#21
    def included(base); end

    # source://railties//lib/rails/generators/model_helpers.rb#19
    def skip_warn; end

    # source://railties//lib/rails/generators/model_helpers.rb#19
    def skip_warn=(val); end
  end
end

# source://railties//lib/rails/generators/model_helpers.rb#14
Rails::Generators::ModelHelpers::INFLECTION_IMPOSSIBLE_ERROR_MESSAGE = T.let(T.unsafe(nil), String)

# source://railties//lib/rails/generators/model_helpers.rb#10
Rails::Generators::ModelHelpers::IRREGULAR_MODEL_NAME_WARN_MESSAGE = T.let(T.unsafe(nil), String)

# source://railties//lib/rails/generators/model_helpers.rb#8
Rails::Generators::ModelHelpers::PLURAL_MODEL_NAME_WARN_MESSAGE = T.let(T.unsafe(nil), String)

# source://railties//lib/rails/generators/named_base.rb#8
class Rails::Generators::NamedBase < ::Rails::Generators::Base
  # @return [NamedBase] a new instance of NamedBase
  #
  # source://railties//lib/rails/generators/named_base.rb#11
  def initialize(args, *options); end

  # Returns the value of attribute file_name.
  #
  # source://thor/1.3.2/lib/thor/base.rb#155
  def file_name; end

  # source://railties//lib/rails/generators/named_base.rb#29
  def js_template(source, destination); end

  # source://thor/1.3.2/lib/thor/base.rb#163
  def name; end

  # source://thor/1.3.2/lib/thor/base.rb#163
  def name=(_arg0); end

  # source://railties//lib/rails/generators/named_base.rb#23
  def template(source, *args, &block); end

  private

  # Tries to retrieve the application name or simply return application.
  #
  # source://railties//lib/rails/generators/named_base.rb#138
  def application_name; end

  # source://railties//lib/rails/generators/named_base.rb#175
  def assign_names!(name); end

  # source://railties//lib/rails/generators/named_base.rb#188
  def attributes_names; end

  # source://railties//lib/rails/generators/named_base.rb#70
  def class_name; end

  # source://railties//lib/rails/generators/named_base.rb#58
  def class_path; end

  # source://railties//lib/rails/generators/named_base.rb#105
  def edit_helper(*_arg0, **_arg1, &_arg2); end

  # source://railties//lib/rails/generators/named_base.rb#54
  def file_path; end

  # source://railties//lib/rails/generators/named_base.rb#125
  def fixture_file_name; end

  # source://railties//lib/rails/generators/named_base.rb#74
  def human_name; end

  # source://railties//lib/rails/generators/named_base.rb#82
  def i18n_scope; end

  # source://railties//lib/rails/generators/named_base.rb#97
  def index_helper(type: T.unsafe(nil)); end

  # source://railties//lib/rails/generators/named_base.rb#43
  def inside_template; end

  # @return [Boolean]
  #
  # source://railties//lib/rails/generators/named_base.rb#50
  def inside_template?; end

  # source://railties//lib/rails/generators/named_base.rb#150
  def model_resource_name(base_name = T.unsafe(nil), prefix: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://railties//lib/rails/generators/named_base.rb#200
  def mountable_engine?; end

  # source://railties//lib/rails/generators/named_base.rb#66
  def namespaced_class_path; end

  # source://railties//lib/rails/generators/named_base.rb#109
  def new_helper(type: T.unsafe(nil)); end

  # Convert attributes array into GeneratedAttribute objects.
  #
  # source://railties//lib/rails/generators/named_base.rb#182
  def parse_attributes!; end

  # source://railties//lib/rails/generators/named_base.rb#121
  def plural_file_name; end

  # source://railties//lib/rails/generators/named_base.rb#78
  def plural_name; end

  # source://railties//lib/rails/generators/named_base.rb#167
  def plural_route_name; end

  # source://railties//lib/rails/generators/named_base.rb#117
  def plural_table_name; end

  # @return [Boolean]
  #
  # source://railties//lib/rails/generators/named_base.rb#196
  def pluralize_table_names?; end

  # source://railties//lib/rails/generators/named_base.rb#146
  def redirect_resource_name; end

  # source://railties//lib/rails/generators/named_base.rb#62
  def regular_class_path; end

  # source://railties//lib/rails/generators/named_base.rb#129
  def route_url; end

  # source://railties//lib/rails/generators/named_base.rb#101
  def show_helper(arg = T.unsafe(nil), type: T.unsafe(nil)); end

  # FIXME: We are avoiding to use alias because a bug on thor that make
  # this method public and add it to the task list.
  #
  # source://railties//lib/rails/generators/named_base.rb#39
  def singular_name; end

  # source://railties//lib/rails/generators/named_base.rb#159
  def singular_route_name; end

  # source://railties//lib/rails/generators/named_base.rb#113
  def singular_table_name; end

  # source://railties//lib/rails/generators/named_base.rb#86
  def table_name; end

  # @return [Boolean]
  #
  # source://railties//lib/rails/generators/named_base.rb#93
  def uncountable?; end

  # source://railties//lib/rails/generators/named_base.rb#133
  def url_helper_prefix; end

  class << self
    # Add a class collisions name to be checked on class initialization. You
    # can supply a hash with a +:prefix+ or +:suffix+ to be tested.
    #
    # ==== Examples
    #
    #   check_class_collision suffix: "Decorator"
    #
    # If the generator is invoked with class name Admin, it will check for
    # the presence of "AdminDecorator".
    #
    # source://railties//lib/rails/generators/named_base.rb#214
    def check_class_collision(options = T.unsafe(nil)); end
  end
end

# We need to store the RAILS_DEV_PATH in a constant, otherwise the path
# can change when we FileUtils.cd.
#
# source://railties//lib/rails/generators.rb#65
Rails::Generators::RAILS_DEV_PATH = T.let(T.unsafe(nil), String)

# Deal with controller names on scaffold and add some helpers to deal with
# ActiveModel.
#
# source://railties//lib/rails/generators/resource_helpers.rb#10
module Rails::Generators::ResourceHelpers
  include ::Rails::Generators::ModelHelpers

  # Set controller variables on initialization.
  #
  # source://railties//lib/rails/generators/resource_helpers.rb#17
  def initialize(*args); end

  private

  # source://railties//lib/rails/generators/resource_helpers.rb#39
  def assign_controller_names!(name); end

  # source://railties//lib/rails/generators/resource_helpers.rb#50
  def controller_class_name; end

  # source://railties//lib/rails/generators/resource_helpers.rb#31
  def controller_class_path; end

  # Returns the value of attribute controller_file_name.
  #
  # source://railties//lib/rails/generators/resource_helpers.rb#29
  def controller_file_name; end

  # source://railties//lib/rails/generators/resource_helpers.rb#46
  def controller_file_path; end

  # source://railties//lib/rails/generators/resource_helpers.rb#54
  def controller_i18n_scope; end

  # Returns the value of attribute controller_name.
  #
  # source://railties//lib/rails/generators/resource_helpers.rb#29
  def controller_name; end

  # Loads the ORM::Generators::ActiveModel class. This class is responsible
  # to tell scaffold entities how to generate a specific method for the
  # ORM. Check Rails::Generators::ActiveModel for more information.
  #
  # source://railties//lib/rails/generators/resource_helpers.rb#61
  def orm_class; end

  # Initialize ORM::Generators::ActiveModel to access instance methods.
  #
  # source://railties//lib/rails/generators/resource_helpers.rb#77
  def orm_instance(name = T.unsafe(nil)); end

  class << self
    # source://railties//lib/rails/generators/resource_helpers.rb#11
    def included(base); end
  end
end

# This class provides a TestCase for testing generators. To set up, you need
# just to configure the destination and set which generator is being tested:
#
#   class AppGeneratorTest < Rails::Generators::TestCase
#     tests AppGenerator
#     destination File.expand_path("../tmp", __dir__)
#   end
#
# If you want to ensure your destination root is clean before running each test,
# you can set a setup callback:
#
#   class AppGeneratorTest < Rails::Generators::TestCase
#     tests AppGenerator
#     destination File.expand_path("../tmp", __dir__)
#     setup :prepare_destination
#   end
#
# source://railties//lib/rails/generators/test_case.rb#30
class Rails::Generators::TestCase < ::ActiveSupport::TestCase
  include ::ActiveSupport::Testing::Stream
  include ::Rails::Generators::Testing::Behavior
  include ::Rails::Generators::Testing::SetupAndTeardown
  include ::Rails::Generators::Testing::Assertions
  include ::FileUtils::StreamUtils_
  include ::FileUtils
  extend ::Rails::Generators::Testing::Behavior::ClassMethods

  # source://railties//lib/rails/generators/testing/behavior.rb#21
  def current_path; end

  # source://railties//lib/rails/generators/testing/behavior.rb#21
  def current_path=(_arg0); end

  # source://railties//lib/rails/generators/testing/behavior.rb#21
  def current_path?; end

  # source://railties//lib/rails/generators/testing/behavior.rb#22
  def default_arguments; end

  # source://railties//lib/rails/generators/testing/behavior.rb#22
  def default_arguments=(_arg0); end

  # source://railties//lib/rails/generators/testing/behavior.rb#22
  def default_arguments?; end

  # source://railties//lib/rails/generators/testing/behavior.rb#23
  def destination_root; end

  # source://railties//lib/rails/generators/testing/behavior.rb#23
  def destination_root=(_arg0); end

  # source://railties//lib/rails/generators/testing/behavior.rb#23
  def destination_root?; end

  # source://railties//lib/rails/generators/testing/behavior.rb#24
  def generator_class; end

  # source://railties//lib/rails/generators/testing/behavior.rb#24
  def generator_class=(_arg0); end

  # source://railties//lib/rails/generators/testing/behavior.rb#24
  def generator_class?; end

  class << self
    # source://railties//lib/rails/generators/testing/behavior.rb#21
    def current_path; end

    # source://railties//lib/rails/generators/testing/behavior.rb#21
    def current_path=(value); end

    # source://railties//lib/rails/generators/testing/behavior.rb#21
    def current_path?; end

    # source://railties//lib/rails/generators/testing/behavior.rb#22
    def default_arguments; end

    # source://railties//lib/rails/generators/testing/behavior.rb#22
    def default_arguments=(value); end

    # source://railties//lib/rails/generators/testing/behavior.rb#22
    def default_arguments?; end

    # source://railties//lib/rails/generators/testing/behavior.rb#23
    def destination_root; end

    # source://railties//lib/rails/generators/testing/behavior.rb#23
    def destination_root=(value); end

    # source://railties//lib/rails/generators/testing/behavior.rb#23
    def destination_root?; end

    # source://railties//lib/rails/generators/testing/behavior.rb#24
    def generator_class; end

    # source://railties//lib/rails/generators/testing/behavior.rb#24
    def generator_class=(value); end

    # source://railties//lib/rails/generators/testing/behavior.rb#24
    def generator_class?; end

    private

    # source://activesupport/8.0.1/lib/active_support/class_attribute.rb#15
    def __class_attr_current_path; end

    # source://activesupport/8.0.1/lib/active_support/class_attribute.rb#17
    def __class_attr_current_path=(new_value); end

    # source://activesupport/8.0.1/lib/active_support/class_attribute.rb#15
    def __class_attr_default_arguments; end

    # source://activesupport/8.0.1/lib/active_support/class_attribute.rb#17
    def __class_attr_default_arguments=(new_value); end

    # source://activesupport/8.0.1/lib/active_support/class_attribute.rb#15
    def __class_attr_destination_root; end

    # source://activesupport/8.0.1/lib/active_support/class_attribute.rb#17
    def __class_attr_destination_root=(new_value); end

    # source://activesupport/8.0.1/lib/active_support/class_attribute.rb#15
    def __class_attr_generator_class; end

    # source://activesupport/8.0.1/lib/active_support/class_attribute.rb#17
    def __class_attr_generator_class=(new_value); end
  end
end

# source://railties//lib/rails/generators/testing/behavior.rb#13
module Rails::Generators::Testing; end

# source://railties//lib/rails/generators/testing/assertions.rb#6
module Rails::Generators::Testing::Assertions
  # Asserts the given class method exists in the given content. This method does not detect
  # class methods inside (class << self), only class methods which starts with "self.".
  # When a block is given, it yields the content of the method.
  #
  #   assert_migration "db/migrate/create_products.rb" do |migration|
  #     assert_class_method :up, migration do |up|
  #       assert_match(/create_table/, up)
  #     end
  #   end
  #
  # source://railties//lib/rails/generators/testing/assertions.rb#88
  def assert_class_method(method, content, &block); end

  # Asserts a given file exists. You need to supply an absolute path or a path relative
  # to the configured destination:
  #
  #   assert_file "config/environment.rb"
  #
  # You can also give extra arguments. If the argument is a regexp, it will check if the
  # regular expression matches the given file content. If it's a string, it compares the
  # file with the given string:
  #
  #   assert_file "config/environment.rb", /initialize/
  #
  # Finally, when a block is given, it yields the file content:
  #
  #   assert_file "app/controllers/products_controller.rb" do |controller|
  #     assert_instance_method :index, controller do |index|
  #       assert_match(/Product\.all/, index)
  #     end
  #   end
  #
  # source://railties//lib/rails/generators/testing/assertions.rb#25
  def assert_directory(relative, *contents); end

  # Asserts the given attribute type gets a proper default value:
  #
  #   assert_field_default_value :string, "MyString"
  #
  # source://railties//lib/rails/generators/testing/assertions.rb#117
  def assert_field_default_value(attribute_type, value); end

  # Asserts the given attribute type gets translated to a field type
  # properly:
  #
  #   assert_field_type :date, :date_select
  #
  # source://railties//lib/rails/generators/testing/assertions.rb#110
  def assert_field_type(attribute_type, field_type); end

  # Asserts a given file exists. You need to supply an absolute path or a path relative
  # to the configured destination:
  #
  #   assert_file "config/environment.rb"
  #
  # You can also give extra arguments. If the argument is a regexp, it will check if the
  # regular expression matches the given file content. If it's a string, it compares the
  # file with the given string:
  #
  #   assert_file "config/environment.rb", /initialize/
  #
  # Finally, when a block is given, it yields the file content:
  #
  #   assert_file "app/controllers/products_controller.rb" do |controller|
  #     assert_instance_method :index, controller do |index|
  #       assert_match(/Product\.all/, index)
  #     end
  #   end
  #
  # source://railties//lib/rails/generators/testing/assertions.rb#25
  def assert_file(relative, *contents); end

  # Asserts a given initializer exists. You need to supply a path relative
  # to the `config/initializers/` directory.
  #
  #   assert_initializer "mail_interceptors.rb"
  #
  # You can also give extra arguments. If the argument is a regexp, it will check if the
  # regular expression matches the given file content. If it's a string, it compares the
  # file with the given string:
  #
  #   assert_initializer "mail_interceptors.rb", /SandboxEmailInterceptor/
  #
  # Finally, when a block is given, it yields the file content:
  #
  #   assert_initializer "mail_interceptors.rb" do |initializer|
  #     assert_match(/SandboxEmailInterceptor/, initializer)
  #   end
  #
  # source://railties//lib/rails/generators/testing/assertions.rb#141
  def assert_initializer(name, *contents, &block); end

  # Asserts the given method exists in the given content. When a block is given,
  # it yields the content of the method.
  #
  #   assert_file "app/controllers/products_controller.rb" do |controller|
  #     assert_instance_method :index, controller do |index|
  #       assert_match(/Product\.all/, index)
  #     end
  #   end
  #
  # source://railties//lib/rails/generators/testing/assertions.rb#100
  def assert_instance_method(method, content); end

  # Asserts the given method exists in the given content. When a block is given,
  # it yields the content of the method.
  #
  #   assert_file "app/controllers/products_controller.rb" do |controller|
  #     assert_instance_method :index, controller do |index|
  #       assert_match(/Product\.all/, index)
  #     end
  #   end
  #
  # source://railties//lib/rails/generators/testing/assertions.rb#100
  def assert_method(method, content); end

  # Asserts a given migration exists. You need to supply an absolute path or a
  # path relative to the configured destination:
  #
  #   assert_migration "db/migrate/create_products.rb"
  #
  # This method manipulates the given path and tries to find any migration which
  # matches the migration name. For example, the call above is converted to:
  #
  #   assert_file "db/migrate/003_create_products.rb"
  #
  # Consequently, assert_migration accepts the same arguments has assert_file.
  #
  # source://railties//lib/rails/generators/testing/assertions.rb#64
  def assert_migration(relative, *contents, &block); end

  # Asserts a given file does not exist. You need to supply an absolute path or a
  # path relative to the configured destination:
  #
  #   assert_no_file "config/random.rb"
  #
  # source://railties//lib/rails/generators/testing/assertions.rb#47
  def assert_no_directory(relative); end

  # Asserts a given file does not exist. You need to supply an absolute path or a
  # path relative to the configured destination:
  #
  #   assert_no_file "config/random.rb"
  #
  # source://railties//lib/rails/generators/testing/assertions.rb#47
  def assert_no_file(relative); end

  # Asserts a given migration does not exist. You need to supply an absolute path or a
  # path relative to the configured destination:
  #
  #   assert_no_migration "db/migrate/create_products.rb"
  #
  # source://railties//lib/rails/generators/testing/assertions.rb#74
  def assert_no_migration(relative); end
end

# source://railties//lib/rails/generators/testing/behavior.rb#14
module Rails::Generators::Testing::Behavior
  include ::ActiveSupport::Testing::Stream
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::Rails::Generators::Testing::Behavior::ClassMethods

  # Create a Rails::Generators::GeneratedAttribute by supplying the
  # attribute type and, optionally, the attribute name:
  #
  #   create_generated_attribute(:string, "name")
  #
  # source://railties//lib/rails/generators/testing/behavior.rb#89
  def create_generated_attribute(attribute_type, name = T.unsafe(nil), index = T.unsafe(nil)); end

  # Instantiate the generator.
  #
  # source://railties//lib/rails/generators/testing/behavior.rb#81
  def generator(args = T.unsafe(nil), options = T.unsafe(nil), config = T.unsafe(nil)); end

  # Runs the generator configured for this class. The first argument is an array like
  # command line arguments:
  #
  #   class AppGeneratorTest < Rails::Generators::TestCase
  #     tests AppGenerator
  #     destination File.expand_path("../tmp", __dir__)
  #     setup :prepare_destination
  #
  #     test "database.yml is not created when skipping Active Record" do
  #       run_generator %w(myapp --skip-active-record)
  #       assert_no_file "config/database.yml"
  #     end
  #   end
  #
  # You can provide a configuration hash as second argument. This method returns the output
  # printed by the generator.
  #
  # source://railties//lib/rails/generators/testing/behavior.rb#67
  def run_generator(args = T.unsafe(nil), config = T.unsafe(nil)); end

  private

  # @return [Boolean]
  #
  # source://railties//lib/rails/generators/testing/behavior.rb#94
  def destination_root_is_set?; end

  # source://railties//lib/rails/generators/testing/behavior.rb#98
  def ensure_current_path; end

  # source://railties//lib/rails/generators/testing/behavior.rb#108
  def migration_file_name(relative); end

  # Clears all files and directories in destination.
  #
  # source://railties//lib/rails/generators/testing/behavior.rb#103
  def prepare_destination; end

  module GeneratedClassMethods
    def current_path; end
    def current_path=(value); end
    def current_path?; end
    def default_arguments; end
    def default_arguments=(value); end
    def default_arguments?; end
    def destination_root; end
    def destination_root=(value); end
    def destination_root?; end
    def generator_class; end
    def generator_class=(value); end
    def generator_class?; end
  end

  module GeneratedInstanceMethods
    def current_path; end
    def current_path=(value); end
    def current_path?; end
    def default_arguments; end
    def default_arguments=(value); end
    def default_arguments?; end
    def destination_root; end
    def destination_root=(value); end
    def destination_root?; end
    def generator_class; end
    def generator_class=(value); end
    def generator_class?; end
  end
end

# source://railties//lib/rails/generators/testing/behavior.rb#27
module Rails::Generators::Testing::Behavior::ClassMethods
  # Sets default arguments on generator invocation. This can be overwritten when
  # invoking it.
  #
  #   arguments %w(app_name --skip-active-record)
  #
  # source://railties//lib/rails/generators/testing/behavior.rb#39
  def arguments(array); end

  # Sets the destination of generator files:
  #
  #   destination File.expand_path("../tmp", __dir__)
  #
  # source://railties//lib/rails/generators/testing/behavior.rb#46
  def destination(path); end

  # Sets which generator should be tested:
  #
  #   tests AppGenerator
  #
  # source://railties//lib/rails/generators/testing/behavior.rb#31
  def tests(klass); end
end

# source://railties//lib/rails/generators/testing/setup_and_teardown.rb#6
module Rails::Generators::Testing::SetupAndTeardown
  # source://railties//lib/rails/generators/testing/setup_and_teardown.rb#7
  def setup; end

  # source://railties//lib/rails/generators/testing/setup_and_teardown.rb#13
  def teardown; end
end

# source://railties//lib/rails/initializable.rb#6
module Rails::Initializable
  mixes_in_class_methods ::Rails::Initializable::ClassMethods

  # source://railties//lib/rails/initializable.rb#66
  def initializers; end

  # source://railties//lib/rails/initializable.rb#58
  def run_initializers(group = T.unsafe(nil), *args); end

  class << self
    # source://railties//lib/rails/initializable.rb#7
    def included(base); end
  end
end

# source://railties//lib/rails/initializable.rb#70
module Rails::Initializable::ClassMethods
  # @raise [ArgumentError]
  #
  # source://railties//lib/rails/initializable.rb#88
  def initializer(name, opts = T.unsafe(nil), &blk); end

  # source://railties//lib/rails/initializable.rb#71
  def initializers; end

  # source://railties//lib/rails/initializable.rb#75
  def initializers_chain; end

  # source://railties//lib/rails/initializable.rb#84
  def initializers_for(binding); end
end

# source://railties//lib/rails/initializable.rb#45
class Rails::Initializable::Collection < ::Array
  include ::TSort

  # source://railties//lib/rails/initializable.rb#53
  def +(other); end

  # source://railties//lib/rails/initializable.rb#49
  def tsort_each_child(initializer, &block); end

  def tsort_each_node; end
end

# source://railties//lib/rails/initializable.rb#11
class Rails::Initializable::Initializer
  # @return [Initializer] a new instance of Initializer
  #
  # source://railties//lib/rails/initializable.rb#14
  def initialize(name, context, options, &block); end

  # source://railties//lib/rails/initializable.rb#23
  def after; end

  # source://railties//lib/rails/initializable.rb#19
  def before; end

  # @return [Boolean]
  #
  # source://railties//lib/rails/initializable.rb#27
  def belongs_to?(group); end

  # source://railties//lib/rails/initializable.rb#35
  def bind(context); end

  # Returns the value of attribute block.
  #
  # source://railties//lib/rails/initializable.rb#12
  def block; end

  # source://railties//lib/rails/initializable.rb#40
  def context_class; end

  # Returns the value of attribute name.
  #
  # source://railties//lib/rails/initializable.rb#12
  def name; end

  # source://railties//lib/rails/initializable.rb#31
  def run(*args); end
end

# source://railties//lib/rails/paths.rb#6
module Rails::Paths; end

# source://railties//lib/rails/paths.rb#114
class Rails::Paths::Path
  include ::Enumerable

  # @return [Path] a new instance of Path
  #
  # source://railties//lib/rails/paths.rb#119
  def initialize(root, current, paths, options = T.unsafe(nil)); end

  # source://railties//lib/rails/paths.rb#171
  def <<(path); end

  # source://railties//lib/rails/paths.rb#132
  def absolute_current; end

  # source://railties//lib/rails/paths.rb#153
  def autoload!; end

  # source://railties//lib/rails/paths.rb#161
  def autoload?; end

  # source://railties//lib/rails/paths.rb#153
  def autoload_once!; end

  # source://railties//lib/rails/paths.rb#161
  def autoload_once?; end

  # source://railties//lib/rails/paths.rb#136
  def children; end

  # source://railties//lib/rails/paths.rb#176
  def concat(paths); end

  # source://railties//lib/rails/paths.rb#167
  def each(&block); end

  # source://railties//lib/rails/paths.rb#153
  def eager_load!; end

  # source://railties//lib/rails/paths.rb#161
  def eager_load?; end

  # Returns all expanded paths but only if they exist in the filesystem.
  #
  # source://railties//lib/rails/paths.rb#220
  def existent; end

  # source://railties//lib/rails/paths.rb#231
  def existent_directories; end

  # Expands all paths against the root and return all unique values.
  #
  # source://railties//lib/rails/paths.rb#201
  def expanded; end

  # source://railties//lib/rails/paths.rb#196
  def extensions; end

  # source://railties//lib/rails/paths.rb#143
  def first; end

  # Returns the value of attribute glob.
  #
  # source://railties//lib/rails/paths.rb#117
  def glob; end

  # Sets the attribute glob
  #
  # @param value the value to set the attribute glob to.
  #
  # source://railties//lib/rails/paths.rb#117
  def glob=(_arg0); end

  # source://railties//lib/rails/paths.rb#147
  def last; end

  # source://railties//lib/rails/paths.rb#153
  def load_path!; end

  # source://railties//lib/rails/paths.rb#161
  def load_path?; end

  # source://railties//lib/rails/paths.rb#188
  def paths; end

  # source://railties//lib/rails/paths.rb#171
  def push(path); end

  # source://railties//lib/rails/paths.rb#157
  def skip_autoload!; end

  # source://railties//lib/rails/paths.rb#157
  def skip_autoload_once!; end

  # source://railties//lib/rails/paths.rb#157
  def skip_eager_load!; end

  # source://railties//lib/rails/paths.rb#157
  def skip_load_path!; end

  # Expands all paths against the root and return all unique values.
  #
  # source://railties//lib/rails/paths.rb#201
  def to_a; end

  # source://railties//lib/rails/paths.rb#184
  def to_ary; end

  # source://railties//lib/rails/paths.rb#180
  def unshift(*paths); end

  private

  # source://railties//lib/rails/paths.rb#238
  def files_in(path); end
end

# This object is an extended hash that behaves as root of the Rails::Paths system.
# It allows you to collect information about how you want to structure your application
# paths through a Hash-like \API. It requires you to give a physical path on initialization.
#
#   root = Root.new "/rails"
#   root.add "app/controllers", eager_load: true
#
# The above command creates a new root object and adds "app/controllers" as a path.
# This means we can get a Rails::Paths::Path object back like below:
#
#   path = root["app/controllers"]
#   path.eager_load?               # => true
#   path.is_a?(Rails::Paths::Path) # => true
#
# The Path[rdoc-ref:Rails::Paths::Path] object is simply an enumerable and
# allows you to easily add extra paths:
#
#   path.is_a?(Enumerable) # => true
#   path.to_ary.inspect    # => ["app/controllers"]
#
#   path << "lib/controllers"
#   path.to_ary.inspect    # => ["app/controllers", "lib/controllers"]
#
# Notice that when you add a path using #add, the
# Path[rdoc-ref:Rails::Paths::Path] object created already contains the path
# with the same path value given to #add. In some situations, you may not
# want this behavior, so you can give <tt>:with</tt> as option.
#
#   root.add "config/routes", with: "config/routes.rb"
#   root["config/routes"].inspect # => ["config/routes.rb"]
#
# The #add method accepts the following options as arguments:
# +eager_load+, +autoload+, +autoload_once+, and +glob+.
#
# Finally, the Path[rdoc-ref:Rails::Paths::Path] object also provides a few
# helpers:
#
#   root = Root.new "/rails"
#   root.add "app/controllers"
#
#   root["app/controllers"].expanded # => ["/rails/app/controllers"]
#   root["app/controllers"].existent # => ["/rails/app/controllers"]
#
# Check the Rails::Paths::Path documentation for more information.
#
# source://railties//lib/rails/paths.rb#51
class Rails::Paths::Root
  # @return [Root] a new instance of Root
  #
  # source://railties//lib/rails/paths.rb#54
  def initialize(path); end

  # source://railties//lib/rails/paths.rb#69
  def [](path); end

  # source://railties//lib/rails/paths.rb#59
  def []=(path, value); end

  # source://railties//lib/rails/paths.rb#64
  def add(path, options = T.unsafe(nil)); end

  # source://railties//lib/rails/paths.rb#85
  def all_paths; end

  # source://railties//lib/rails/paths.rb#89
  def autoload_once; end

  # source://railties//lib/rails/paths.rb#97
  def autoload_paths; end

  # source://railties//lib/rails/paths.rb#93
  def eager_load; end

  # source://railties//lib/rails/paths.rb#77
  def keys; end

  # source://railties//lib/rails/paths.rb#101
  def load_paths; end

  # Returns the value of attribute path.
  #
  # source://railties//lib/rails/paths.rb#52
  def path; end

  # Sets the attribute path
  #
  # @param value the value to set the attribute path to.
  #
  # source://railties//lib/rails/paths.rb#52
  def path=(_arg0); end

  # source://railties//lib/rails/paths.rb#73
  def values; end

  # source://railties//lib/rails/paths.rb#81
  def values_at(*list); end

  private

  # source://railties//lib/rails/paths.rb#106
  def filter_by(&block); end
end

# source://railties//lib/rails/rack.rb#4
module Rails::Rack; end

# Sets log tags, logs the request, calls the app, and flushes the logs.
#
# Log tags (+taggers+) can be an Array containing: methods that the +request+
# object responds to, objects that respond to +to_s+ or Proc objects that accept
# an instance of the +request+ object.
#
# source://railties//lib/rails/rack/logger.rb#14
class Rails::Rack::Logger < ::ActiveSupport::LogSubscriber
  # @return [Logger] a new instance of Logger
  #
  # source://railties//lib/rails/rack/logger.rb#15
  def initialize(app, taggers = T.unsafe(nil)); end

  # source://railties//lib/rails/rack/logger.rb#20
  def call(env); end

  private

  # source://railties//lib/rails/rack/logger.rb#33
  def call_app(request, env); end

  # source://railties//lib/rails/rack/logger.rb#64
  def compute_tags(request); end

  # source://railties//lib/rails/rack/logger.rb#81
  def finish_request_instrumentation(handle, logger_tag_pop_count); end

  # source://railties//lib/rails/rack/logger.rb#77
  def logger; end

  # Started GET "/session/new" for 127.0.0.1 at 2012-09-26 14:51:42 -0700
  #
  # source://railties//lib/rails/rack/logger.rb#56
  def started_request_message(request); end
end

# Allows you to silence requests made to a specific path.
# This is useful for preventing recurring requests like health checks from clogging the logging.
# This middleware is used to do just that against the path /up in production by default.
#
# Example:
#
#   config.middleware.insert_before \
#     Rails::Rack::Logger, Rails::Rack::SilenceRequest, path: "/up"
#
# This middleware can also be configured using `config.silence_healthcheck_path = "/up"` in Rails.
#
# source://railties//lib/rails/rack/silence_request.rb#19
class Rails::Rack::SilenceRequest
  # @return [SilenceRequest] a new instance of SilenceRequest
  #
  # source://railties//lib/rails/rack/silence_request.rb#20
  def initialize(app, path:); end

  # source://railties//lib/rails/rack/silence_request.rb#24
  def call(env); end
end

# +Rails::Railtie+ is the core of the \Rails framework and provides
# several hooks to extend \Rails and/or modify the initialization process.
#
# Every major component of \Rails (Action Mailer, Action Controller, Active
# Record, etc.) implements a railtie. Each of them is responsible for their
# own initialization. This makes \Rails itself absent of any component hooks,
# allowing other components to be used in place of any of the \Rails defaults.
#
# Developing a \Rails extension does _not_ require implementing a railtie, but
# if you need to interact with the \Rails framework during or after boot, then
# a railtie is needed.
#
# For example, an extension doing any of the following would need a railtie:
#
# * creating initializers
# * configuring a \Rails framework for the application, like setting a generator
# * adding <tt>config.*</tt> keys to the environment
# * setting up a subscriber with ActiveSupport::Notifications
# * adding Rake tasks
#
# == Creating a Railtie
#
# To extend \Rails using a railtie, create a subclass of +Rails::Railtie+.
# This class must be loaded during the \Rails boot process, and is conventionally
# called +MyNamespace::Railtie+.
#
# The following example demonstrates an extension which can be used with or
# without \Rails.
#
#   # lib/my_gem/railtie.rb
#   module MyGem
#     class Railtie < Rails::Railtie
#     end
#   end
#
#   # lib/my_gem.rb
#   require "my_gem/railtie" if defined?(Rails::Railtie)
#
# == Initializers
#
# To add an initialization step to the \Rails boot process from your railtie, just
# define the initialization code with the +initializer+ macro:
#
#   class MyGem::Railtie < Rails::Railtie
#     initializer "my_gem.configure_rails_initialization" do
#       # some initialization behavior
#     end
#   end
#
# If specified, the block can also receive the application object, in case you
# need to access some application-specific configuration, like middleware:
#
#   class MyGem::Railtie < Rails::Railtie
#     initializer "my_gem.configure_rails_initialization" do |app|
#       app.middleware.use MyGem::Middleware
#     end
#   end
#
# Finally, you can also pass <tt>:before</tt> and <tt>:after</tt> as options to
# +initializer+, in case you want to couple it with a specific step in the
# initialization process.
#
# == Configuration
#
# Railties can access a config object which contains configuration shared by all
# railties and the application:
#
#   class MyGem::Railtie < Rails::Railtie
#     # Customize the ORM
#     config.app_generators.orm :my_gem_orm
#
#     # Add a to_prepare block which is executed once in production
#     # and before each request in development.
#     config.to_prepare do
#       MyGem.setup!
#     end
#   end
#
# == Loading Rake Tasks and Generators
#
# If your railtie has Rake tasks, you can tell \Rails to load them through the method
# +rake_tasks+:
#
#   class MyGem::Railtie < Rails::Railtie
#     rake_tasks do
#       load "path/to/my_gem.tasks"
#     end
#   end
#
# By default, \Rails loads generators from your load path. However, if you want to place
# your generators at a different location, you can specify in your railtie a block which
# will load them during normal generators lookup:
#
#   class MyGem::Railtie < Rails::Railtie
#     generators do
#       require "path/to/my_gem_generator"
#     end
#   end
#
# Since filenames on the load path are shared across gems, be sure that files you load
# through a railtie have unique names.
#
# == Run another program when the \Rails server starts
#
# In development, it's very usual to have to run another process next to the \Rails Server. In example
# you might want to start the Webpack or React server. Or maybe you need to run your job scheduler process
# like Sidekiq. This is usually done by opening a new shell and running the program from here.
#
# \Rails allow you to specify a +server+ block which will get called when a \Rails server starts.
# This way, your users don't need to remember to have to open a new shell and run another program, making
# this less confusing for everyone.
# It can be used like this:
#
#   class MyGem::Railtie < Rails::Railtie
#     server do
#       WebpackServer.start
#     end
#   end
#
# == Application and Engine
#
# An engine is nothing more than a railtie with some initializers already set. And since
# Rails::Application is an engine, the same configuration described here can be
# used in both.
#
# Be sure to look at the documentation of those specific classes for more information.
#
# source://railties//lib/rails/railtie.rb#136
class Rails::Railtie
  include ::Rails::Initializable
  extend ::ActiveSupport::DescendantsTracker
  extend ::Rails::Initializable::ClassMethods

  # @return [Railtie] a new instance of Railtie
  #
  # source://railties//lib/rails/railtie.rb#245
  def initialize; end

  # This is used to create the <tt>config</tt> object on Railties, an instance of
  # Railtie::Configuration, that is used by Railties and Application to store
  # related configuration.
  #
  # source://railties//lib/rails/railtie.rb#262
  def config; end

  # source://railties//lib/rails/railtie.rb#255
  def configure(&block); end

  # source://railties//lib/rails/railtie.rb#251
  def inspect; end

  # source://railties//lib/rails/railtie.rb#243
  def railtie_name(*_arg0, **_arg1, &_arg2); end

  # source://railties//lib/rails/railtie.rb#266
  def railtie_namespace; end

  protected

  # source://railties//lib/rails/railtie.rb#271
  def run_console_blocks(app); end

  # source://railties//lib/rails/railtie.rb#275
  def run_generators_blocks(app); end

  # source://railties//lib/rails/railtie.rb#279
  def run_runner_blocks(app); end

  # source://railties//lib/rails/railtie.rb#288
  def run_server_blocks(app); end

  # source://railties//lib/rails/railtie.rb#283
  def run_tasks_blocks(app); end

  private

  # run `&block` in every registered block in `#register_block_for`
  #
  # source://railties//lib/rails/railtie.rb#294
  def each_registered_block(type, &block); end

  class << self
    # source://railties//lib/rails/railtie.rb#194
    def <=>(other); end

    # @return [Boolean]
    #
    # source://railties//lib/rails/railtie.rb#172
    def abstract_railtie?; end

    # source://railties//lib/rails/railtie.rb#146
    def config(*_arg0, **_arg1, &_arg2); end

    # Allows you to configure the railtie. This is the same method seen in
    # Railtie::Configurable, but this module is no longer required for all
    # subclasses of Railtie so we provide the class method here.
    #
    # source://railties//lib/rails/railtie.rb#190
    def configure(&block); end

    # source://railties//lib/rails/railtie.rb#156
    def console(&blk); end

    # source://railties//lib/rails/railtie.rb#164
    def generators(&blk); end

    # @private
    #
    # source://railties//lib/rails/railtie.rb#198
    def inherited(subclass); end

    # Since Rails::Railtie cannot be instantiated, any methods that call
    # +instance+ are intended to be called only on subclasses of a Railtie.
    #
    # source://railties//lib/rails/railtie.rb#183
    def instance; end

    # source://railties//lib/rails/railtie.rb#176
    def railtie_name(name = T.unsafe(nil)); end

    # source://railties//lib/rails/railtie.rb#152
    def rake_tasks(&blk); end

    # source://railties//lib/rails/railtie.rb#160
    def runner(&blk); end

    # source://railties//lib/rails/railtie.rb#168
    def server(&blk); end

    # source://railties//lib/rails/railtie.rb#148
    def subclasses; end

    protected

    # source://railties//lib/rails/railtie.rb#206
    def increment_load_index; end

    # Returns the value of attribute load_index.
    #
    # source://railties//lib/rails/railtie.rb#204
    def load_index; end

    private

    # source://railties//lib/rails/railtie.rb#212
    def generate_railtie_name(string); end

    # If the class method does not have a method, then send the method call
    # to the Railtie instance.
    #
    # source://railties//lib/rails/railtie.rb#224
    def method_missing(name, *_arg1, **_arg2, &_arg3); end

    def new(*_arg0); end

    # receives an instance variable identifier, set the variable value if is
    # blank and append given block to value, which will be used later in
    # `#each_registered_block(type, &block)`
    #
    # source://railties//lib/rails/railtie.rb#235
    def register_block_for(type, &blk); end

    # @return [Boolean]
    #
    # source://railties//lib/rails/railtie.rb#216
    def respond_to_missing?(name, _); end
  end
end

# source://railties//lib/rails/railtie.rb#142
Rails::Railtie::ABSTRACT_RAILTIES = T.let(T.unsafe(nil), Array)

# source://railties//lib/rails/railtie/configuration.rb#7
class Rails::Railtie::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://railties//lib/rails/railtie/configuration.rb#8
  def initialize; end

  # Last configurable block to run. Called after frameworks initialize.
  #
  # source://railties//lib/rails/railtie/configuration.rb#70
  def after_initialize(&block); end

  # Called after application routes have been loaded.
  #
  # source://railties//lib/rails/railtie/configuration.rb#75
  def after_routes_loaded(&block); end

  # This allows you to modify application's generators from Railties.
  #
  # Values set on app_generators will become defaults for application, unless
  # application overwrites them.
  #
  # @yield [@@app_generators]
  #
  # source://railties//lib/rails/railtie/configuration.rb#47
  def app_generators; end

  # This allows you to modify the application's middlewares from Engines.
  #
  # All operations you run on the app_middleware will be replayed on the
  # application once it is defined and the default_middlewares are
  # created
  #
  # source://railties//lib/rails/railtie/configuration.rb#39
  def app_middleware; end

  # First configurable block to run. Called before any initializers are run.
  #
  # source://railties//lib/rails/railtie/configuration.rb#54
  def before_configuration(&block); end

  # Third configurable block to run. Does not run if +config.eager_load+
  # set to false.
  #
  # source://railties//lib/rails/railtie/configuration.rb#60
  def before_eager_load(&block); end

  # Second configurable block to run. Called before frameworks initialize.
  #
  # source://railties//lib/rails/railtie/configuration.rb#65
  def before_initialize(&block); end

  # All namespaces that are eager loaded
  #
  # source://railties//lib/rails/railtie/configuration.rb#18
  def eager_load_namespaces; end

  # @return [Boolean]
  #
  # source://railties//lib/rails/railtie/configuration.rb#90
  def respond_to?(name, include_private = T.unsafe(nil)); end

  # Defines generic callbacks to run before #after_initialize. Useful for
  # Rails::Railtie subclasses.
  #
  # source://railties//lib/rails/railtie/configuration.rb#86
  def to_prepare(&blk); end

  # Array of callbacks defined by #to_prepare.
  #
  # source://railties//lib/rails/railtie/configuration.rb#80
  def to_prepare_blocks; end

  # Add directories that should be watched for change.
  # The key of the hashes should be directories and the values should
  # be an array of extensions to match in each directory.
  #
  # source://railties//lib/rails/railtie/configuration.rb#30
  def watchable_dirs; end

  # Add files that should be watched for change.
  #
  # source://railties//lib/rails/railtie/configuration.rb#23
  def watchable_files; end

  private

  # @return [Boolean]
  #
  # source://railties//lib/rails/railtie/configuration.rb#95
  def actual_method?(key); end

  # source://railties//lib/rails/railtie/configuration.rb#99
  def method_missing(name, *args, &blk); end

  class << self
    # Expose the eager_load_namespaces at "module" level for convenience.
    #
    # source://railties//lib/rails/railtie/configuration.rb#13
    def eager_load_namespaces; end
  end
end
